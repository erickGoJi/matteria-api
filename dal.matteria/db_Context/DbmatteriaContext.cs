// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using biz.matteria;
using biz.matteria.Entities;

namespace dal.matteria.db_Context
{
    public partial class DbmatteriaContext : DbContext
    {
        public DbmatteriaContext()
        {
        }

        public DbmatteriaContext(DbContextOptions<DbmatteriaContext> options)
            : base(options)
        {
        }

        public virtual DbSet<CatalogsAdchannel> CatalogsAdchannels { get; set; }
        public virtual DbSet<CatalogsCareer> CatalogsCareers { get; set; }
        public virtual DbSet<CatalogsCause> CatalogsCauses { get; set; }
        public virtual DbSet<CatalogsCompanyservice> CatalogsCompanyservice { get; set; }
        public virtual DbSet<CatalogsCompanytype> CatalogsCompanytypes { get; set; }
        public virtual DbSet<CatalogsCountry> CatalogsCountrys { get; set; }
        public virtual DbSet<CatalogsCurrency> CatalogsCurrencys { get; set; }
        public virtual DbSet<CatalogsExparea> CatalogsExpareas { get; set; }
        public virtual DbSet<CatalogsExpsector> CatalogsExpsectors { get; set; }
        public virtual DbSet<CatalogsInterest> CatalogsInterests { get; set; }
        public virtual DbSet<CatalogsLanguage> CatalogsLanguages { get; set; }
        public virtual DbSet<CatalogsMailcontent> CatalogsMailcontents { get; set; }
        public virtual DbSet<CatalogsNotificationtype> CatalogsNotificationtypes { get; set; }
        public virtual DbSet<CatalogsOcctimeinterval> CatalogsOcctimeintervals { get; set; }
        public virtual DbSet<CatalogsOpeningclass> CatalogsOpeningclasss { get; set; }
        public virtual DbSet<CatalogsOpeningphase> CatalogsOpeningphases { get; set; }
        public virtual DbSet<CatalogsOpeningservice> CatalogsOpeningservices { get; set; }
        public virtual DbSet<CatalogsProfession> CatalogsProfessions { get; set; }
        public virtual DbSet<CatalogsState> CatalogsStates { get; set; }

        public virtual DbSet<CatalogOralLevel> CatalogOralLevels { get; set; }

        public virtual DbSet<CatalogWrittenLevel> CatalogWrittenLevels { get; set; }

        public virtual DbSet<CatalogsGrade> CatalogsGrade { get; set; }
        public virtual DbSet<AuthGroup> AuthGroups { get; set; }
        public virtual DbSet<AuthGroupPermission> AuthGroupPermissions { get; set; }
        public virtual DbSet<AuthPermission> AuthPermissions { get; set; }
        public virtual DbSet<AuthUser> AuthUsers { get; set; }
        public virtual DbSet<AuthUserGroup> AuthUserGroups { get; set; }
        public virtual DbSet<AuthUserUserPermission> AuthUserUserPermissions { get; set; }

        public virtual DbSet<CandidatesCandidateInterest> CandidatesCandidateInterests { get; set; }
        public virtual DbSet<FrontContentManagerCliente> FrontContentManagerCliente { get; set; }

        public virtual DbSet<CandidatesWorkandsocialexp> CandidatesWorkandsocialexps { get; set; }

        public virtual DbSet<CandidatesEducation> CandidatesEducations { get; set; }

        public virtual DbSet<CandidatesLanguage> CandidatesLanguages { get; set; }

        public virtual DbSet<CandidatesCandidateExpArea> CandidatesCandidateExpAreas { get; set; }

        public virtual DbSet<OpeningsOpening> OpeningsOpenings { get; set; }

        public virtual DbSet<OpeningsOpeningcandidate> OpeningsOpeningcandidates { get; set; }

        public virtual DbSet<CandidatesCandidate> CandidatesCandidates { get; set; }


        public virtual DbSet<CandidatesCandidateExpSector> CandidatesCandidateExpSectors { get; set; }

        public virtual DbSet<FrontContentManagerNuestrosservicio> FrontContentManagerNuestrosservicios { get; set; }
        
        public virtual DbSet<FrontContentManagerNuestrosserviciosHeader> FrontContentManagerNuestrosserviciosHeaders { get; set; }

        public virtual DbSet<FrontContentManagerConsulOnbiardingHeader> frontheaderonboarding { get; set; }

        public virtual DbSet<FrontContentManagerComofuncionaHeaderOnboarding> frontcomofuncionaonboarding { get; set; }

        public virtual DbSet<FrontContentComofuncionaDetailOnboarding> frontcomofuncionaonboardingDetail { get; set; }

        public virtual DbSet<FrontContentAssessment> FrontContentAssessments { get; set; }

        public virtual DbSet<FrontContentComofuncionaAssessment> FrontContentComofuncionaAssessments { get; set; }

        public virtual DbSet<FrontContentComofuncionaAssessmentDetail> FrontContentComofuncionaAssessmentsDetails { get; set; }

        public virtual DbSet<FrontContentAdnHeader> FrontContentAdnHeaders { get; set; }

        public virtual DbSet<FrontContentBeneficiosAdn> FrontContentBeneficiosAdns { get; set; }

        public virtual DbSet<FrontContentEnqueconsisteAdn> FrontContentEnqueconsisteAdns { get; set; }

        public virtual DbSet<FrontContentEnqueconsisteAdnHeader> FrontContentEnqueconsisteAdnHeaders { get; set; }

        public virtual DbSet<FrontContentObjetivosAdn> FrontContentObjetivosAdns { get; set; }

        public virtual DbSet<FrontContentObjetivosAdnHeader> FrontContentObjetivosAdnHeaders { get; set; }

        public virtual DbSet<FrontContentManifiestoMatterium> FrontContentManifiestoMatterium { get; set; }

        public virtual DbSet<FrontContentManifiestoMatteriaRazonser> FrontContentManifiestoMatteriaRazonsers { get; set; }

        public virtual DbSet<FrontContentTalleresHeader> FrontContentTalleresHeaders { get; set; }

        public virtual DbSet<FrontContentTalleresObjetivo> FrontContentTalleresObjetivos { get; set; }

        public virtual DbSet<FrontContentTalleresTemasDetail> FrontContentTalleresTemasDetails { get; set; }


        public virtual DbSet<FrontContentTalleresTemasHead> FrontContentTalleresTemasHeads { get; set; }

        public virtual DbSet<FrontContentVacantesComoFunciona> FrontContentVacantesComoFuncionas { get; set; }

        public virtual DbSet<FrontContentVacantesComoFuncionaHeader> FrontContentVacantesComoFuncionaHeaders { get; set; }

        public virtual DbSet<FrontContentVacantesComoPublicar> FrontContentVacantesComoPublicars { get; set; }

        public virtual DbSet<FrontContentVacantesHeader> FrontContentVacantesHeaders { get; set; }

        public virtual DbSet<FrontContentVacantesPaquete> FrontContentVacantesPaquetes { get; set; }

        public virtual DbSet<FrontContentRecruitingComo> FrontContentRecruitingComoes { get; set; }

        public virtual DbSet<FrontContentRecruitingComoEsHeader> FrontContentRecruitingComoEsHeaders { get; set; }

        public virtual DbSet<FrontContentRecruitingHeader> FrontContentRecruitingHeaders { get; set; }

        public virtual DbSet<FrontContentRecruitingPassive> FrontContentRecruitingPassives { get; set; }

        public virtual DbSet<FrontContentRecruitingPassiveHeader> FrontContentRecruitingPassiveHeaders { get; set; }

        public virtual DbSet<FrontContentReruitingPorQueContratarno> FrontContentReruitingPorQueContratarnos { get; set; }

        public virtual DbSet<FrontContentOurAdn> FrontContentOurAdns { get; set; }

        public virtual DbSet<FrontContentOurAdnhead> FrontContentOurAdnheads { get; set; }

        public virtual DbSet<FrontContentManagerEquipo> FrontContentManagerEquipos { get; set; }

        public virtual DbSet<FrontContentManagerBlog> FrontContentManagerBlogs { get; set; }

        public virtual DbSet<CatalogsTypeContract> CatalogsTypeContracts { get; set; }

        public virtual DbSet<OpeningsOpeningProfession> OpeningProfessions { get; set; }

        public virtual DbSet<CatalogsLanguage> catalogsLanguage { get; set; }

        public virtual DbSet<FontContentContenidoRecursosBlog> FontContentContenidoRecursosBlogs { get; set; }

        public virtual DbSet<CatalogsAreaOpening> areaOpening { get; set; }

        public virtual DbSet<Credito> creditos { get; set; }

        public virtual DbSet<ProgramaMai> programaMai { get; set; }

        public virtual DbSet<ProgramaMaiobjective> programaMAIObjetive { get; set; }

        public virtual DbSet<ProgramaMaimodelo> programaMAIModelo { get; set; }

        public virtual DbSet<MetodosPago> metodopago { get; set; }

        public virtual DbSet<MetodosPagosCountry> metodopagocountry { get; set; }

        public virtual DbSet<Pago> pagos { get; set; }

        public virtual DbSet<CatalogsTipoOrganizacion> cattipoorganizacion { get; set; }

        public virtual DbSet<CompaniesCompany> company { get; set; }

        public virtual DbSet<FrontContentManagerFaq> faqs { get; set; }

        public virtual DbSet<FrontContentPoliticasPrivacidad> politicasPrivacidad { get; set; }

        public virtual DbSet<FrontContentHomeOrgContenidoRecurso> homeorgcontenidorecurso { get; set; }

        public virtual DbSet<FrontContentHomeOrganizacionPorQueMatterium> homeorgproquematerria { get; set; }

        public virtual DbSet<FrontContentHeaderOrganizacione> homeHeaderOrg { get; set; }

        public virtual DbSet<FrontContentHomeImpactoPostulante> homeimpactopostulante { get; set; }


        public virtual DbSet<FrontContentHomeHeaderPostulante> homeheaderpostulante { get; set; }

        public virtual DbSet<FrontContentHomeGeneral> homeGeneral { get; set; }

        public virtual DbSet<FrontContentManagerAliado> aliado { get; set; }

        public virtual DbSet<FrontContentManagerAliadosHeader> aliadoHeader { get; set; }

        public virtual DbSet<FrontContentManagerEquipoHeader> equipoHeader { get; set; }

        public virtual DbSet<EstatusVacante> estatusvacantes { get; set; }

        public virtual DbSet<ComprasPaquete> compraPaquete { get; set; }

        public virtual DbSet<ContactsCompany> contactCompany { get; set; }

        public virtual DbSet<ContactsContact> contactContact { get; set; }

        public virtual DbSet<ContactsGeneral> contactsGeneral { get; set; }

        public virtual DbSet<ContactoGeneralConfiguracion> contactoGeneralConfiguracion { get; set; }
        public virtual DbSet<ContactsMai> contactMAI { get; set; }

        public virtual DbSet<FrontContentEstructuraSalarial> estructurasalarial { get; set; }

        public virtual DbSet<FrontContentEstructuraSalarialDetalle> estructurasalarialdetalle { get; set; }

        public virtual DbSet<FrontContentPorqueMatterium> porquematteria { get; set; }

        public virtual DbSet<UsuariosRole> usuarioRol { get; set; }

        public virtual DbSet<Role> roles { get; set; }

        public virtual DbSet<MenuPrincipal> menuPrincipal { get; set; }

        public virtual DbSet<Footer> footer { get; set; }

        public virtual DbSet<EstatusVacantesProceso> statusProceso { get; set; }

        public virtual DbSet<NewsletterOrganizationFrontConfiguration> letterconfigurationOrg { get; set; }

        public virtual DbSet<NewsletterPostulantFrontConfiguration> letterconfigurationPostulant { get; set; }

        public virtual DbSet<FrontContentManagerNuestrosclientesinfo> clientesinfo { get; set; }

        public virtual DbSet<StepByStepPostulant> stepByStepPostulante { get; set; }

        public virtual DbSet<VisitasVacante> visitaVacante { get; set; }

        public virtual DbSet<CrearCuentaOrganizacionConfiguracion> cuentaorgconfig { get; set; }

        public virtual DbSet<IngresoOrganizacionConfiguracion> ingresoOrgConfig { get; set; }

        public virtual DbSet<ConfiguracionMisVacantesOrganizacion> confMisVcanatesOrg { get; set; }

        public virtual DbSet<ConfiguracionPerfilOrganizacion> confPerfilOrg { get; set; }

        public virtual DbSet<ConfiguracionStepByStepOrganizacion> confstepBystepOrg { get; set; }

        public virtual DbSet<ConfiguracionOrganizacion> configOrg { get; set; }

        public virtual DbSet<ConfiguracionCrearCuentaPostulante> crearCtaPostulante { get; set; }

        public virtual DbSet<ConfiguracionBusquedaVacantesPostulante> configBusquedavacantes { get; set; }

        public virtual DbSet<ConfiguracionMiPerfilPostulante> configperfilpost { get; set; }

        public virtual DbSet<ConfiguracionPublicaVacantesOrganizacion> configpublicavacante { get; set; }

        public virtual DbSet<ConfiguracionPostulante> configPostulante { get; set; }

        public virtual DbSet<FrontContentConsultoriaOrganizacional> consultoriaOrganizacional { get; set; }

        public virtual DbSet<OpeningsOpeningInterest> openinginterest { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            modelBuilder.Entity<FrontContentConsultoriaOrganizacional>(entity =>
            {
                entity.ToTable("frontContentConsultoriaOrganizacional");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BtnLink)
                    .HasColumnType("text")
                    .HasColumnName("btnLink");

                entity.Property(e => e.CreatinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("creatin_date");

                entity.Property(e => e.Description)
                    .HasColumnType("text")
                    .HasColumnName("description");

                entity.Property(e => e.DescriptionEn)
                    .HasColumnType("text")
                    .HasColumnName("description_en");

                entity.Property(e => e.DescriptionPt)
                    .HasColumnType("text")
                    .HasColumnName("description_pt");

                entity.Property(e => e.Image)
                    .HasColumnType("text")
                    .HasColumnName("image");

                entity.Property(e => e.LabelBtn)
                    .HasColumnType("text")
                    .HasColumnName("labelBtn");

                entity.Property(e => e.LabelBtnEn)
                    .HasColumnType("text")
                    .HasColumnName("labelBtn_en");

                entity.Property(e => e.LabelBtnPt)
                    .HasColumnType("text")
                    .HasColumnName("labelBtn_pt");

                entity.Property(e => e.Title)
                    .HasColumnType("text")
                    .HasColumnName("title");

                entity.Property(e => e.TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("title_en");

                entity.Property(e => e.TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("title_pt");
            });

            modelBuilder.Entity<FrontContentConsultoriaOrganizacionalDetalle>(entity =>
            {
                entity.ToTable("FrontContentConsultoriaOrganizacionalDetalle");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ConsultoriaOrganizacionalId).HasColumnName("consultoriaOrganizacionalId");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("creation_date");

                entity.Property(e => e.Description)
                    .HasColumnType("text")
                    .HasColumnName("description");

                entity.Property(e => e.DescriptionEn)
                    .HasColumnType("text")
                    .HasColumnName("description_en");

                entity.Property(e => e.DescriptionPt)
                    .HasColumnType("text")
                    .HasColumnName("description_pt");

                entity.Property(e => e.Imagen)
                    .HasColumnType("text")
                    .HasColumnName("imagen");

                entity.Property(e => e.MoreInfo)
                    .HasColumnType("text")
                    .HasColumnName("moreInfo");

                entity.Property(e => e.MoreInfoEn)
                    .HasColumnType("text")
                    .HasColumnName("moreInfo_en");

                entity.Property(e => e.MoreInfoLink)
                    .HasColumnType("text")
                    .HasColumnName("moreInfoLink");

                entity.Property(e => e.MoreInfoPt)
                    .HasColumnType("text")
                    .HasColumnName("moreInfo_pt");

                entity.Property(e => e.Title)
                    .HasColumnType("text")
                    .HasColumnName("title");

                entity.Property(e => e.TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("title_en");

                entity.Property(e => e.TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("title_pt");

                entity.HasOne(d => d.ConsultoriaOrganizacional)
                    .WithMany(p => p.FrontContentConsultoriaOrganizacionalDetalles)
                    .HasForeignKey(d => d.ConsultoriaOrganizacionalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrontContentConsultoriaOrganizacionalDetalle_frontContentConsultoriaOrganizacional");
            });


            modelBuilder.Entity<ConfiguracionPostulante>(entity =>
            {
                entity.ToTable("ConfiguracionPostulante");

                entity.Property(e => e.ActualPassword)
                    .HasColumnType("text")
                    .HasColumnName("actualPassword");

                entity.Property(e => e.ActualPasswordEn)
                    .HasColumnType("text")
                    .HasColumnName("actualPassword_en");

                entity.Property(e => e.ActualPasswordPt)
                    .HasColumnType("text")
                    .HasColumnName("actualPassword_pt");

                entity.Property(e => e.BtnChangePassword)
                    .HasColumnType("text")
                    .HasColumnName("btnChangePassword");

                entity.Property(e => e.BtnChangePasswordEn)
                    .HasColumnType("text")
                    .HasColumnName("btnChangePassword_en");

                entity.Property(e => e.BtnChangePasswordPt)
                    .HasColumnType("text")
                    .HasColumnName("btnChangePassword_pt");

                entity.Property(e => e.BtnDelete)
                    .HasColumnType("text")
                    .HasColumnName("btnDelete");

                entity.Property(e => e.BtnDeleteEn)
                    .HasColumnType("text")
                    .HasColumnName("btnDelete_en");

                entity.Property(e => e.BtnDeletePt)
                    .HasColumnType("text")
                    .HasColumnName("btnDelete_pt");

                entity.Property(e => e.ConfirmPassword)
                    .HasColumnType("text")
                    .HasColumnName("confirmPassword");

                entity.Property(e => e.ConfirmPasswordEn)
                    .HasColumnType("text")
                    .HasColumnName("confirmPassword_en");

                entity.Property(e => e.ConfirmPasswordPt)
                    .HasColumnType("text")
                    .HasColumnName("confirmPassword_pt");

                entity.Property(e => e.MenuConfiguracion)
                    .HasColumnType("text")
                    .HasColumnName("menuConfiguracion");

                entity.Property(e => e.MenuConfiguracionEn)
                    .HasColumnType("text")
                    .HasColumnName("menuConfiguracion_en");

                entity.Property(e => e.MenuConfiguracionPt)
                    .HasColumnType("text")
                    .HasColumnName("menuConfiguracion_pt");

                entity.Property(e => e.MenuMiPerfil)
                    .HasColumnType("text")
                    .HasColumnName("menuMiPerfil");

                entity.Property(e => e.MenuMiPerfilEn)
                    .HasColumnType("text")
                    .HasColumnName("menuMiPerfil_en");

                entity.Property(e => e.MenuMiPerfilPt)
                    .HasColumnType("text")
                    .HasColumnName("menuMiPerfil_pt");

                entity.Property(e => e.MenuMisPostulaciones)
                    .HasColumnType("text")
                    .HasColumnName("menuMisPostulaciones");

                entity.Property(e => e.MenuMisPostulacionesEn)
                    .HasColumnType("text")
                    .HasColumnName("menuMisPostulaciones_en");

                entity.Property(e => e.MenuMisPostulacionesPt)
                    .HasColumnType("text")
                    .HasColumnName("menuMisPostulaciones_pt");

                entity.Property(e => e.NewPassword)
                    .HasColumnType("text")
                    .HasColumnName("newPassword");

                entity.Property(e => e.NewPasswordEn)
                    .HasColumnType("text")
                    .HasColumnName("newPassword_en");

                entity.Property(e => e.NewPasswordPt)
                    .HasColumnType("text")
                    .HasColumnName("newPassword_pt");

                entity.Property(e => e.NotificationBox)
                    .HasColumnType("text")
                    .HasColumnName("notificationBox");

                entity.Property(e => e.NotificationBoxEn)
                    .HasColumnType("text")
                    .HasColumnName("notificationBox_en");

                entity.Property(e => e.NotificationBoxPt)
                    .HasColumnType("text")
                    .HasColumnName("notificationBox_pt");

                entity.Property(e => e.PlaceHolders)
                    .HasColumnType("text")
                    .HasColumnName("placeHolders");

                entity.Property(e => e.PlaceHoldersEn)
                    .HasColumnType("text")
                    .HasColumnName("placeHolders_en");

                entity.Property(e => e.PlaceHoldersPt)
                    .HasColumnType("text")
                    .HasColumnName("placeHolders_pt");

                entity.Property(e => e.Reasons)
                    .HasColumnType("text")
                    .HasColumnName("reasons");

                entity.Property(e => e.ReasonsEn)
                    .HasColumnType("text")
                    .HasColumnName("reasons_en");

                entity.Property(e => e.ReasonsPt)
                    .HasColumnType("text")
                    .HasColumnName("reasons_pt");

                entity.Property(e => e.SamllPassword)
                    .HasColumnType("text")
                    .HasColumnName("samllPassword");

                entity.Property(e => e.SamllPasswordEn)
                    .HasColumnType("text")
                    .HasColumnName("samllPassword_en");

                entity.Property(e => e.SamllPasswordPt)
                    .HasColumnType("text")
                    .HasColumnName("samllPassword_pt");

                entity.Property(e => e.SmallsRequired)
                    .HasColumnType("text")
                    .HasColumnName("smallsRequired");

                entity.Property(e => e.SmallsRequiredEn)
                    .HasColumnType("text")
                    .HasColumnName("smallsRequired_en");

                entity.Property(e => e.SmallsRequiredPt)
                    .HasColumnType("text")
                    .HasColumnName("smallsRequired_pt");

                entity.Property(e => e.SubTitleThree)
                    .HasColumnType("text")
                    .HasColumnName("subTitleThree");

                entity.Property(e => e.SubTitleThreeEn)
                    .HasColumnType("text")
                    .HasColumnName("subTitleThree_en");

                entity.Property(e => e.SubTitleThreePt)
                    .HasColumnType("text")
                    .HasColumnName("subTitleThree_pt");

                entity.Property(e => e.SubtitleFour)
                    .HasColumnType("text")
                    .HasColumnName("subtitleFour");

                entity.Property(e => e.SubtitleFourEn)
                    .HasColumnType("text")
                    .HasColumnName("subtitleFour_en");

                entity.Property(e => e.SubtitleFourPt)
                    .HasColumnType("text")
                    .HasColumnName("subtitleFour_pt");

                entity.Property(e => e.SubtitleOne)
                    .HasColumnType("text")
                    .HasColumnName("subtitleOne");

                entity.Property(e => e.SubtitleOneEn)
                    .HasColumnType("text")
                    .HasColumnName("subtitleOne_en");

                entity.Property(e => e.SubtitleOnePt)
                    .HasColumnType("text")
                    .HasColumnName("subtitleOne_pt");

                entity.Property(e => e.SubtitleTwo)
                    .HasColumnType("text")
                    .HasColumnName("subtitleTwo");

                entity.Property(e => e.SubtitleTwoEn)
                    .HasColumnType("text")
                    .HasColumnName("subtitleTwo_en");

                entity.Property(e => e.SubtitleTwoPt)
                    .HasColumnType("text")
                    .HasColumnName("subtitleTwo_pt");

                entity.Property(e => e.ToastNotificationActive)
                    .HasColumnType("text")
                    .HasColumnName("toastNotificationActive");

                entity.Property(e => e.ToastNotificationActiveEn)
                    .HasColumnType("text")
                    .HasColumnName("toastNotificationActive_en");

                entity.Property(e => e.ToastNotificationActivePt)
                    .HasColumnType("text")
                    .HasColumnName("toastNotificationActive_pt");

                entity.Property(e => e.ToastNotificationInactive)
                    .HasColumnType("text")
                    .HasColumnName("toastNotificationInactive");

                entity.Property(e => e.ToastNotificationInactiveEn)
                    .HasColumnType("text")
                    .HasColumnName("toastNotificationInactive_en");

                entity.Property(e => e.ToastNotificationInactivePt)
                    .HasColumnType("text")
                    .HasColumnName("toastNotificationInactive_pt");

                entity.Property(e => e.ToastPasswordError)
                    .HasColumnType("text")
                    .HasColumnName("toastPasswordError");

                entity.Property(e => e.ToastPasswordErrorEn)
                    .HasColumnType("text")
                    .HasColumnName("toastPasswordError_en");

                entity.Property(e => e.ToastPasswordErrorPt)
                    .HasColumnType("text")
                    .HasColumnName("toastPasswordError_pt");

                entity.Property(e => e.ToastPasswordSuccess)
                    .HasColumnType("text")
                    .HasColumnName("toastPasswordSuccess");

                entity.Property(e => e.ToastPasswordSuccessEn)
                    .HasColumnType("text")
                    .HasColumnName("toastPasswordSuccess_en");

                entity.Property(e => e.ToastPasswordSuccessPt)
                    .HasColumnType("text")
                    .HasColumnName("toastPasswordSuccess_pt");

                entity.Property(e => e.UrlConfiguracion)
                    .HasColumnType("text")
                    .HasColumnName("urlConfiguracion");

                entity.Property(e => e.UrlMisPostulaciones)
                    .HasColumnType("text")
                    .HasColumnName("urlMisPostulaciones");

                entity.Property(e => e.UrlPerfil)
                    .HasColumnType("text")
                    .HasColumnName("urlPerfil");
            });

            modelBuilder.Entity<ConfiguracionPublicaVacantesOrganizacion>(entity =>
            {
                entity.ToTable("ConfiguracionPublicaVacantesOrganizacion");

                entity.Property(e => e.BtnAtras)
                    .HasColumnType("text")
                    .HasColumnName("btnAtras");

                entity.Property(e => e.BtnAtrasEn)
                    .HasColumnType("text")
                    .HasColumnName("btnAtras_en");

                entity.Property(e => e.BtnAtrasPt)
                    .HasColumnType("text")
                    .HasColumnName("btnAtras_pt");

                entity.Property(e => e.BtnComenzar)
                    .HasColumnType("text")
                    .HasColumnName("btnComenzar");

                entity.Property(e => e.BtnComenzarEn)
                    .HasColumnType("text")
                    .HasColumnName("btnComenzar_en");

                entity.Property(e => e.BtnComenzarPt)
                    .HasColumnType("text")
                    .HasColumnName("btnComenzar_pt");

                entity.Property(e => e.BtnEnviar)
                    .HasColumnType("text")
                    .HasColumnName("btnEnviar");

                entity.Property(e => e.BtnEnviarEn)
                    .HasColumnType("text")
                    .HasColumnName("btnEnviar_en");

                entity.Property(e => e.BtnEnviarPt)
                    .HasColumnType("text")
                    .HasColumnName("btnEnviar_pt");

                entity.Property(e => e.BtnRevisar)
                    .HasColumnType("text")
                    .HasColumnName("btnRevisar");

                entity.Property(e => e.BtnRevisarEn)
                    .HasColumnType("text")
                    .HasColumnName("btnRevisar_en");

                entity.Property(e => e.BtnRevisarPt)
                    .HasColumnType("text")
                    .HasColumnName("btnRevisar_pt");

                entity.Property(e => e.BtnSiguiente)
                    .HasColumnType("text")
                    .HasColumnName("btnSiguiente");

                entity.Property(e => e.BtnSiguienteEn)
                    .HasColumnType("text")
                    .HasColumnName("btnSiguiente_en");

                entity.Property(e => e.BtnSiguientePt)
                    .HasColumnType("text")
                    .HasColumnName("btnSiguiente_pt");

                entity.Property(e => e.CampoRequerido)
                    .HasColumnType("text")
                    .HasColumnName("campoRequerido");

                entity.Property(e => e.CampoRequeridoEn)
                    .HasColumnType("text")
                    .HasColumnName("campoRequerido_en");

                entity.Property(e => e.CampoRequeridoPt)
                    .HasColumnType("text")
                    .HasColumnName("campoRequerido_pt");

                entity.Property(e => e.Completado)
                    .HasColumnType("text")
                    .HasColumnName("completado");

                entity.Property(e => e.CompletadoEn)
                    .HasColumnType("text")
                    .HasColumnName("completado_en");

                entity.Property(e => e.CompletadoPt)
                    .HasColumnType("text")
                    .HasColumnName("completado_pt");

                entity.Property(e => e.LblExito)
                    .HasColumnType("text")
                    .HasColumnName("lblExito");

                entity.Property(e => e.LblExitoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblExito_en");

                entity.Property(e => e.LblExitoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblExito_pt");

                entity.Property(e => e.Listo)
                    .HasColumnType("text")
                    .HasColumnName("listo");

                entity.Property(e => e.ListoEn)
                    .HasColumnType("text")
                    .HasColumnName("listo_en");

                entity.Property(e => e.ListoPt)
                    .HasColumnType("text")
                    .HasColumnName("listo_pt");

                entity.Property(e => e.Paso1)
                    .HasColumnType("text")
                    .HasColumnName("paso1");

                entity.Property(e => e.Paso1Descripcion)
                    .HasColumnType("text")
                    .HasColumnName("paso1Descripcion");

                entity.Property(e => e.Paso1DescripcionEn)
                    .HasColumnType("text")
                    .HasColumnName("paso1Descripcion_en");

                entity.Property(e => e.Paso1DescripcionPt)
                    .HasColumnType("text")
                    .HasColumnName("paso1Descripcion_pt");

                entity.Property(e => e.Paso1En)
                    .HasColumnType("text")
                    .HasColumnName("paso1_en");

                entity.Property(e => e.Paso1Pt)
                    .HasColumnType("text")
                    .HasColumnName("paso1_pt");

                entity.Property(e => e.Paso1TipsDescrip)
                    .HasColumnType("text")
                    .HasColumnName("paso1TipsDescrip");

                entity.Property(e => e.Paso1TipsDescripEn)
                    .HasColumnType("text")
                    .HasColumnName("paso1TipsDescrip_en");

                entity.Property(e => e.Paso1TipsDescripPt)
                    .HasColumnType("text")
                    .HasColumnName("paso1TipsDescrip_pt");

                entity.Property(e => e.Paso1Title)
                    .HasColumnType("text")
                    .HasColumnName("paso1Title");

                entity.Property(e => e.Paso1TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("paso1Title_en");

                entity.Property(e => e.Paso1TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("paso1Title_pt");

                entity.Property(e => e.Paso1TtitleValidacion)
                    .HasColumnType("text")
                    .HasColumnName("paso1TtitleValidacion");

                entity.Property(e => e.Paso1TtitleValidacionEn)
                    .HasColumnType("text")
                    .HasColumnName("paso1TtitleValidacion_en");

                entity.Property(e => e.Paso1TtitleValidacionPt)
                    .HasColumnType("text")
                    .HasColumnName("paso1TtitleValidacion_pt");

                entity.Property(e => e.Paso2)
                    .HasColumnType("text")
                    .HasColumnName("paso2");

                entity.Property(e => e.Paso2AniosExp)
                    .HasColumnType("text")
                    .HasColumnName("paso2AniosExp");

                entity.Property(e => e.Paso2AniosExpEn)
                    .HasColumnType("text")
                    .HasColumnName("paso2AniosExp_en");

                entity.Property(e => e.Paso2AniosExpPt)
                    .HasColumnType("text")
                    .HasColumnName("paso2AniosExp_pt");

                entity.Property(e => e.Paso2Area)
                    .HasColumnType("text")
                    .HasColumnName("paso2Area");

                entity.Property(e => e.Paso2AreaEn)
                    .HasColumnType("text")
                    .HasColumnName("paso2Area_en");

                entity.Property(e => e.Paso2AreaPt)
                    .HasColumnType("text")
                    .HasColumnName("paso2Area_pt");

                entity.Property(e => e.Paso2Descripcion)
                    .HasColumnType("text")
                    .HasColumnName("paso2Descripcion");

                entity.Property(e => e.Paso2DescripcionEn)
                    .HasColumnType("text")
                    .HasColumnName("paso2Descripcion_en");

                entity.Property(e => e.Paso2DescripcionPt)
                    .HasColumnType("text")
                    .HasColumnName("paso2Descripcion_pt");

                entity.Property(e => e.Paso2En)
                    .HasColumnType("text")
                    .HasColumnName("paso2_en");

                entity.Property(e => e.Paso2Jornada)
                    .HasColumnType("text")
                    .HasColumnName("paso2Jornada");

                entity.Property(e => e.Paso2JornadaEn)
                    .HasColumnType("text")
                    .HasColumnName("paso2Jornada_en");

                entity.Property(e => e.Paso2JornadaPt)
                    .HasColumnType("text")
                    .HasColumnName("paso2Jornada_pt");

                entity.Property(e => e.Paso2Localidad)
                    .HasColumnType("text")
                    .HasColumnName("paso2Localidad");

                entity.Property(e => e.Paso2LocalidadEn)
                    .HasColumnType("text")
                    .HasColumnName("paso2Localidad_en");

                entity.Property(e => e.Paso2LocalidadPt)
                    .HasColumnType("text")
                    .HasColumnName("paso2Localidad_pt");

                entity.Property(e => e.Paso2Lugar)
                    .HasColumnType("text")
                    .HasColumnName("paso2Lugar");

                entity.Property(e => e.Paso2LugarEn)
                    .HasColumnType("text")
                    .HasColumnName("paso2Lugar_en");

                entity.Property(e => e.Paso2LugarPt)
                    .HasColumnType("text")
                    .HasColumnName("paso2Lugar_pt");

                entity.Property(e => e.Paso2Nombre)
                    .HasColumnType("text")
                    .HasColumnName("paso2Nombre");

                entity.Property(e => e.Paso2NombreEn)
                    .HasColumnType("text")
                    .HasColumnName("paso2Nombre_en");

                entity.Property(e => e.Paso2NombreHolder)
                    .HasColumnType("text")
                    .HasColumnName("paso2NombreHolder");

                entity.Property(e => e.Paso2NombreHolderEn)
                    .HasColumnType("text")
                    .HasColumnName("paso2NombreHolder_en");

                entity.Property(e => e.Paso2NombreHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("paso2NombreHolder_pt");

                entity.Property(e => e.Paso2NombrePt)
                    .HasColumnType("text")
                    .HasColumnName("paso2Nombre_pt");

                entity.Property(e => e.Paso2Pt)
                    .HasColumnType("text")
                    .HasColumnName("paso2_pt");

                entity.Property(e => e.Paso2TipoContrato)
                    .HasColumnType("text")
                    .HasColumnName("paso2TipoContrato");

                entity.Property(e => e.Paso2TipoContratoEn)
                    .HasColumnType("text")
                    .HasColumnName("paso2TipoContrato_en");

                entity.Property(e => e.Paso2TipoContratoPt)
                    .HasColumnType("text")
                    .HasColumnName("paso2TipoContrato_pt");

                entity.Property(e => e.Paso2Tips)
                    .HasColumnType("text")
                    .HasColumnName("paso2Tips");

                entity.Property(e => e.Paso2TipsDesc)
                    .HasColumnType("text")
                    .HasColumnName("paso2TipsDesc");

                entity.Property(e => e.Paso2TipsDescEn)
                    .HasColumnType("text")
                    .HasColumnName("paso2TipsDesc_en");

                entity.Property(e => e.Paso2TipsDescPt)
                    .HasColumnType("text")
                    .HasColumnName("paso2TipsDesc_pt");

                entity.Property(e => e.Paso2TipsEn)
                    .HasColumnType("text")
                    .HasColumnName("paso2Tips_en");

                entity.Property(e => e.Paso2TipsPt)
                    .HasColumnType("text")
                    .HasColumnName("paso2Tips_pt");

                entity.Property(e => e.Paso2Title)
                    .HasColumnType("text")
                    .HasColumnName("paso2Title");

                entity.Property(e => e.Paso2TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("paso2Title_en");

                entity.Property(e => e.Paso2TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("[paso2Title_pt");

                entity.Property(e => e.Paso3)
                    .HasColumnType("text")
                    .HasColumnName("paso3");

                entity.Property(e => e.Paso3Descrip)
                    .HasColumnType("text")
                    .HasColumnName("paso3Descrip");

                entity.Property(e => e.Paso3DescripEn)
                    .HasColumnType("text")
                    .HasColumnName("paso3Descrip_en");

                entity.Property(e => e.Paso3DescripHolder)
                    .HasColumnType("text")
                    .HasColumnName("paso3DescripHolder");

                entity.Property(e => e.Paso3DescripHolderEn)
                    .HasColumnType("text")
                    .HasColumnName("paso3DescripHolder_en");

                entity.Property(e => e.Paso3DescripHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("paso3DescripHolder_pt");

                entity.Property(e => e.Paso3DescripPt)
                    .HasColumnType("text")
                    .HasColumnName("paso3Descrip_pt");

                entity.Property(e => e.Paso3En)
                    .HasColumnType("text")
                    .HasColumnName("paso3_en");

                entity.Property(e => e.Paso3Pt)
                    .HasColumnType("text")
                    .HasColumnName("paso3_pt");

                entity.Property(e => e.Paso3TipsDescripcion)
                    .HasColumnType("text")
                    .HasColumnName("paso3TipsDescripcion");

                entity.Property(e => e.Paso3TipsDescripcionEn)
                    .HasColumnType("text")
                    .HasColumnName("paso3TipsDescripcion_en");

                entity.Property(e => e.Paso3TipsDescripcionPt)
                    .HasColumnType("text")
                    .HasColumnName("paso3TipsDescripcion_pt");

                entity.Property(e => e.Paso3Title)
                    .HasColumnType("text")
                    .HasColumnName("paso3Title");

                entity.Property(e => e.Paso3TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("paso3Title_en");

                entity.Property(e => e.Paso3TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("paso3Title_pt");

                entity.Property(e => e.Paso4)
                    .HasColumnType("text")
                    .HasColumnName("paso4");

                entity.Property(e => e.Paso4Descrip)
                    .HasColumnType("text")
                    .HasColumnName("paso4Descrip");

                entity.Property(e => e.Paso4DescripEn)
                    .HasColumnType("text")
                    .HasColumnName("paso4Descrip_en");

                entity.Property(e => e.Paso4DescripHolder)
                    .HasColumnType("text")
                    .HasColumnName("paso4DescripHolder");

                entity.Property(e => e.Paso4DescripHolderEn)
                    .HasColumnType("text")
                    .HasColumnName("paso4DescripHolder_en");

                entity.Property(e => e.Paso4DescripHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("paso4DescripHolder_pt");

                entity.Property(e => e.Paso4DescripPt)
                    .HasColumnType("text")
                    .HasColumnName("paso4Descrip_pt");

                entity.Property(e => e.Paso4En)
                    .HasColumnType("text")
                    .HasColumnName("paso4_en");

                entity.Property(e => e.Paso4Pt)
                    .HasColumnType("text")
                    .HasColumnName("paso4_pt");

                entity.Property(e => e.Paso4TipsDescrip)
                    .HasColumnType("text")
                    .HasColumnName("paso4TipsDescrip");

                entity.Property(e => e.Paso4TipsDescripEn)
                    .HasColumnType("text")
                    .HasColumnName("paso4TipsDescrip_en");

                entity.Property(e => e.Paso4TipsDescripPt)
                    .HasColumnType("text")
                    .HasColumnName("paso4TipsDescrip_pt");

                entity.Property(e => e.Paso4Title)
                    .HasColumnType("text")
                    .HasColumnName("paso4Title");

                entity.Property(e => e.Paso4TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("paso4Title_en");

                entity.Property(e => e.Paso4TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("paso4Title_pt");

                entity.Property(e => e.Paso5)
                    .HasColumnType("text")
                    .HasColumnName("paso5");

                entity.Property(e => e.Paso5Descrip)
                    .HasColumnType("text")
                    .HasColumnName("paso5Descrip");

                entity.Property(e => e.Paso5DescripEn)
                    .HasColumnType("text")
                    .HasColumnName("paso5Descrip_en");

                entity.Property(e => e.Paso5DescripHolder)
                    .HasColumnType("text")
                    .HasColumnName("paso5DescripHolder");

                entity.Property(e => e.Paso5DescripHolderEn)
                    .HasColumnType("text")
                    .HasColumnName("paso5DescripHolder_en");

                entity.Property(e => e.Paso5DescripHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("paso5DescripHolder_pt");

                entity.Property(e => e.Paso5DescripPt)
                    .HasColumnType("text")
                    .HasColumnName("paso5Descrip_pt");

                entity.Property(e => e.Paso5En)
                    .HasColumnType("text")
                    .HasColumnName("paso5_en");

                entity.Property(e => e.Paso5Pt)
                    .HasColumnType("text")
                    .HasColumnName("paso5_pt");

                entity.Property(e => e.Paso5TipsDescrip)
                    .HasColumnType("text")
                    .HasColumnName("paso5TipsDescrip");

                entity.Property(e => e.Paso5TipsDescripEn)
                    .HasColumnType("text")
                    .HasColumnName("paso5TipsDescrip_en");

                entity.Property(e => e.Paso5TipsDescripPt)
                    .HasColumnType("text")
                    .HasColumnName("paso5TipsDescrip_pt");

                entity.Property(e => e.Paso5Title)
                    .HasColumnType("text")
                    .HasColumnName("paso5Title");

                entity.Property(e => e.Paso5TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("paso5Title_en");

                entity.Property(e => e.Paso5TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("paso5Title_pt");

                entity.Property(e => e.Paso6)
                    .HasColumnType("text")
                    .HasColumnName("paso6");

                entity.Property(e => e.Paso6En)
                    .HasColumnType("text")
                    .HasColumnName("paso6_en");

                entity.Property(e => e.Paso6Pt)
                    .HasColumnType("text")
                    .HasColumnName("paso6_pt");

                entity.Property(e => e.Paso6TipsDescrip)
                    .HasColumnType("text")
                    .HasColumnName("paso6TipsDescrip");

                entity.Property(e => e.Paso6TipsDescripEn)
                    .HasColumnType("text")
                    .HasColumnName("paso6TipsDescrip_en");

                entity.Property(e => e.Paso6TipsDescripPt)
                    .HasColumnType("text")
                    .HasColumnName("paso6TipsDescrip_pt");

                entity.Property(e => e.Paso6Title)
                    .HasColumnType("text")
                    .HasColumnName("paso6Title");

                entity.Property(e => e.Paso6TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("paso6Title_en");

                entity.Property(e => e.Paso6TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("paso6Title_pt");

                entity.Property(e => e.PasoAniosExpHolder)
                    .HasColumnType("text")
                    .HasColumnName("pasoAniosExpHolder");

                entity.Property(e => e.PasoAniosExpHolderEn)
                    .HasColumnType("text")
                    .HasColumnName("pasoAniosExpHolder_en");

                entity.Property(e => e.PasoAniosExpHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("pasoAniosExpHolder_pt");

                entity.Property(e => e.PasoDescrip)
                    .HasColumnType("text")
                    .HasColumnName("pasoDescrip");

                entity.Property(e => e.PasoDescripEn)
                    .HasColumnType("text")
                    .HasColumnName("pasoDescrip_en");

                entity.Property(e => e.PasoDescripPt)
                    .HasColumnType("text")
                    .HasColumnName("pasoDescrip_pt");

                entity.Property(e => e.WelcomeDescripcion).HasColumnType("text");

                entity.Property(e => e.WelcomeDescripcionEn)
                    .HasColumnType("text")
                    .HasColumnName("WelcomeDescripcion_en");

                entity.Property(e => e.WelcomeDescripcionPt)
                    .HasColumnType("text")
                    .HasColumnName("WelcomeDescripcion_pt");

                entity.Property(e => e.WelcomeTitle).HasColumnType("text");

                entity.Property(e => e.WelcomeTitleEn)
                    .HasColumnType("text")
                    .HasColumnName("WelcomeTitle_en");

                entity.Property(e => e.WelcomeTitlePt)
                    .HasColumnType("text")
                    .HasColumnName("WelcomeTitle_pt");
            });

            modelBuilder.Entity<ConfiguracionMiPerfilPostulante>(entity =>
            {
                entity.ToTable("ConfiguracionMiPerfilPostulante");

                entity.Property(e => e.HobbiesDescipcion).HasColumnType("text");

                entity.Property(e => e.HobbiesDescipcionEn)
                    .HasColumnType("text")
                    .HasColumnName("HobbiesDescipcion_en");

                entity.Property(e => e.HobbiesDescipcionHolder).HasColumnType("text");

                entity.Property(e => e.HobbiesDescipcionHolderEn)
                    .HasColumnType("text")
                    .HasColumnName("HobbiesDescipcionHolder_en");

                entity.Property(e => e.HobbiesDescipcionHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("HobbiesDescipcionHolder_pt");

                entity.Property(e => e.HobbiesDescipcionPt)
                    .HasColumnType("text")
                    .HasColumnName("HobbiesDescipcion_pt");

                entity.Property(e => e.LblApellido)
                    .HasColumnType("text")
                    .HasColumnName("lblApellido");

                entity.Property(e => e.LblApellidoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblApellido_en");

                entity.Property(e => e.LblApellidoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblApellido_pt");

                entity.Property(e => e.LblCancelar)
                    .HasColumnType("text")
                    .HasColumnName("lblCancelar");

                entity.Property(e => e.LblCancelarEn)
                    .HasColumnType("text")
                    .HasColumnName("lblCancelar_en");

                entity.Property(e => e.LblCancelarPt)
                    .HasColumnType("text")
                    .HasColumnName("lblCancelar_pt");

                entity.Property(e => e.LblCiudadResidencia)
                    .HasColumnType("text")
                    .HasColumnName("lblCiudadResidencia");

                entity.Property(e => e.LblCiudadResidenciaEn)
                    .HasColumnType("text")
                    .HasColumnName("lblCiudadResidencia_en");

                entity.Property(e => e.LblCiudadResidenciaPt)
                    .HasColumnType("text")
                    .HasColumnName("lblCiudadResidencia_pt");

                entity.Property(e => e.LblDatosContacto)
                    .HasColumnType("text")
                    .HasColumnName("lblDatosContacto");

                entity.Property(e => e.LblDatosContactoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblDatosContacto_en");

                entity.Property(e => e.LblDatosContactoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblDatosContacto_pt");

                entity.Property(e => e.LblDatosPersonales)
                    .HasColumnType("text")
                    .HasColumnName("lblDatosPersonales");

                entity.Property(e => e.LblDatosPersonalesEn)
                    .HasColumnType("text")
                    .HasColumnName("lblDatosPersonales_en");

                entity.Property(e => e.LblDatosPersonalesPt)
                    .HasColumnType("text")
                    .HasColumnName("lblDatosPersonales_pt");

                entity.Property(e => e.LblDescripcionOtrosDatos)
                    .HasColumnType("text")
                    .HasColumnName("lblDescripcionOtrosDatos");

                entity.Property(e => e.LblDescripcionOtrosDatosEn)
                    .HasColumnType("text")
                    .HasColumnName("lblDescripcionOtrosDatos_en");

                entity.Property(e => e.LblDescripcionOtrosDatosPt)
                    .HasColumnType("text")
                    .HasColumnName("lblDescripcionOtrosDatos_pt");

                entity.Property(e => e.LblEdicacion)
                    .HasColumnType("text")
                    .HasColumnName("lblEdicacion");

                entity.Property(e => e.LblEdicacionEn)
                    .HasColumnType("text")
                    .HasColumnName("lblEdicacion_en");

                entity.Property(e => e.LblEdicacionPt)
                    .HasColumnType("text")
                    .HasColumnName("lblEdicacion_pt");

                entity.Property(e => e.LblEditar)
                    .HasColumnType("text")
                    .HasColumnName("lblEditar");

                entity.Property(e => e.LblEditarEn)
                    .HasColumnType("text")
                    .HasColumnName("lblEditar_en");

                entity.Property(e => e.LblEditarPt)
                    .HasColumnType("text")
                    .HasColumnName("lblEditar_pt");

                entity.Property(e => e.LblEmail)
                    .HasColumnType("text")
                    .HasColumnName("lblEmail");

                entity.Property(e => e.LblEmailEn)
                    .HasColumnType("text")
                    .HasColumnName("lblEmail_en");

                entity.Property(e => e.LblEmailPt)
                    .HasColumnType("text")
                    .HasColumnName("lblEmail_pt");

                entity.Property(e => e.LblExpecQueCargo)
                    .HasColumnType("text")
                    .HasColumnName("lblExpecQueCargo");

                entity.Property(e => e.LblExpecQueCargoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblExpecQueCargo_en");

                entity.Property(e => e.LblExpecQueCargoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblExpecQueCargo_pt");

                entity.Property(e => e.LblExpecTipo)
                    .HasColumnType("text")
                    .HasColumnName("lblExpecTipo");

                entity.Property(e => e.LblExpecTipoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblExpecTipo_en");

                entity.Property(e => e.LblExpecTipoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblExpecTipo_pt");

                entity.Property(e => e.LblExpectativaSalarial)
                    .HasColumnType("text")
                    .HasColumnName("lblExpectativaSalarial");

                entity.Property(e => e.LblExpectativaSalarialEn)
                    .HasColumnType("text")
                    .HasColumnName("lblExpectativaSalarial_en");

                entity.Property(e => e.LblExpectativaSalarialPt)
                    .HasColumnType("text")
                    .HasColumnName("lblExpectativaSalarial_pt");

                entity.Property(e => e.LblExpectativas)
                    .HasColumnType("text")
                    .HasColumnName("lblExpectativas");

                entity.Property(e => e.LblExpectativasEn)
                    .HasColumnType("text")
                    .HasColumnName("lblExpectativas_en");

                entity.Property(e => e.LblExpectativasPt)
                    .HasColumnType("text")
                    .HasColumnName("lblExpectativas_pt");

                entity.Property(e => e.LblExperiencias)
                    .HasColumnType("text")
                    .HasColumnName("lblExperiencias");

                entity.Property(e => e.LblExperienciasEn)
                    .HasColumnType("text")
                    .HasColumnName("lblExperiencias_en");

                entity.Property(e => e.LblExperienciasPt)
                    .HasColumnType("text")
                    .HasColumnName("lblExperiencias_pt");

                entity.Property(e => e.LblFechaNac)
                    .HasColumnType("text")
                    .HasColumnName("lblFechaNac");

                entity.Property(e => e.LblFechaNacEn)
                    .HasColumnType("text")
                    .HasColumnName("lblFechaNac_en");

                entity.Property(e => e.LblFechaNacPt)
                    .HasColumnType("text")
                    .HasColumnName("lblFechaNac_pt");

                entity.Property(e => e.LblGenero)
                    .HasColumnType("text")
                    .HasColumnName("lblGenero");

                entity.Property(e => e.LblGeneroEn)
                    .HasColumnType("text")
                    .HasColumnName("lblGenero_en");

                entity.Property(e => e.LblGeneroPt)
                    .HasColumnType("text")
                    .HasColumnName("lblGenero_pt");

                entity.Property(e => e.LblGuardar)
                    .HasColumnType("text")
                    .HasColumnName("lblGuardar");

                entity.Property(e => e.LblGuardarEn)
                    .HasColumnType("text")
                    .HasColumnName("lblGuardar_en");

                entity.Property(e => e.LblGuardarPt)
                    .HasColumnType("text")
                    .HasColumnName("lblGuardar_pt");

                entity.Property(e => e.LblHobbies)
                    .HasColumnType("text")
                    .HasColumnName("lblHobbies");

                entity.Property(e => e.LblHobbiesEn)
                    .HasColumnType("text")
                    .HasColumnName("lblHobbies_en");

                entity.Property(e => e.LblHobbiesPt)
                    .HasColumnType("text")
                    .HasColumnName("lblHobbies_pt");

                entity.Property(e => e.LblHolderTelefono)
                    .HasColumnType("text")
                    .HasColumnName("lblHolderTelefono");

                entity.Property(e => e.LblHolderTelefonoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblHolderTelefono_en");

                entity.Property(e => e.LblHolderTelefonoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblHolderTelefono_pt");

                entity.Property(e => e.LblIdiomas)
                    .HasColumnType("text")
                    .HasColumnName("lblIdiomas");

                entity.Property(e => e.LblIdiomasEn)
                    .HasColumnType("text")
                    .HasColumnName("lblIdiomas_en");

                entity.Property(e => e.LblIdiomasPt)
                    .HasColumnType("text")
                    .HasColumnName("lblIdiomas_pt");

                entity.Property(e => e.LblMiPerfil)
                    .HasColumnType("text")
                    .HasColumnName("lblMiPerfil");

                entity.Property(e => e.LblMiPerfilEn)
                    .HasColumnType("text")
                    .HasColumnName("lblMiPerfil_en");

                entity.Property(e => e.LblMiPerfilPt)
                    .HasColumnType("text")
                    .HasColumnName("lblMiPerfil_pt");

                entity.Property(e => e.LblModalExpNombreOrg)
                    .HasColumnType("text")
                    .HasColumnName("lblModalExpNombreOrg");

                entity.Property(e => e.LblModalExpNombreOrgEn)
                    .HasColumnType("text")
                    .HasColumnName("lblModalExpNombreOrg_en");

                entity.Property(e => e.LblModalExpNombreOrgPt)
                    .HasColumnType("text")
                    .HasColumnName("lblModalExpNombreOrg_pt");

                entity.Property(e => e.LblModalExperienciaDesc)
                    .HasColumnType("text")
                    .HasColumnName("lblModalExperienciaDesc");

                entity.Property(e => e.LblModalExperienciaDescEn)
                    .HasColumnType("text")
                    .HasColumnName("lblModalExperienciaDesc_en");

                entity.Property(e => e.LblModalExperienciaDescPt)
                    .HasColumnType("text")
                    .HasColumnName("lblModalExperienciaDesc_pt");

                entity.Property(e => e.LblModalExperienciaTitle)
                    .HasColumnType("text")
                    .HasColumnName("lblModalExperienciaTitle");

                entity.Property(e => e.LblModalExperienciaTitleEn)
                    .HasColumnType("text")
                    .HasColumnName("lblModalExperienciaTitle_en");

                entity.Property(e => e.LblModalExperienciaTitlePt)
                    .HasColumnType("text")
                    .HasColumnName("lblModalExperienciaTitle_pt");

                entity.Property(e => e.LblNombre)
                    .HasColumnType("text")
                    .HasColumnName("lblNombre");

                entity.Property(e => e.LblNombreEn)
                    .HasColumnType("text")
                    .HasColumnName("lblNombre_en");

                entity.Property(e => e.LblNombrePt)
                    .HasColumnType("text")
                    .HasColumnName("lblNombre_pt");

                entity.Property(e => e.LblOtrasDatos)
                    .HasColumnType("text")
                    .HasColumnName("lblOtrasDatos");

                entity.Property(e => e.LblOtrasDatosEn)
                    .HasColumnType("text")
                    .HasColumnName("lblOtrasDatos_en");

                entity.Property(e => e.LblOtrasDatosPt)
                    .HasColumnType("text")
                    .HasColumnName("lblOtrasDatos_pt");

                entity.Property(e => e.LblPaisResidencia)
                    .HasColumnType("text")
                    .HasColumnName("lblPaisResidencia");

                entity.Property(e => e.LblPaisResidenciaEn)
                    .HasColumnType("text")
                    .HasColumnName("lblPaisResidencia_en");

                entity.Property(e => e.LblPaisResidenciaPt)
                    .HasColumnType("text")
                    .HasColumnName("lblPaisResidencia_pt");

                entity.Property(e => e.LblTelefono)
                    .HasColumnType("text")
                    .HasColumnName("lblTelefono");

                entity.Property(e => e.LblTelefonoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblTelefono_en");

                entity.Property(e => e.LblTelefonoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblTelefono_pt");

                entity.Property(e => e.LblVistaPrevia)
                    .HasColumnType("text")
                    .HasColumnName("lblVistaPrevia");

                entity.Property(e => e.LblVistaPreviaEn)
                    .HasColumnType("text")
                    .HasColumnName("lblVistaPrevia_en");

                entity.Property(e => e.LblVistaPreviaPt)
                    .HasColumnType("text")
                    .HasColumnName("lblVistaPrevia_pt");

                entity.Property(e => e.MisMotivaciones).HasColumnType("text");

                entity.Property(e => e.MisMotivacionesEn)
                    .HasColumnType("text")
                    .HasColumnName("MisMotivaciones_en");

                entity.Property(e => e.MisMotivacionesPt)
                    .HasColumnType("text")
                    .HasColumnName("MisMotivaciones_pt");

                entity.Property(e => e.ModaEduCentroHolder).HasColumnType("text");

                entity.Property(e => e.ModaEduCentroHolderEn)
                    .HasColumnType("text")
                    .HasColumnName("ModaEduCentroHolder_en");

                entity.Property(e => e.ModaEduCentroHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("ModaEduCentroHolder_pt");

                entity.Property(e => e.ModaEduNivel).HasColumnType("text");

                entity.Property(e => e.ModaEduNivelEn)
                    .HasColumnType("text")
                    .HasColumnName("ModaEduNivel_en");

                entity.Property(e => e.ModaEduNivelPt)
                    .HasColumnType("text")
                    .HasColumnName("ModaEduNivel_pt");

                entity.Property(e => e.ModaIdiomaTitle).HasColumnType("text");

                entity.Property(e => e.ModaIdiomaTitleEn)
                    .HasColumnType("text")
                    .HasColumnName("ModaIdiomaTitle_en");

                entity.Property(e => e.ModaIdiomaTitlePt)
                    .HasColumnType("text")
                    .HasColumnName("ModaIdiomaTitle_pt");

                entity.Property(e => e.ModalEduCarrera).HasColumnType("text");

                entity.Property(e => e.ModalEduCarreraEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalEduCarrera_en");

                entity.Property(e => e.ModalEduCarreraHolder).HasColumnType("text");

                entity.Property(e => e.ModalEduCarreraHolderEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalEduCarreraHolder_en");

                entity.Property(e => e.ModalEduCarreraHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalEduCarreraHolder_pt");

                entity.Property(e => e.ModalEduCarreraPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalEduCarrera_pt");

                entity.Property(e => e.ModalEduCentro).HasColumnType("text");

                entity.Property(e => e.ModalEduCentroEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalEduCentro_en");

                entity.Property(e => e.ModalEduCentroPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalEduCentro_pt");

                entity.Property(e => e.ModalEduDesc).HasColumnType("text");

                entity.Property(e => e.ModalEduDescEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalEduDesc_en");

                entity.Property(e => e.ModalEduDescPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalEduDesc_pt");

                entity.Property(e => e.ModalEduTitle).HasColumnType("text");

                entity.Property(e => e.ModalEduTitleEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalEduTitle_en");

                entity.Property(e => e.ModalEduTitlePt)
                    .HasColumnType("text")
                    .HasColumnName("ModalEduTitle_pt");

                entity.Property(e => e.ModalExpAlPresente).HasColumnType("text");

                entity.Property(e => e.ModalExpAlPresenteEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpAlPresente_en");

                entity.Property(e => e.ModalExpAlPresentePt)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpAlPresente_pt");

                entity.Property(e => e.ModalExpCargo).HasColumnType("text");

                entity.Property(e => e.ModalExpCargoEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpCargo_en");

                entity.Property(e => e.ModalExpCargoPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpCargo_pt");

                entity.Property(e => e.ModalExpDescripcion).HasColumnType("text");

                entity.Property(e => e.ModalExpDescripcionEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpDescripcion_en");

                entity.Property(e => e.ModalExpDescripcionPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpDescripcion_pt");

                entity.Property(e => e.ModalExpFechaFin).HasColumnType("text");

                entity.Property(e => e.ModalExpFechaFinEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpFechaFin_en");

                entity.Property(e => e.ModalExpFechaFinPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpFechaFin_pt");

                entity.Property(e => e.ModalExpFechaInicio).HasColumnType("text");

                entity.Property(e => e.ModalExpFechaInicioEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpFechaInicio_en");

                entity.Property(e => e.ModalExpFechaInicioPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpFechaInicio_pt");

                entity.Property(e => e.ModalExpHolderCargo).HasColumnType("text");

                entity.Property(e => e.ModalExpHolderCargoEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpHolderCargo_en");

                entity.Property(e => e.ModalExpHolderCargoPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpHolderCargo_pt");

                entity.Property(e => e.ModalExpHolderDescripcion).HasColumnType("text");

                entity.Property(e => e.ModalExpHolderDescripcionEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpHolderDescripcion_en");

                entity.Property(e => e.ModalExpHolderDescripcionPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpHolderDescripcion_pt");

                entity.Property(e => e.ModalExpHolderNombreOrg).HasColumnType("text");

                entity.Property(e => e.ModalExpHolderNombreOrgEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpHolderNombreOrg_en");

                entity.Property(e => e.ModalExpHolderNombreOrgPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpHolderNombreOrg_pt");

                entity.Property(e => e.ModalExpLocalidad).HasColumnType("text");

                entity.Property(e => e.ModalExpLocalidadEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpLocalidad_en");

                entity.Property(e => e.ModalExpLocalidadPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpLocalidad_pt");

                entity.Property(e => e.ModalExpNo).HasColumnType("text");

                entity.Property(e => e.ModalExpNoEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpNo_en");

                entity.Property(e => e.ModalExpNoPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpNo_pt");

                entity.Property(e => e.ModalExpPais).HasColumnType("text");

                entity.Property(e => e.ModalExpPaisEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpPais_en");

                entity.Property(e => e.ModalExpPaisPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpPais_pt");

                entity.Property(e => e.ModalExpSi).HasColumnType("text");

                entity.Property(e => e.ModalExpSiEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpSi_en");

                entity.Property(e => e.ModalExpSiPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpSi_pt");

                entity.Property(e => e.ModalExpVoluntario).HasColumnType("text");

                entity.Property(e => e.ModalExpVoluntarioEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpVoluntario_en");

                entity.Property(e => e.ModalExpVoluntarioPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalExpVoluntario_pt");

                entity.Property(e => e.ModalIdioma).HasColumnType("text");

                entity.Property(e => e.ModalIdiomaDesc).HasColumnType("text");

                entity.Property(e => e.ModalIdiomaDescEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalIdiomaDesc_en");

                entity.Property(e => e.ModalIdiomaDescPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalIdiomaDesc_pt");

                entity.Property(e => e.ModalIdiomaEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalIdioma_en");

                entity.Property(e => e.ModalIdiomaEscrito).HasColumnType("text");

                entity.Property(e => e.ModalIdiomaEscritoEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalIdiomaEscrito_en");

                entity.Property(e => e.ModalIdiomaEscritoPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalIdiomaEscrito_pt");

                entity.Property(e => e.ModalIdiomaOral).HasColumnType("text");

                entity.Property(e => e.ModalIdiomaOralEn)
                    .HasColumnType("text")
                    .HasColumnName("ModalIdiomaOral_en");

                entity.Property(e => e.ModalIdiomaOralPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalIdiomaOral_pt");

                entity.Property(e => e.ModalIdiomaPt)
                    .HasColumnType("text")
                    .HasColumnName("ModalIdioma_pt");

                entity.Property(e => e.OtrosDatosHolder).HasColumnType("text");

                entity.Property(e => e.OtrosDatosHolderEn)
                    .HasColumnType("text")
                    .HasColumnName("OtrosDatosHolder_en");

                entity.Property(e => e.OtrosDatosHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("OtrosDatosHolder_pt");

                entity.Property(e => e.SectorExperiencia).HasColumnType("text");

                entity.Property(e => e.SectorExperienciaEn)
                    .HasColumnType("text")
                    .HasColumnName("SectorExperiencia_en");

                entity.Property(e => e.SectorExperienciaPt)
                    .HasColumnType("text")
                    .HasColumnName("SectorExperiencia_pt");
            });

            modelBuilder.Entity<ConfiguracionBusquedaVacantesPostulante>(entity =>
            {
                entity.ToTable("ConfiguracionBusquedaVacantesPostulante");

                entity.Property(e => e.LblAreaTrabajo)
                    .HasColumnType("text")
                    .HasColumnName("lblAreaTrabajo");

                entity.Property(e => e.LblAreaTrabajoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblAreaTrabajo_en");

                entity.Property(e => e.LblAreaTrabajoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblAreaTrabajo_pt");

                entity.Property(e => e.LblCopiar)
                    .HasColumnType("text")
                    .HasColumnName("lblCopiar");

                entity.Property(e => e.LblCopiarEn)
                    .HasColumnType("text")
                    .HasColumnName("lblCopiar_en");

                entity.Property(e => e.LblCopiarPt)
                    .HasColumnType("text")
                    .HasColumnName("lblCopiar_pt");

                entity.Property(e => e.LblDescripcionResponsabilidade)
                    .HasColumnType("text")
                    .HasColumnName("lblDescripcionResponsabilidade");

                entity.Property(e => e.LblDescripcionResponsabilidadeEn)
                    .HasColumnType("text")
                    .HasColumnName("lblDescripcionResponsabilidade_en");

                entity.Property(e => e.LblDescripcionResponsabilidadePt)
                    .HasColumnType("text")
                    .HasColumnName("lblDescripcionResponsabilidade_pt");

                entity.Property(e => e.LblDetallesVacante)
                    .HasColumnType("text")
                    .HasColumnName("lblDetallesVacante");

                entity.Property(e => e.LblDetallesVacanteEn)
                    .HasColumnType("text")
                    .HasColumnName("lblDetallesVacante_en");

                entity.Property(e => e.LblDetallesVacantePt)
                    .HasColumnType("text")
                    .HasColumnName("lblDetallesVacante_pt");

                entity.Property(e => e.LblFacebook)
                    .HasColumnType("text")
                    .HasColumnName("lblFacebook");

                entity.Property(e => e.LblFacebookEn)
                    .HasColumnType("text")
                    .HasColumnName("lblFacebook_en");

                entity.Property(e => e.LblFacebookPt)
                    .HasColumnType("text")
                    .HasColumnName("lblFacebook_pt");

                entity.Property(e => e.LblFechaPostulado)
                    .HasColumnType("text")
                    .HasColumnName("lblFechaPostulado");

                entity.Property(e => e.LblFechaPostuladoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblFechaPostulado_en");

                entity.Property(e => e.LblFechaPostuladoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblFechaPostulado_pt");

                entity.Property(e => e.LblLinkedin)
                    .HasColumnType("text")
                    .HasColumnName("lblLinkedin");

                entity.Property(e => e.LblLinkedinEn)
                    .HasColumnType("text")
                    .HasColumnName("lblLinkedin_en");

                entity.Property(e => e.LblLinkedinPt)
                    .HasColumnType("text")
                    .HasColumnName("lblLinkedin_pt");

                entity.Property(e => e.LblNivelExperiencia)
                    .HasColumnType("text")
                    .HasColumnName("lblNivelExperiencia");

                entity.Property(e => e.LblNivelExperienciaEn)
                    .HasColumnType("text")
                    .HasColumnName("lblNivelExperiencia_en");

                entity.Property(e => e.LblNivelExperienciaPt)
                    .HasColumnType("text")
                    .HasColumnName("lblNivelExperiencia_pt");

                entity.Property(e => e.LblOrganizacion)
                    .HasColumnType("text")
                    .HasColumnName("lblOrganizacion");

                entity.Property(e => e.LblOrganizacionEn)
                    .HasColumnType("text")
                    .HasColumnName("lblOrganizacion_en");

                entity.Property(e => e.LblOrganizacionPt)
                    .HasColumnType("text")
                    .HasColumnName("lblOrganizacion_pt");

                entity.Property(e => e.LblPostular)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("lblPostular");

                entity.Property(e => e.LblPostularEn)
                    .HasColumnType("text")
                    .HasColumnName("lblPostular_en");

                entity.Property(e => e.LblPostularPt)
                    .HasColumnType("text")
                    .HasColumnName("lblPostular_pt");

                entity.Property(e => e.LblProceso)
                    .HasColumnType("text")
                    .HasColumnName("lblProceso");

                entity.Property(e => e.LblProcesoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblProceso_en");

                entity.Property(e => e.LblProcesoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblProceso_pt");

                entity.Property(e => e.LblProfesiones)
                    .HasColumnType("text")
                    .HasColumnName("lblProfesiones");

                entity.Property(e => e.LblProfesionesEn)
                    .HasColumnType("text")
                    .HasColumnName("lblProfesiones_en");

                entity.Property(e => e.LblProfesionesPt)
                    .HasColumnType("text")
                    .HasColumnName("lblProfesiones_pt");

                entity.Property(e => e.LblProposito)
                    .HasColumnType("text")
                    .HasColumnName("lblProposito");

                entity.Property(e => e.LblPropositoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblProposito_en");

                entity.Property(e => e.LblPropositoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblProposito_pt");

                entity.Property(e => e.LblRequisito)
                    .HasColumnType("text")
                    .HasColumnName("lblRequisito");

                entity.Property(e => e.LblRequisitoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblRequisito_en");

                entity.Property(e => e.LblRequisitoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblRequisito_pt");

                entity.Property(e => e.LblResponsabilidad)
                    .HasColumnType("text")
                    .HasColumnName("lblResponsabilidad");

                entity.Property(e => e.LblResponsabilidadEn)
                    .HasColumnType("text")
                    .HasColumnName("lblResponsabilidad_en");

                entity.Property(e => e.LblResponsabilidadPt)
                    .HasColumnType("text")
                    .HasColumnName("lblResponsabilidad_pt");

                entity.Property(e => e.LblSumarse)
                    .HasColumnType("text")
                    .HasColumnName("lblSumarse");

                entity.Property(e => e.LblSumarseEn)
                    .HasColumnType("text")
                    .HasColumnName("lblSumarse_en");

                entity.Property(e => e.LblSumarsePt)
                    .HasColumnType("text")
                    .HasColumnName("lblSumarse_pt");

                entity.Property(e => e.LblTipoContrato)
                    .HasColumnType("text")
                    .HasColumnName("lblTipoContrato");

                entity.Property(e => e.LblTipoContratoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblTipoContrato_en");

                entity.Property(e => e.LblTipoContratoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblTipoContrato_pt");

                entity.Property(e => e.LblTwitter)
                    .HasColumnType("text")
                    .HasColumnName("lblTwitter");

                entity.Property(e => e.LblTwitterEn)
                    .HasColumnType("text")
                    .HasColumnName("lblTwitter_en");

                entity.Property(e => e.LblTwitterPt)
                    .HasColumnType("text")
                    .HasColumnName("lblTwitter_pt");

                entity.Property(e => e.MenuConfiguracion)
                    .HasColumnType("text")
                    .HasColumnName("menuConfiguracion");

                entity.Property(e => e.MenuConfiguracionEn)
                    .HasColumnType("text")
                    .HasColumnName("menuConfiguracion_en");

                entity.Property(e => e.MenuConfiguracionPt)
                    .HasColumnType("text")
                    .HasColumnName("menuConfiguracion_pt");

                entity.Property(e => e.MenuMisPostulaciones)
                    .HasColumnType("text")
                    .HasColumnName("menuMisPostulaciones");

                entity.Property(e => e.MenuMisPostulacionesEn)
                    .HasColumnType("text")
                    .HasColumnName("menuMisPostulaciones_en");

                entity.Property(e => e.MenuMisPostulacionesPt)
                    .HasColumnType("text")
                    .HasColumnName("menuMisPostulaciones_pt");

                entity.Property(e => e.MenuPerfil)
                    .HasColumnType("text")
                    .HasColumnName("menuPerfil");

                entity.Property(e => e.MenuPerfilEn)
                    .HasColumnType("text")
                    .HasColumnName("menuPerfil_en");

                entity.Property(e => e.MenuPerfilPt)
                    .HasColumnType("text")
                    .HasColumnName("menuPerfil_pt");

                entity.Property(e => e.ModalDesde)
                    .HasColumnType("text")
                    .HasColumnName("modalDesde");

                entity.Property(e => e.ModalDesdeEn)
                    .HasColumnType("text")
                    .HasColumnName("modalDesde_en");

                entity.Property(e => e.ModalDesdePt)
                    .HasColumnType("text")
                    .HasColumnName("modalDesde_pt");

                entity.Property(e => e.ModalHasta)
                    .HasColumnType("text")
                    .HasColumnName("modalHasta");

                entity.Property(e => e.ModalHastaEn)
                    .HasColumnType("text")
                    .HasColumnName("modalHasta_en");

                entity.Property(e => e.ModalHastaPt)
                    .HasColumnType("text")
                    .HasColumnName("modalHasta_pt");

                entity.Property(e => e.ModalLbEnviar)
                    .HasColumnType("text")
                    .HasColumnName("modalLbEnviar");

                entity.Property(e => e.ModalLbEnviarEn)
                    .HasColumnType("text")
                    .HasColumnName("modalLbEnviar_en");

                entity.Property(e => e.ModalLbEnviarPt)
                    .HasColumnType("text")
                    .HasColumnName("modalLbEnviar_pt");

                entity.Property(e => e.ModalLbVolver)
                    .HasColumnType("text")
                    .HasColumnName("modalLbVolver");

                entity.Property(e => e.ModalLbVolverEn)
                    .HasColumnType("text")
                    .HasColumnName("modalLbVolver_en");

                entity.Property(e => e.ModalLbVolverPt)
                    .HasColumnType("text")
                    .HasColumnName("modalLbVolver_pt");

                entity.Property(e => e.ModalMoneda)
                    .HasColumnType("text")
                    .HasColumnName("modalMoneda");

                entity.Property(e => e.ModalMonedaEn)
                    .HasColumnType("text")
                    .HasColumnName("modalMoneda_en");

                entity.Property(e => e.ModalMonedaPt)
                    .HasColumnType("text")
                    .HasColumnName("modalMoneda_pt");

                entity.Property(e => e.ModalSalarial)
                    .HasColumnType("text")
                    .HasColumnName("modalSalarial");

                entity.Property(e => e.ModalSalarialEn)
                    .HasColumnType("text")
                    .HasColumnName("modalSalarial_en");

                entity.Property(e => e.ModalSalarialPt)
                    .HasColumnType("text")
                    .HasColumnName("modalSalarial_pt");

                entity.Property(e => e.PostulacionDes)
                    .HasColumnType("text")
                    .HasColumnName("postulacionDes");

                entity.Property(e => e.PostulacionDesEn)
                    .HasColumnType("text")
                    .HasColumnName("postulacionDes_en");

                entity.Property(e => e.PostulacionDesError)
                    .HasColumnType("text")
                    .HasColumnName("postulacionDesError");

                entity.Property(e => e.PostulacionDesErrorEn)
                    .HasColumnType("text")
                    .HasColumnName("postulacionDesError_en");

                entity.Property(e => e.PostulacionDesErrorPt)
                    .HasColumnType("text")
                    .HasColumnName("postulacionDesError_pt");

                entity.Property(e => e.PostulacionDesPt)
                    .HasColumnType("text")
                    .HasColumnName("postulacionDes_pt");

                entity.Property(e => e.PostulacionError)
                    .HasColumnType("text")
                    .HasColumnName("postulacionError");

                entity.Property(e => e.PostulacionErrorEn)
                    .HasColumnType("text")
                    .HasColumnName("postulacionError_en");

                entity.Property(e => e.PostulacionErrorPt)
                    .HasColumnType("text")
                    .HasColumnName("postulacionError_pt");

                entity.Property(e => e.PostulacionExito)
                    .HasColumnType("text")
                    .HasColumnName("postulacionExito");

                entity.Property(e => e.PostulacionExitoEn)
                    .HasColumnType("text")
                    .HasColumnName("postulacionExito_en");

                entity.Property(e => e.PostulacionExitoPt)
                    .HasColumnType("text")
                    .HasColumnName("postulacionExito_pt");

                entity.Property(e => e.SmallRequired)
                    .HasColumnType("text")
                    .HasColumnName("smallRequired");

                entity.Property(e => e.SmallRequiredEn)
                    .HasColumnType("text")
                    .HasColumnName("smallRequired_en");

                entity.Property(e => e.SmallRequiredPt)
                    .HasColumnType("text")
                    .HasColumnName("smallRequired_pt");

                entity.Property(e => e.Toast)
                    .HasColumnType("text")
                    .HasColumnName("toast");

                entity.Property(e => e.ToastEn)
                    .HasColumnType("text")
                    .HasColumnName("toast_en");

                entity.Property(e => e.ToastPt)
                    .HasColumnType("text")
                    .HasColumnName("toast_pt");

                entity.Property(e => e.UrlConfiguracion)
                    .HasColumnType("text")
                    .HasColumnName("urlConfiguracion");

                entity.Property(e => e.UrlMiPerfil)
                    .HasColumnType("text")
                    .HasColumnName("urlMiPerfil");
            });

            modelBuilder.Entity<ConfiguracionCrearCuentaPostulante>(entity =>
            {
                entity.ToTable("ConfiguracionCrearCuentaPostulante");

                entity.Property(e => e.ApellidoHolder).HasColumnType("text");

                entity.Property(e => e.ApellidoHolderEn)
                    .HasColumnType("text")
                    .HasColumnName("ApellidoHolder_en");

                entity.Property(e => e.ApellidoHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("ApellidoHolder_pt");

                entity.Property(e => e.Btn)
                    .HasColumnType("text")
                    .HasColumnName("btn");

                entity.Property(e => e.BtnCuenta)
                    .HasColumnType("text")
                    .HasColumnName("btnCuenta");

                entity.Property(e => e.BtnCuentaEn)
                    .HasColumnType("text")
                    .HasColumnName("btnCuenta_en");

                entity.Property(e => e.BtnCuentaPt)
                    .HasColumnType("text")
                    .HasColumnName("btnCuenta_pt");

                entity.Property(e => e.BtnEn)
                    .HasColumnType("text")
                    .HasColumnName("btn:_en");

                entity.Property(e => e.BtnPt)
                    .HasColumnType("text")
                    .HasColumnName("btn_pt");

                entity.Property(e => e.BtnResend)
                    .HasColumnType("text")
                    .HasColumnName("btnResend");

                entity.Property(e => e.BtnResendEn)
                    .HasColumnType("text")
                    .HasColumnName("btnResend_en");

                entity.Property(e => e.BtnResendPt)
                    .HasColumnType("text")
                    .HasColumnName("btnResend_pt");

                entity.Property(e => e.Description)
                    .HasColumnType("text")
                    .HasColumnName("description");

                entity.Property(e => e.DescriptionEn)
                    .HasColumnType("text")
                    .HasColumnName("description_en");

                entity.Property(e => e.DescriptionPt)
                    .HasColumnType("text")
                    .HasColumnName("description_pt");

                entity.Property(e => e.EmailNoValido)
                    .HasColumnType("text")
                    .HasColumnName("emailNoValido");

                entity.Property(e => e.EmailNovalidoEn)
                    .HasColumnType("text")
                    .HasColumnName("emailNovalido_en");

                entity.Property(e => e.EmailNovalidoPt)
                    .HasColumnType("text")
                    .HasColumnName("emailNovalido_pt");

                entity.Property(e => e.LbCuenta)
                    .HasColumnType("text")
                    .HasColumnName("lbCuenta");

                entity.Property(e => e.LbCuentaEn)
                    .HasColumnType("text")
                    .HasColumnName("lbCuenta_en");

                entity.Property(e => e.LbCuentaPt)
                    .HasColumnType("text")
                    .HasColumnName("lbCuenta_pt");

                entity.Property(e => e.LbListo)
                    .HasColumnType("text")
                    .HasColumnName("lbListo");

                entity.Property(e => e.LbListoEn)
                    .HasColumnType("text")
                    .HasColumnName("lbListo_en");

                entity.Property(e => e.LbListoPt)
                    .HasColumnType("text")
                    .HasColumnName("lbListo_pt");

                entity.Property(e => e.LbMail)
                    .HasColumnType("text")
                    .HasColumnName("lbMail");

                entity.Property(e => e.LbMailEn)
                    .HasColumnType("text")
                    .HasColumnName("lbMail_en");

                entity.Property(e => e.LbMailPt)
                    .HasColumnType("text")
                    .HasColumnName("lbMail_pt");

                entity.Property(e => e.LblApellido)
                    .HasColumnType("text")
                    .HasColumnName("lblApellido");

                entity.Property(e => e.LblApellidoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblApellido_en");

                entity.Property(e => e.LblApellidoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblApellido_pt");

                entity.Property(e => e.LblContrasena)
                    .HasColumnType("text")
                    .HasColumnName("lblContrasena");

                entity.Property(e => e.LblContrasenaEn)
                    .HasColumnType("text")
                    .HasColumnName("lblContrasena_en");

                entity.Property(e => e.LblContrasenaPt)
                    .HasColumnType("text")
                    .HasColumnName("lblContrasena_pt");

                entity.Property(e => e.LblEmail)
                    .HasColumnType("text")
                    .HasColumnName("lblEmail");

                entity.Property(e => e.LblEmailEn)
                    .HasColumnType("text")
                    .HasColumnName("lblEmail_en");

                entity.Property(e => e.LblEmailPt)
                    .HasColumnType("text")
                    .HasColumnName("lblEmail_pt");

                entity.Property(e => e.LblFechaNacimiento)
                    .HasColumnType("text")
                    .HasColumnName("lblFechaNacimiento");

                entity.Property(e => e.LblFechaNacimientoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblFechaNacimiento_en");

                entity.Property(e => e.LblFechaNacimientoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblFechaNacimiento_pt");

                entity.Property(e => e.LblGenero)
                    .HasColumnType("text")
                    .HasColumnName("lblGenero");

                entity.Property(e => e.LblGeneroEn)
                    .HasColumnType("text")
                    .HasColumnName("lblGenero_en");

                entity.Property(e => e.LblGeneroPt)
                    .HasColumnType("text")
                    .HasColumnName("lblGenero_pt");

                entity.Property(e => e.LblNombre)
                    .HasColumnType("text")
                    .HasColumnName("lblNombre");

                entity.Property(e => e.LblNombreEn)
                    .HasColumnType("text")
                    .HasColumnName("lblNombre_en");

                entity.Property(e => e.LblNombrePt)
                    .HasColumnType("text")
                    .HasColumnName("lblNombre_pt");

                entity.Property(e => e.LblRcontrasena)
                    .HasColumnType("text")
                    .HasColumnName("lblRcontrasena");

                entity.Property(e => e.LblRcontrasenaEn)
                    .HasColumnType("text")
                    .HasColumnName("lblRcontrasena_en");

                entity.Property(e => e.LblRcontrasenaPt)
                    .HasColumnType("text")
                    .HasColumnName("lblRcontrasena_pt");

                entity.Property(e => e.LblRequerido)
                    .HasColumnType("text")
                    .HasColumnName("lblRequerido");

                entity.Property(e => e.LblRequeridoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblRequerido_en");

                entity.Property(e => e.LblRequeridoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblRequerido_pt");

                entity.Property(e => e.LblTerminos)
                    .HasColumnType("text")
                    .HasColumnName("lblTerminos");

                entity.Property(e => e.LblTerminosEn)
                    .HasColumnType("text")
                    .HasColumnName("lblTerminos_en");

                entity.Property(e => e.LblTerminosPt)
                    .HasColumnType("text")
                    .HasColumnName("lblTerminos_pt");

                entity.Property(e => e.NombreHolder).HasColumnType("text");

                entity.Property(e => e.NombreHolderEn)
                    .HasColumnType("text")
                    .HasColumnName("NombreHolder_en");

                entity.Property(e => e.NombreHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("NombreHolder_pt");

                entity.Property(e => e.PasswordValid)
                    .HasColumnType("text")
                    .HasColumnName("passwordValid");

                entity.Property(e => e.PasswordValidEn)
                    .HasColumnType("text")
                    .HasColumnName("passwordValid_en");

                entity.Property(e => e.PasswordValidPt)
                    .HasColumnType("text")
                    .HasColumnName("passwordValid_pt");

                entity.Property(e => e.RequiereTerminos)
                    .HasColumnType("text")
                    .HasColumnName("requiereTerminos");

                entity.Property(e => e.RequiereTerminosEn)
                    .HasColumnType("text")
                    .HasColumnName("requiereTerminos_en");

                entity.Property(e => e.RequiereTerminosPt)
                    .HasColumnType("text")
                    .HasColumnName("requiereTerminos_pt");

                entity.Property(e => e.Title)
                    .HasColumnType("text")
                    .HasColumnName("title");

                entity.Property(e => e.TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("title_en");

                entity.Property(e => e.TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("title_pt");
            });



            modelBuilder.Entity<ConfiguracionOrganizacion>(entity =>
            {
                entity.ToTable("ConfiguracionOrganizacion");

                entity.Property(e => e.ActualPassword)
                    .HasColumnType("text")
                    .HasColumnName("actualPassword");

                entity.Property(e => e.ActualPasswordEn)
                    .HasColumnType("text")
                    .HasColumnName("actualPassword_en");

                entity.Property(e => e.ActualPasswordPt)
                    .HasColumnType("text")
                    .HasColumnName("actualPassword_pt");

                entity.Property(e => e.BtnChangePassword)
                    .HasColumnType("text")
                    .HasColumnName("btnChangePassword");

                entity.Property(e => e.BtnChangePasswordEn)
                    .HasColumnType("text")
                    .HasColumnName("btnChangePassword_en");

                entity.Property(e => e.BtnChangePasswordPt)
                    .HasColumnType("text")
                    .HasColumnName("btnChangePassword_pt");

                entity.Property(e => e.BtnDelete)
                    .HasColumnType("text")
                    .HasColumnName("btnDelete");

                entity.Property(e => e.BtnDeleteEn)
                    .HasColumnType("text")
                    .HasColumnName("btnDelete_en");

                entity.Property(e => e.BtnDeletePt)
                    .HasColumnType("text")
                    .HasColumnName("btnDelete_pt");

                entity.Property(e => e.ConfirmPassword)
                    .HasColumnType("text")
                    .HasColumnName("confirmPassword");

                entity.Property(e => e.ConfirmPasswordEn)
                    .HasColumnType("text")
                    .HasColumnName("confirmPassword_en");

                entity.Property(e => e.ConfirmPasswordPt)
                    .HasColumnType("text")
                    .HasColumnName("confirmPassword_pt");

                entity.Property(e => e.CuentaEliminada).HasColumnType("text");

                entity.Property(e => e.CuentaEliminadaEn)
                    .HasColumnType("text")
                    .HasColumnName("CuentaEliminada_en");

                entity.Property(e => e.CuentaEliminadaPt)
                    .HasColumnType("text")
                    .HasColumnName("CuentaEliminada_pt");

                entity.Property(e => e.GuardarAjustes)
                    .HasColumnType("text")
                    .HasColumnName("guardarAjustes");

                entity.Property(e => e.GuardarAjustesEn)
                    .HasColumnType("text")
                    .HasColumnName("guardarAjustes_en");

                entity.Property(e => e.GuardarAjustesPt)
                    .HasColumnType("text")
                    .HasColumnName("guardarAjustes_pt");

                entity.Property(e => e.MenuConfiguracion)
                    .HasColumnType("text")
                    .HasColumnName("menuConfiguracion");

                entity.Property(e => e.MenuConfiguracionEn)
                    .HasColumnType("text")
                    .HasColumnName("menuConfiguracion_en");

                entity.Property(e => e.MenuConfiguracionPt)
                    .HasColumnType("text")
                    .HasColumnName("menuConfiguracion_pt");

                entity.Property(e => e.MenuMisvacantes)
                    .HasColumnType("text")
                    .HasColumnName("menuMisvacantes");

                entity.Property(e => e.MenuMisvacantesEn)
                    .HasColumnType("text")
                    .HasColumnName("menuMisvacantes_en");

                entity.Property(e => e.MenuMisvacantesPt)
                    .HasColumnType("text")
                    .HasColumnName("menuMisvacantes_pt");

                entity.Property(e => e.MenuPerfil)
                    .HasColumnType("text")
                    .HasColumnName("menuPerfil");

                entity.Property(e => e.MenuPerfilEn)
                    .HasColumnType("text")
                    .HasColumnName("menuPerfil_en");

                entity.Property(e => e.MenuPerfilPt)
                    .HasColumnType("text")
                    .HasColumnName("menuPerfil_pt");

                entity.Property(e => e.MenuUrlConfiguracion)
                    .HasColumnType("text")
                    .HasColumnName("menuUrlConfiguracion");

                entity.Property(e => e.MenuUrlMisvacantes)
                    .HasColumnType("text")
                    .HasColumnName("menuUrlMisvacantes");

                entity.Property(e => e.MenuUrlPerfil)
                    .HasColumnType("text")
                    .HasColumnName("menuUrlPerfil");

                entity.Property(e => e.NewPassword)
                    .HasColumnType("text")
                    .HasColumnName("newPassword");

                entity.Property(e => e.NewPasswordEn)
                    .HasColumnType("text")
                    .HasColumnName("newPassword_en");

                entity.Property(e => e.NewPasswordPt)
                    .HasColumnType("text")
                    .HasColumnName("newPassword_pt");

                entity.Property(e => e.NotificationBox)
                    .HasColumnType("text")
                    .HasColumnName("notificationBox");

                entity.Property(e => e.NotificationBoxEn)
                    .HasColumnType("text")
                    .HasColumnName("notificationBox_en");

                entity.Property(e => e.NotificationBoxPt)
                    .HasColumnType("text")
                    .HasColumnName("notificationBox_pt");

                entity.Property(e => e.PlaceHolders)
                    .HasColumnType("text")
                    .HasColumnName("placeHolders");

                entity.Property(e => e.PlaceHoldersEn)
                    .HasColumnType("text")
                    .HasColumnName("placeHolders_en");

                entity.Property(e => e.PlaceHoldersPt)
                    .HasColumnType("text")
                    .HasColumnName("placeHolders_pt");

                entity.Property(e => e.Reasons)
                    .HasColumnType("text")
                    .HasColumnName("reasons");

                entity.Property(e => e.ReasonsEn)
                    .HasColumnType("text")
                    .HasColumnName("reasons_en");

                entity.Property(e => e.ReasonsPt)
                    .HasColumnType("text")
                    .HasColumnName("reasons_pt");

                entity.Property(e => e.SamllPassword)
                    .HasColumnType("text")
                    .HasColumnName("samllPassword");

                entity.Property(e => e.SamllPasswordEn)
                    .HasColumnType("text")
                    .HasColumnName("samllPassword_en");

                entity.Property(e => e.SamllPasswordPt)
                    .HasColumnType("text")
                    .HasColumnName("samllPassword_pt");

                entity.Property(e => e.SmallsRequired)
                    .HasColumnType("text")
                    .HasColumnName("smallsRequired");

                entity.Property(e => e.SmallsRequiredEn)
                    .HasColumnType("text")
                    .HasColumnName("smallsRequired_en");

                entity.Property(e => e.SmallsRequiredPt)
                    .HasColumnType("text")
                    .HasColumnName("smallsRequired_pt");

                entity.Property(e => e.SubTitleThree)
                    .HasColumnType("text")
                    .HasColumnName("subTitleThree");

                entity.Property(e => e.SubTitleThreeEn)
                    .HasColumnType("text")
                    .HasColumnName("subTitleThree_en");

                entity.Property(e => e.SubTitleThreePt)
                    .HasColumnType("text")
                    .HasColumnName("subTitleThree_pt");

                entity.Property(e => e.SubtitleFour)
                    .HasColumnType("text")
                    .HasColumnName("subtitleFour");

                entity.Property(e => e.SubtitleFourEn)
                    .HasColumnType("text")
                    .HasColumnName("subtitleFour_en");

                entity.Property(e => e.SubtitleFourPt)
                    .HasColumnType("text")
                    .HasColumnName("subtitleFour_pt");

                entity.Property(e => e.SubtitleOne)
                    .HasColumnType("text")
                    .HasColumnName("subtitleOne");

                entity.Property(e => e.SubtitleOneEn)
                    .HasColumnType("text")
                    .HasColumnName("subtitleOne_en");

                entity.Property(e => e.SubtitleOnePt)
                    .HasColumnType("text")
                    .HasColumnName("subtitleOne_pt");

                entity.Property(e => e.SubtitleTwo)
                    .HasColumnType("text")
                    .HasColumnName("subtitleTwo");

                entity.Property(e => e.SubtitleTwoEn)
                    .HasColumnType("text")
                    .HasColumnName("subtitleTwo_en");

                entity.Property(e => e.SubtitleTwoPt)
                    .HasColumnType("text")
                    .HasColumnName("subtitleTwo_pt");

                entity.Property(e => e.ToastNotificationActive)
                    .HasColumnType("text")
                    .HasColumnName("toastNotificationActive");

                entity.Property(e => e.ToastNotificationActiveEn)
                    .HasColumnType("text")
                    .HasColumnName("toastNotificationActive_en");

                entity.Property(e => e.ToastNotificationActivePt)
                    .HasColumnType("text")
                    .HasColumnName("toastNotificationActive_pt");

                entity.Property(e => e.ToastNotificationInactive)
                    .HasColumnType("text")
                    .HasColumnName("toastNotificationInactive");

                entity.Property(e => e.ToastNotificationInactiveEn)
                    .HasColumnType("text")
                    .HasColumnName("toastNotificationInactive_en");

                entity.Property(e => e.ToastNotificationInactivePt)
                    .HasColumnType("text")
                    .HasColumnName("toastNotificationInactive_pt");

                entity.Property(e => e.ToastPasswordError)
                    .HasColumnType("text")
                    .HasColumnName("toastPasswordError");

                entity.Property(e => e.ToastPasswordErrorEn)
                    .HasColumnType("text")
                    .HasColumnName("toastPasswordError_en");

                entity.Property(e => e.ToastPasswordErrorPt)
                    .HasColumnType("text")
                    .HasColumnName("toastPasswordError_pt");

                entity.Property(e => e.ToastPasswordSuccess)
                    .HasColumnType("text")
                    .HasColumnName("toastPasswordSuccess");

                entity.Property(e => e.ToastPasswordSuccessEn)
                    .HasColumnType("text")
                    .HasColumnName("toastPasswordSuccess_en");

                entity.Property(e => e.ToastPasswordSuccessPt)
                    .HasColumnType("text")
                    .HasColumnName("toastPasswordSuccess_pt");
            });

            modelBuilder.Entity<ConfiguracionMisVacantesOrganizacion>(entity =>
            {
                entity.ToTable("ConfiguracionMisVacantesOrganizacion");

                entity.Property(e => e.HolderBusqueda)
                    .HasColumnType("text")
                    .HasColumnName("holderBusqueda");

                entity.Property(e => e.HolderBusquedaEn)
                    .HasColumnType("text")
                    .HasColumnName("holderBusqueda_en");

                entity.Property(e => e.HolderBusquedaPt)
                    .HasColumnType("text")
                    .HasColumnName("holderBusqueda_pt");

                entity.Property(e => e.LblCiudad)
                    .HasColumnType("text")
                    .HasColumnName("lblCiudad");

                entity.Property(e => e.LblCiudadEn)
                    .HasColumnType("text")
                    .HasColumnName("lblCiudad_en");

                entity.Property(e => e.LblCiudadPt)
                    .HasColumnType("text")
                    .HasColumnName("lblCiudad_pt");

                entity.Property(e => e.LblCiudadResidencia)
                    .HasColumnType("text")
                    .HasColumnName("lblCiudadResidencia");

                entity.Property(e => e.LblCiudadResidenciaEn)
                    .HasColumnType("text")
                    .HasColumnName("lblCiudadResidencia_en");

                entity.Property(e => e.LblCiudadResidenciaPt)
                    .HasColumnType("text")
                    .HasColumnName("lblCiudadResidencia_pt");

                entity.Property(e => e.LblConfiguracion)
                    .HasColumnType("text")
                    .HasColumnName("lblConfiguracion");

                entity.Property(e => e.LblConfiguracionEn)
                    .HasColumnType("text")
                    .HasColumnName("lblConfiguracion_en");

                entity.Property(e => e.LblConfiguracionPt)
                    .HasColumnType("text")
                    .HasColumnName("lblConfiguracion_pt");

                entity.Property(e => e.LblEditar)
                    .HasColumnType("text")
                    .HasColumnName("lblEditar");

                entity.Property(e => e.LblEditarEn)
                    .HasColumnType("text")
                    .HasColumnName("lblEditar_en");

                entity.Property(e => e.LblEditarPt)
                    .HasColumnType("text")
                    .HasColumnName("lblEditar_pt");

                entity.Property(e => e.LblFechaCierre)
                    .HasColumnType("text")
                    .HasColumnName("lblFechaCierre");

                entity.Property(e => e.LblFechaCierreEn)
                    .HasColumnType("text")
                    .HasColumnName("lblFechaCierre_en");

                entity.Property(e => e.LblFechaCierrePt)
                    .HasColumnType("text")
                    .HasColumnName("lblFechaCierre_pt");

                entity.Property(e => e.LblFechaNacimiento)
                    .HasColumnType("text")
                    .HasColumnName("lblFechaNacimiento");

                entity.Property(e => e.LblFechaNacimientoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblFechaNacimiento_en");

                entity.Property(e => e.LblFechaNacimientoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblFechaNacimiento_pt");

                entity.Property(e => e.LblFechaPublica)
                    .HasColumnType("text")
                    .HasColumnName("lblFechaPublica");

                entity.Property(e => e.LblFechaPublicaEn)
                    .HasColumnType("text")
                    .HasColumnName("lblFechaPublica_en");

                entity.Property(e => e.LblFechaPublicaPt)
                    .HasColumnType("text")
                    .HasColumnName("lblFechaPublica_pt");

                entity.Property(e => e.LblIngresa)
                    .HasColumnType("text")
                    .HasColumnName("lblIngresa");

                entity.Property(e => e.LblIngresaEn)
                    .HasColumnType("text")
                    .HasColumnName("lblIngresa_en");

                entity.Property(e => e.LblIngresaPt)
                    .HasColumnType("text")
                    .HasColumnName("lblIngresa_pt");

                entity.Property(e => e.LblMiPerfil)
                    .HasColumnType("text")
                    .HasColumnName("lblMiPerfil");

                entity.Property(e => e.LblMiPerfilEn)
                    .HasColumnType("text")
                    .HasColumnName("lblMiPerfil_en");

                entity.Property(e => e.LblMiPerfilPt)
                    .HasColumnType("text")
                    .HasColumnName("lblMiPerfil_pt");

                entity.Property(e => e.LblMisVacantes)
                    .HasColumnType("text")
                    .HasColumnName("lblMisVacantes");

                entity.Property(e => e.LblMisVacantesEn)
                    .HasColumnType("text")
                    .HasColumnName("lblMisVacantes_en");

                entity.Property(e => e.LblMisVacantesPt)
                    .HasColumnType("text")
                    .HasColumnName("lblMisVacantes_pt");

                entity.Property(e => e.LblModalHomderNombre)
                    .HasColumnType("text")
                    .HasColumnName("lblModalHomderNombre");

                entity.Property(e => e.LblModalHomderNombreEn)
                    .HasColumnType("text")
                    .HasColumnName("lblModalHomderNombre_en");

                entity.Property(e => e.LblModalHomderNombrePt)
                    .HasColumnType("text")
                    .HasColumnName("lblModalHomderNombre_pt");

                entity.Property(e => e.LblModalNombre)
                    .HasColumnType("text")
                    .HasColumnName("lblModalNombre");

                entity.Property(e => e.LblModalNombreEn)
                    .HasColumnType("text")
                    .HasColumnName("lblModalNombre_en");

                entity.Property(e => e.LblModalNombrePt)
                    .HasColumnType("text")
                    .HasColumnName("lblModalNombre_pt");

                entity.Property(e => e.LblModalPerfil)
                    .HasColumnType("text")
                    .HasColumnName("lblModalPerfil");

                entity.Property(e => e.LblModalPerfilEn)
                    .HasColumnType("text")
                    .HasColumnName("lblModalPerfil_en");

                entity.Property(e => e.LblModalPerfilPt)
                    .HasColumnType("text")
                    .HasColumnName("lblModalPerfil_pt");

                entity.Property(e => e.LblMomento)
                    .HasColumnType("text")
                    .HasColumnName("lblMomento");

                entity.Property(e => e.LblMomentoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblMomento_en");

                entity.Property(e => e.LblMomentoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblMomento_pt");

                entity.Property(e => e.LblNombre)
                    .HasColumnType("text")
                    .HasColumnName("lblNombre");

                entity.Property(e => e.LblNombreEn)
                    .HasColumnType("text")
                    .HasColumnName("lblNombre_en");

                entity.Property(e => e.LblNombrePt)
                    .HasColumnType("text")
                    .HasColumnName("lblNombre_pt");

                entity.Property(e => e.LblPais)
                    .HasColumnType("text")
                    .HasColumnName("lblPais");

                entity.Property(e => e.LblPaisEn)
                    .HasColumnType("text")
                    .HasColumnName("lblPais_en");

                entity.Property(e => e.LblPaisPt)
                    .HasColumnType("text")
                    .HasColumnName("lblPais_pt");

                entity.Property(e => e.LblPaisResidencia)
                    .HasColumnType("text")
                    .HasColumnName("lblPaisResidencia");

                entity.Property(e => e.LblPaisResidenciaEn)
                    .HasColumnType("text")
                    .HasColumnName("lblPaisResidencia_en");

                entity.Property(e => e.LblPaisResidenciaPt)
                    .HasColumnType("text")
                    .HasColumnName("lblPaisResidencia_pt");

                entity.Property(e => e.LblPostulante)
                    .HasColumnType("text")
                    .HasColumnName("lblPostulante");

                entity.Property(e => e.LblPostulanteEn)
                    .HasColumnType("text")
                    .HasColumnName("lblPostulante_en");

                entity.Property(e => e.LblPostulantePt)
                    .HasColumnType("text")
                    .HasColumnName("lblPostulante_pt");

                entity.Property(e => e.LblPublicada)
                    .HasColumnType("text")
                    .HasColumnName("lblPublicada");

                entity.Property(e => e.LblPublicadaEn)
                    .HasColumnType("text")
                    .HasColumnName("lblPublicada_en");

                entity.Property(e => e.LblPublicadaPt)
                    .HasColumnType("text")
                    .HasColumnName("lblPublicada_pt");

                entity.Property(e => e.LblRating)
                    .HasColumnType("text")
                    .HasColumnName("lblRating");

                entity.Property(e => e.LblRatingEn)
                    .HasColumnType("text")
                    .HasColumnName("lblRating_en");

                entity.Property(e => e.LblRatingPt)
                    .HasColumnType("text")
                    .HasColumnName("lblRating_pt");

                entity.Property(e => e.LblSePostulo)
                    .HasColumnType("text")
                    .HasColumnName("lblSePostulo");

                entity.Property(e => e.LblSePostuloEn)
                    .HasColumnType("text")
                    .HasColumnName("lblSePostulo_en");

                entity.Property(e => e.LblSePostuloPt)
                    .HasColumnType("text")
                    .HasColumnName("lblSePostulo_pt");

                entity.Property(e => e.LblSeleccionado)
                    .HasColumnType("text")
                    .HasColumnName("lblSeleccionado");

                entity.Property(e => e.LblSeleccionadoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblSeleccionado_en");

                entity.Property(e => e.LblSeleccionadoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblSeleccionado_pt");

                entity.Property(e => e.LblStatus)
                    .HasColumnType("text")
                    .HasColumnName("lblStatus");

                entity.Property(e => e.LblStatusEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStatus_en");

                entity.Property(e => e.LblStatusPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStatus_pt");

                entity.Property(e => e.LblTextCandidato)
                    .HasColumnType("text")
                    .HasColumnName("lblTextCandidato");

                entity.Property(e => e.LblTextCandidatoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblTextCandidato_en");

                entity.Property(e => e.LblTextCandidatoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblTextCandidato_pt");

                entity.Property(e => e.LblTitlePostulacion)
                    .HasColumnType("text")
                    .HasColumnName("lblTitlePostulacion");

                entity.Property(e => e.LblTitlePostulacionEn)
                    .HasColumnType("text")
                    .HasColumnName("lblTitlePostulacion_en");

                entity.Property(e => e.LblTitlePostulacionPt)
                    .HasColumnType("text")
                    .HasColumnName("lblTitlePostulacion_pt");

                entity.Property(e => e.LblTodos)
                    .HasColumnType("text")
                    .HasColumnName("lblTodos");

                entity.Property(e => e.LblTodosEn)
                    .HasColumnType("text")
                    .HasColumnName("lblTodos_en");

                entity.Property(e => e.LblTodosPt)
                    .HasColumnType("text")
                    .HasColumnName("lblTodos_pt");

                entity.Property(e => e.LblVisualiza)
                    .HasColumnType("text")
                    .HasColumnName("lblVisualiza");

                entity.Property(e => e.LblVisualizaEn)
                    .HasColumnType("text")
                    .HasColumnName("lblVisualiza_en");

                entity.Property(e => e.LblVisualizaPt)
                    .HasColumnType("text")
                    .HasColumnName("lblVisualiza_pt");

                entity.Property(e => e.TitleVisualizacion)
                    .HasColumnType("text")
                    .HasColumnName("titleVisualizacion");

                entity.Property(e => e.TitleVisualizacionEn)
                    .HasColumnType("text")
                    .HasColumnName("titleVisualizacion_en");

                entity.Property(e => e.TitleVisualizacionPt)
                    .HasColumnType("text")
                    .HasColumnName("titleVisualizacion_pt");

                entity.Property(e => e.UrlMiPerfil)
                    .HasColumnType("text")
                    .HasColumnName("urlMiPerfil");
            });

            modelBuilder.Entity<ConfiguracionPerfilOrganizacion>(entity =>
            {
                entity.ToTable("ConfiguracionPerfilOrganizacion");

                entity.Property(e => e.Ciudad)
                    .HasColumnType("text")
                    .HasColumnName("ciudad");

                entity.Property(e => e.CiudadEn)
                    .HasColumnType("text")
                    .HasColumnName("ciudad_en");

                entity.Property(e => e.CiudadPt)
                    .HasColumnType("text")
                    .HasColumnName("ciudad_pt");

                entity.Property(e => e.DatosContacto)
                    .HasColumnType("text")
                    .HasColumnName("datosContacto");

                entity.Property(e => e.DatosContactoEn)
                    .HasColumnType("text")
                    .HasColumnName("datosContacto_en");

                entity.Property(e => e.DatosContactoPt)
                    .HasColumnType("text")
                    .HasColumnName("datosContacto_pt");

                entity.Property(e => e.FacebookHolder)
                    .HasColumnType("text")
                    .HasColumnName("facebookHolder");

                entity.Property(e => e.FacebookHolderEn)
                    .HasColumnType("text")
                    .HasColumnName("facebookHolder_en");

                entity.Property(e => e.FacebookHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("facebookHolder_pt");

                entity.Property(e => e.ImpactoGenerado).HasColumnType("text");

                entity.Property(e => e.ImpactoGeneradoEn)
                    .HasColumnType("text")
                    .HasColumnName("ImpactoGenerado_en");

                entity.Property(e => e.ImpactoGeneradoPt)
                    .HasColumnType("text")
                    .HasColumnName("ImpactoGenerado_pt");

                entity.Property(e => e.InstagramHolder)
                    .HasColumnType("text")
                    .HasColumnName("instagramHolder");

                entity.Property(e => e.InstagramHolderEn)
                    .HasColumnType("text")
                    .HasColumnName("instagramHolder_en");

                entity.Property(e => e.InstagramHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("instagramHolder_pt");

                entity.Property(e => e.LblAdn)
                    .HasColumnType("text")
                    .HasColumnName("lblAdn");

                entity.Property(e => e.LblAdnEn)
                    .HasColumnType("text")
                    .HasColumnName("lblAdn_en");

                entity.Property(e => e.LblAdnPt)
                    .HasColumnType("text")
                    .HasColumnName("lblAdn_pt");

                entity.Property(e => e.LblCancel)
                    .HasColumnType("text")
                    .HasColumnName("lblCancel");

                entity.Property(e => e.LblCancelEn)
                    .HasColumnType("text")
                    .HasColumnName("lblCancel_en");

                entity.Property(e => e.LblCancelPt)
                    .HasColumnType("text")
                    .HasColumnName("lblCancel_pt");

                entity.Property(e => e.LblDatosContacto)
                    .HasColumnType("text")
                    .HasColumnName("lblDatosContacto");

                entity.Property(e => e.LblDatosContactoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblDatosContacto_en");

                entity.Property(e => e.LblDatosContactoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblDatosContacto_pt");

                entity.Property(e => e.LblEdit)
                    .HasColumnType("text")
                    .HasColumnName("lblEdit");

                entity.Property(e => e.LblEditEn)
                    .HasColumnType("text")
                    .HasColumnName("lblEdit_en");

                entity.Property(e => e.LblEditPt)
                    .HasColumnType("text")
                    .HasColumnName("lblEdit_pt");

                entity.Property(e => e.LblEmail)
                    .HasColumnType("text")
                    .HasColumnName("lblEmail");

                entity.Property(e => e.LblEmailEn)
                    .HasColumnType("text")
                    .HasColumnName("lblEmail_en");

                entity.Property(e => e.LblEmailPt)
                    .HasColumnType("text")
                    .HasColumnName("lblEmail_pt");

                entity.Property(e => e.LblImpacto)
                    .HasColumnType("text")
                    .HasColumnName("lblImpacto");

                entity.Property(e => e.LblImpactoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblImpacto_en");

                entity.Property(e => e.LblImpactoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblImpacto_pt");

                entity.Property(e => e.LblQuienesSomos)
                    .HasColumnType("text")
                    .HasColumnName("lblQuienesSomos");

                entity.Property(e => e.LblQuienesSomosEn)
                    .HasColumnType("text")
                    .HasColumnName("lblQuienesSomos_en");

                entity.Property(e => e.LblQuienesSomosPt)
                    .HasColumnType("text")
                    .HasColumnName("lblQuienesSomos_pt");

                entity.Property(e => e.LblSave)
                    .HasColumnType("text")
                    .HasColumnName("lblSave");

                entity.Property(e => e.LblSaveEn)
                    .HasColumnType("text")
                    .HasColumnName("lblSave_en");

                entity.Property(e => e.LblSavePt)
                    .HasColumnType("text")
                    .HasColumnName("lblSave_pt");

                entity.Property(e => e.LblTelCel)
                    .HasColumnType("text")
                    .HasColumnName("lblTelCel");

                entity.Property(e => e.LblTelCelEn)
                    .HasColumnType("text")
                    .HasColumnName("lblTelCel_en");

                entity.Property(e => e.LblTelCelPt)
                    .HasColumnType("text")
                    .HasColumnName("lblTelCel_pt");

                entity.Property(e => e.LblTelFijo)
                    .HasColumnType("text")
                    .HasColumnName("lblTelFijo");

                entity.Property(e => e.LblTelFijoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblTelFijo_en");

                entity.Property(e => e.LblTelFijoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblTelFijo_pt");

                entity.Property(e => e.LbldatosOrg)
                    .HasColumnType("text")
                    .HasColumnName("lbldatosOrg");

                entity.Property(e => e.LbldatosOrgEn)
                    .HasColumnType("text")
                    .HasColumnName("lbldatosOrg_en");

                entity.Property(e => e.LbldatosOrgPt)
                    .HasColumnType("text")
                    .HasColumnName("lbldatosOrg_pt");

                entity.Property(e => e.LblnombrePersona)
                    .HasColumnType("text")
                    .HasColumnName("lblnombrePersona");

                entity.Property(e => e.LblnombrePersonaEn)
                    .HasColumnType("text")
                    .HasColumnName("lblnombrePersona_en");

                entity.Property(e => e.LblnombrePersonaPt)
                    .HasColumnType("text")
                    .HasColumnName("lblnombrePersona_pt");

                entity.Property(e => e.LinkedinHolder)
                    .HasColumnType("text")
                    .HasColumnName("linkedinHolder");

                entity.Property(e => e.LinkedinHolderEn)
                    .HasColumnType("text")
                    .HasColumnName("linkedinHolder_en");

                entity.Property(e => e.LinkedinHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("linkedinHolder_pt");

                entity.Property(e => e.MiPerfil)
                    .HasColumnType("text")
                    .HasColumnName("miPerfil");

                entity.Property(e => e.MiPerfilEn)
                    .HasColumnType("text")
                    .HasColumnName("miPerfil_en");

                entity.Property(e => e.MiPerfilPt)
                    .HasColumnType("text")
                    .HasColumnName("miPerfil_pt");

                entity.Property(e => e.NuestroAdn)
                    .HasColumnType("text")
                    .HasColumnName("nuestroADN");

                entity.Property(e => e.NuestroAdnEn)
                    .HasColumnType("text")
                    .HasColumnName("nuestroADN_en");

                entity.Property(e => e.NuestroAdnPt)
                    .HasColumnType("text")
                    .HasColumnName("nuestroADN_pt");

                entity.Property(e => e.Pais)
                    .HasColumnType("text")
                    .HasColumnName("pais");

                entity.Property(e => e.PaisEn)
                    .HasColumnType("text")
                    .HasColumnName("pais_en");

                entity.Property(e => e.PaisPt)
                    .HasColumnType("text")
                    .HasColumnName("pais_pt");

                entity.Property(e => e.QuienesSomos).HasColumnType("text");

                entity.Property(e => e.QuienesSomosEn)
                    .HasColumnType("text")
                    .HasColumnName("QuienesSomos_en");

                entity.Property(e => e.QuienesSomosPt)
                    .HasColumnType("text")
                    .HasColumnName("QuienesSomos_pt");

                entity.Property(e => e.TipoOrganizacion)
                    .HasColumnType("text")
                    .HasColumnName("tipoOrganizacion");

                entity.Property(e => e.TipoOrganizacionEn)
                    .HasColumnType("text")
                    .HasColumnName("tipoOrganizacion_en");

                entity.Property(e => e.TipoOrganizacionPt)
                    .HasColumnType("text")
                    .HasColumnName("tipoOrganizacion_pt");

                entity.Property(e => e.TwitterHolder)
                    .HasColumnType("text")
                    .HasColumnName("twitterHolder");

                entity.Property(e => e.TwitterHolderEn)
                    .HasColumnType("text")
                    .HasColumnName("twitterHolder_en");

                entity.Property(e => e.TwitterHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("twitterHolder_pt");
            });

            modelBuilder.Entity<ConfiguracionStepByStepOrganizacion>(entity =>
            {
                entity.ToTable("ConfiguracionStepByStepOrganizacion");

                entity.Property(e => e.BtnAnterior)
                    .HasColumnType("text")
                    .HasColumnName("btnAnterior");

                entity.Property(e => e.BtnAnteriorEn)
                    .HasColumnType("text")
                    .HasColumnName("btnAnterior_en");

                entity.Property(e => e.BtnAnteriorPt)
                    .HasColumnType("text")
                    .HasColumnName("btnAnterior_pt");

                entity.Property(e => e.BtnGuardar)
                    .HasColumnType("text")
                    .HasColumnName("btnGuardar");

                entity.Property(e => e.BtnGuardarEn)
                    .HasColumnType("text")
                    .HasColumnName("btnGuardar_en");

                entity.Property(e => e.BtnGuardarPt)
                    .HasColumnType("text")
                    .HasColumnName("btnGuardar_pt");

                entity.Property(e => e.BtnSiguiente)
                    .HasColumnType("text")
                    .HasColumnName("btnSiguiente");

                entity.Property(e => e.BtnSiguienteEn)
                    .HasColumnType("text")
                    .HasColumnName("btnSiguiente_en");

                entity.Property(e => e.BtnSiguientePt)
                    .HasColumnType("text")
                    .HasColumnName("btnSiguiente_pt");

                entity.Property(e => e.BtnWelcome)
                    .HasColumnType("text")
                    .HasColumnName("btnWelcome");

                entity.Property(e => e.BtnWelcomeEn)
                    .HasColumnType("text")
                    .HasColumnName("btnWelcome_en");

                entity.Property(e => e.BtnWelcomePt)
                    .HasColumnType("text")
                    .HasColumnName("btnWelcome_pt");

                entity.Property(e => e.DescripcionWelcome)
                    .HasColumnType("text")
                    .HasColumnName("descripcionWelcome");

                entity.Property(e => e.DescripcionWelcomeEn)
                    .HasColumnType("text")
                    .HasColumnName("descripcionWelcome_en");

                entity.Property(e => e.DescripcionWelcomePt)
                    .HasColumnType("text")
                    .HasColumnName("descripcionWelcome_pt");

                entity.Property(e => e.LblCampoRequerido)
                    .HasColumnType("text")
                    .HasColumnName("[lblCampo requerido");

                entity.Property(e => e.LblCampoRequeridoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblCampo requerido_en");

                entity.Property(e => e.LblCampoRequeridoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblCampo requerido_pt");

                entity.Property(e => e.LblCompletaste)
                    .HasColumnType("text")
                    .HasColumnName("lblCompletaste");

                entity.Property(e => e.LblCompletasteEn)
                    .HasColumnType("text")
                    .HasColumnName("lblCompletaste_en");

                entity.Property(e => e.LblCompletastePt)
                    .HasColumnType("text")
                    .HasColumnName("lblCompletaste_pt");

                entity.Property(e => e.LblListo)
                    .HasColumnType("text")
                    .HasColumnName("lblListo");

                entity.Property(e => e.LblListoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblListo_en");

                entity.Property(e => e.LblListoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblListo_pt");

                entity.Property(e => e.LblStep1Como)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1Como");

                entity.Property(e => e.LblStep1Description)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1Description");

                entity.Property(e => e.LblStep1DescriptionEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1Description_en");

                entity.Property(e => e.LblStep1DescriptionPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1Description_pt");

                entity.Property(e => e.LblStep1Localidad)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1Localidad");

                entity.Property(e => e.LblStep1LocalidadEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1Localidad_en");

                entity.Property(e => e.LblStep1LocalidadPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1Localidad_pt");

                entity.Property(e => e.LblStep1Logo)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1Logo");

                entity.Property(e => e.LblStep1LogoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1Logo_en");

                entity.Property(e => e.LblStep1LogoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1Logo_pt");

                entity.Property(e => e.LblStep1Pais)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1Pais");

                entity.Property(e => e.LblStep1PaisEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1Pais_en");

                entity.Property(e => e.LblStep1PaisPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1Pais_pt");

                entity.Property(e => e.LblStep1PhoneCel)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1PhoneCel");

                entity.Property(e => e.LblStep1PhoneCelEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1PhoneCel_en");

                entity.Property(e => e.LblStep1PhoneCelPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1PhoneCel_pt");

                entity.Property(e => e.LblStep1PhoneFijo)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1PhoneFijo");

                entity.Property(e => e.LblStep1PhoneFijoEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1PhoneFijo_en");

                entity.Property(e => e.LblStep1PhoneFijoPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1PhoneFijo_pt");

                entity.Property(e => e.LblStep1Title)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1Title");

                entity.Property(e => e.LblStep1TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1Title_en");

                entity.Property(e => e.LblStep1TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1Title_pt");

                entity.Property(e => e.LblStep1TypeOrg)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1TypeOrg");

                entity.Property(e => e.LblStep1TypeOrgEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1TypeOrg_en");

                entity.Property(e => e.LblStep1TypeOrgPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep1TypeOrg_pt");

                entity.Property(e => e.LblStep2Description)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2Description");

                entity.Property(e => e.LblStep2DescriptionEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2Description_en");

                entity.Property(e => e.LblStep2DescriptionPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2Description_pt");

                entity.Property(e => e.LblStep2HolderDescription)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2HolderDescription");

                entity.Property(e => e.LblStep2HolderDescriptionEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2HolderDescription_en");

                entity.Property(e => e.LblStep2HolderDescriptionPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2HolderDescription_pt");

                entity.Property(e => e.LblStep2HolderFacebook)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2HolderFacebook");

                entity.Property(e => e.LblStep2HolderFacebookEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2HolderFacebook_en");

                entity.Property(e => e.LblStep2HolderFacebookPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2HolderFacebook_pt");

                entity.Property(e => e.LblStep2HolderInstagram)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2HolderInstagram");

                entity.Property(e => e.LblStep2HolderInstagramEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2HolderInstagram_en");

                entity.Property(e => e.LblStep2HolderInstagramPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2HolderInstagram_pt");

                entity.Property(e => e.LblStep2HolderLinkedin)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2HolderLinkedin");

                entity.Property(e => e.LblStep2HolderLinkedinEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2HolderLinkedin_en");

                entity.Property(e => e.LblStep2HolderLinkedinPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2HolderLinkedin_pt");

                entity.Property(e => e.LblStep2HolderTwitter)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2HolderTwitter");

                entity.Property(e => e.LblStep2HolderTwitterEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2HolderTwitter_en");

                entity.Property(e => e.LblStep2HolderTwitterPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2HolderTwitter_pt");

                entity.Property(e => e.LblStep2SocialMedia)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2SocialMedia");

                entity.Property(e => e.LblStep2SocialMediaEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2SocialMedia_en");

                entity.Property(e => e.LblStep2SocialMediaPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2SocialMedia_pt");

                entity.Property(e => e.LblStep2TextTips)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2TextTips");

                entity.Property(e => e.LblStep2TextTipsEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2TextTips_en");

                entity.Property(e => e.LblStep2TextTipsPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2TextTips_pt");

                entity.Property(e => e.LblStep2Title)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2Title");

                entity.Property(e => e.LblStep2TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2Title_en");

                entity.Property(e => e.LblStep2TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep2Title_pt");

                entity.Property(e => e.LblStep3Description)
                    .HasColumnType("text")
                    .HasColumnName("lblStep3Description");

                entity.Property(e => e.LblStep3DescriptionEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep3Description_en");

                entity.Property(e => e.LblStep3DescriptionPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep3Description_pt");

                entity.Property(e => e.LblStep3HolderDescribe)
                    .HasColumnType("text")
                    .HasColumnName("lblStep3HolderDescribe");

                entity.Property(e => e.LblStep3HolderDescribeEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep3HolderDescribe_en");

                entity.Property(e => e.LblStep3HolderDescribePt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep3HolderDescribe_pt");

                entity.Property(e => e.LblStep3TextTips)
                    .HasColumnType("text")
                    .HasColumnName("lblStep3TextTips");

                entity.Property(e => e.LblStep3TextTipsEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep3TextTips_en");

                entity.Property(e => e.LblStep3TextTipsPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep3TextTips_pt");

                entity.Property(e => e.LblStep3Title)
                    .HasColumnType("text")
                    .HasColumnName("lblStep3Title");

                entity.Property(e => e.LblStep3TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep3Title_en");

                entity.Property(e => e.LblStep3TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep3Title_pt");

                entity.Property(e => e.LblStep4Description)
                    .HasColumnType("text")
                    .HasColumnName("lblStep4Description");

                entity.Property(e => e.LblStep4DescriptionEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep4Description_en");

                entity.Property(e => e.LblStep4DescriptionPt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep4Description_pt");

                entity.Property(e => e.LblStep4HolderDescribe)
                    .HasColumnType("text")
                    .HasColumnName("lblStep4HolderDescribe");

                entity.Property(e => e.LblStep4HolderDescribeEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep4HolderDescribe_en");

                entity.Property(e => e.LblStep4HolderDescribePt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep4HolderDescribe_pt");

                entity.Property(e => e.LblStep4Title)
                    .HasColumnType("text")
                    .HasColumnName("lblStep4Title");

                entity.Property(e => e.LblStep4TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("lblStep4Title_en");

                entity.Property(e => e.LblStep4TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("lblStep4Title_pt");

                entity.Property(e => e.LblTextTips)
                    .HasColumnType("text")
                    .HasColumnName("lblTextTips");

                entity.Property(e => e.LblTextTipsEn)
                    .HasColumnType("text")
                    .HasColumnName("lblTextTips_en");

                entity.Property(e => e.LblTextTipsPt)
                    .HasColumnType("text")
                    .HasColumnName("lblTextTips_pt");

                entity.Property(e => e.LblTips)
                    .HasColumnType("text")
                    .HasColumnName("lblTips");

                entity.Property(e => e.LblTipsEn)
                    .HasColumnType("text")
                    .HasColumnName("lblTips_en");

                entity.Property(e => e.LblTipsPt)
                    .HasColumnType("text")
                    .HasColumnName("lblTips_pt");

                entity.Property(e => e.LblVerservicios)
                    .HasColumnType("text")
                    .HasColumnName("lblVerservicios");

                entity.Property(e => e.LblVerserviciosEn)
                    .HasColumnType("text")
                    .HasColumnName("lblVerservicios_en");

                entity.Property(e => e.LblVerserviciosPt)
                    .HasColumnType("text")
                    .HasColumnName("lblVerservicios_pt");

                entity.Property(e => e.Lblstep4TextTips)
                    .HasColumnType("text")
                    .HasColumnName("lblstep4TextTips");

                entity.Property(e => e.Lblstep4TextTipsEn)
                    .HasColumnType("text")
                    .HasColumnName("lblstep4TextTips_en");

                entity.Property(e => e.Lblstep4TextTipsPt)
                    .HasColumnType("text")
                    .HasColumnName("lblstep4TextTips_pt");

                entity.Property(e => e.Lblsubir)
                    .HasColumnType("text")
                    .HasColumnName("lblsubir");

                entity.Property(e => e.LblsubirEn)
                    .HasColumnType("text")
                    .HasColumnName("lblsubir_en");

                entity.Property(e => e.LblsubirPt)
                    .HasColumnType("text")
                    .HasColumnName("lblsubir_pt");

                entity.Property(e => e.Step1)
                    .HasColumnType("text")
                    .HasColumnName("step1");

                entity.Property(e => e.Step1En)
                    .HasColumnType("text")
                    .HasColumnName("step1_en");

                entity.Property(e => e.Step1Pt)
                    .HasColumnType("text")
                    .HasColumnName("step1_pt");

                entity.Property(e => e.Step2)
                    .HasColumnType("text")
                    .HasColumnName("step2");

                entity.Property(e => e.Step2En)
                    .HasColumnType("text")
                    .HasColumnName("step2_en");

                entity.Property(e => e.Step2Pt)
                    .HasColumnType("text")
                    .HasColumnName("step2_pt");

                entity.Property(e => e.Step3)
                    .HasColumnType("text")
                    .HasColumnName("step3");

                entity.Property(e => e.Step3En)
                    .HasColumnType("text")
                    .HasColumnName("step3_en");

                entity.Property(e => e.Step3Pt)
                    .HasColumnType("text")
                    .HasColumnName("step3_pt");

                entity.Property(e => e.Step4)
                    .HasColumnType("text")
                    .HasColumnName("step4");

                entity.Property(e => e.Step4En)
                    .HasColumnType("text")
                    .HasColumnName("step4_en");

                entity.Property(e => e.Step4Pt)
                    .HasColumnType("text")
                    .HasColumnName("step4_pt");

                entity.Property(e => e.TitleWelcom)
                    .HasColumnType("text")
                    .HasColumnName("titleWelcom");

                entity.Property(e => e.TitleWelcomeEn)
                    .HasColumnType("text")
                    .HasColumnName("titleWelcome_en");

                entity.Property(e => e.TitleWelcomePt)
                    .HasColumnType("text")
                    .HasColumnName("titleWelcome_pt");
            });




            modelBuilder.Entity<IngresoOrganizacionConfiguracion>(entity =>
            {
                entity.ToTable("IngresoOrganizacionConfiguracion");

                entity.Property(e => e.BtnCreater)
                    .IsRequired()
                    .HasColumnName("btnCreater")
                    .HasColumnType("text");

                entity.Property(e => e.BtnCreaterEn)
                    .HasColumnName("btnCreater_en")
                    .HasColumnType("text");

                entity.Property(e => e.BtnCreaterPt)
                    .HasColumnName("btnCreater_pt")
                    .HasColumnType("text");

                entity.Property(e => e.BtnLogIng)
                    .IsRequired()
                    .HasColumnName("btnLogIng")
                    .HasColumnType("text");

                entity.Property(e => e.BtnLogIngEn)
                    .HasColumnName("btnLogIng_en")
                    .HasColumnType("text");

                entity.Property(e => e.BtnLogIngPt)
                    .HasColumnName("btnLogIng_pt")
                    .HasColumnType("text");

                entity.Property(e => e.EmailInvalid)
                    .IsRequired()
                    .HasColumnName("emailInvalid")
                    .HasColumnType("text");

                entity.Property(e => e.EmailInvalidEn)
                    .HasColumnName("emailInvalid_en")
                    .HasColumnType("text");

                entity.Property(e => e.EmailInvalidPt)
                    .HasColumnName("emailInvalid_pt")
                    .HasColumnType("text");

                entity.Property(e => e.ForgotePassword)
                    .IsRequired()
                    .HasColumnName("forgotePassword")
                    .HasColumnType("text");

                entity.Property(e => e.ForgotePasswordEn)
                    .HasColumnName("forgotePassword_en")
                    .HasColumnType("text");

                entity.Property(e => e.ForgotePasswordPt)
                    .HasColumnName("forgotePassword_pt")
                    .HasColumnType("text");

                entity.Property(e => e.NoEmail)
                    .IsRequired()
                    .HasColumnName("noEmail")
                    .HasColumnType("text");

                entity.Property(e => e.NoEmailEn)
                    .HasColumnName("noEmail_en")
                    .HasColumnType("text");

                entity.Property(e => e.NoEmailPt)
                    .HasColumnName("noEmail_pt")
                    .HasColumnType("text");

                entity.Property(e => e.PlaceHolderEmail)
                    .IsRequired()
                    .HasColumnName("placeHolderEmail")
                    .HasColumnType("text");

                entity.Property(e => e.PlaceHolderEmailEn)
                    .HasColumnName("placeHolderEmail_en")
                    .HasColumnType("text");

                entity.Property(e => e.PlaceHolderEmailPt)
                    .HasColumnName("placeHolderEmail_pt")
                    .HasColumnType("text");

                entity.Property(e => e.PlaceHolderPassword)
                    .IsRequired()
                    .HasColumnName("placeHolderPassword")
                    .HasColumnType("text");

                entity.Property(e => e.PlaceHolderPasswordEn)
                    .HasColumnName("placeHolderPassword_en")
                    .HasColumnType("text");

                entity.Property(e => e.PlaceHolderPasswordPt)
                    .HasColumnName("placeHolderPassword_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasColumnType("text");

                entity.Property(e => e.TitleEn)
                    .HasColumnName("title_en")
                    .HasColumnType("text");

                entity.Property(e => e.TitlePt)
                    .HasColumnName("title_pt")
                    .HasColumnType("text");

                entity.Property(e => e.WhritePassword)
                    .IsRequired()
                    .HasColumnName("whritePassword")
                    .HasColumnType("text");

                entity.Property(e => e.WhritePasswordEn)
                    .HasColumnName("whritePassword_en")
                    .HasColumnType("text");

                entity.Property(e => e.WhritePasswordPt)
                    .HasColumnName("whritePassword_pt")
                    .HasColumnType("text");

                entity.Property(e => e.WrhiteEmail)
                    .IsRequired()
                    .HasColumnName("wrhiteEmail")
                    .HasColumnType("text");

                entity.Property(e => e.WrhiteEmailEn)
                    .HasColumnName("wrhiteEmail_en")
                    .HasColumnType("text");

                entity.Property(e => e.WrhiteEmailPt)
                    .HasColumnName("wrhiteEmail_pt")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<CrearCuentaOrganizacionConfiguracion>(entity =>
            {
                entity.ToTable("CrearCuentaOrganizacionConfiguracion");

                entity.Property(e => e.Activate)
                    .HasColumnType("text")
                    .HasColumnName("activate");

                entity.Property(e => e.ActivateEn)
                    .HasColumnType("text")
                    .HasColumnName("activate_en");

                entity.Property(e => e.ActivatePt)
                    .HasColumnType("text")
                    .HasColumnName("activate_pt");

                entity.Property(e => e.InputConfirmPassword)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("inputConfirmPassword");

                entity.Property(e => e.InputConfirmPasswordEn)
                    .HasColumnType("text")
                    .HasColumnName("inputConfirmPassword_en");

                entity.Property(e => e.InputConfirmPasswordPt)
                    .HasColumnType("text")
                    .HasColumnName("inputConfirmPassword_pt");

                entity.Property(e => e.InputEmail)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("inputEmail");

                entity.Property(e => e.InputEmailEn)
                    .HasColumnType("text")
                    .HasColumnName("inputEmail_en");

                entity.Property(e => e.InputEmailPt)
                    .HasColumnType("text")
                    .HasColumnName("inputEmail_pt");

                entity.Property(e => e.InputOrganizationName)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("inputOrganizationName");

                entity.Property(e => e.InputOrganizationNameEn)
                    .HasColumnType("text")
                    .HasColumnName("inputOrganizationName_en");

                entity.Property(e => e.InputOrganizationNamePt)
                    .HasColumnType("text")
                    .HasColumnName("inputOrganizationName_pt");

                entity.Property(e => e.InputPassword)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("inputPassword");

                entity.Property(e => e.InputPasswordEn)
                    .HasColumnType("text")
                    .HasColumnName("inputPassword_en");

                entity.Property(e => e.InputPasswordPt)
                    .HasColumnType("text")
                    .HasColumnName("inputPassword_pt");

                entity.Property(e => e.InputResponsable)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("inputResponsable");

                entity.Property(e => e.InputResponsableEn)
                    .HasColumnType("text")
                    .HasColumnName("inputResponsable_en");

                entity.Property(e => e.InputResponsablePt)
                    .HasColumnType("text")
                    .HasColumnName("inputResponsable_pt");

                entity.Property(e => e.Mail)
                    .HasColumnType("text")
                    .HasColumnName("mail");

                entity.Property(e => e.MailEn)
                    .HasColumnType("text")
                    .HasColumnName("mail_en");

                entity.Property(e => e.MailPt)
                    .HasColumnType("text")
                    .HasColumnName("mail_pt");

                entity.Property(e => e.PlaceHolderConfirmPassword)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("placeHolderConfirmPassword");

                entity.Property(e => e.PlaceHolderConfirmPasswordEn)
                    .HasColumnType("text")
                    .HasColumnName("placeHolderConfirmPassword_en");

                entity.Property(e => e.PlaceHolderConfirmPasswordPt)
                    .HasColumnType("text")
                    .HasColumnName("placeHolderConfirmPassword_pt");

                entity.Property(e => e.PlaceHolderEmail)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("placeHolderEmail");

                entity.Property(e => e.PlaceHolderEmailEn)
                    .HasColumnType("text")
                    .HasColumnName("placeHolderEmail_en");

                entity.Property(e => e.PlaceHolderEmailPt)
                    .HasColumnType("text")
                    .HasColumnName("placeHolderEmail_pt");

                entity.Property(e => e.PlaceHolderOrganizationName)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("placeHolderOrganizationName");

                entity.Property(e => e.PlaceHolderOrganizationNameEn)
                    .HasColumnType("text")
                    .HasColumnName("placeHolderOrganizationName_en");

                entity.Property(e => e.PlaceHolderOrganizationNamePt)
                    .HasColumnType("text")
                    .HasColumnName("placeHolderOrganizationName_pt");

                entity.Property(e => e.PlaceHolderPassword)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("placeHolderPassword");

                entity.Property(e => e.PlaceHolderPasswordEn)
                    .HasColumnType("text")
                    .HasColumnName("placeHolderPassword_en");

                entity.Property(e => e.PlaceHolderPasswordPt)
                    .HasColumnType("text")
                    .HasColumnName("placeHolderPassword_pt");

                entity.Property(e => e.PlaceHolderResponsable)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("placeHolderResponsable");

                entity.Property(e => e.PlaceHolderResponsableEn)
                    .HasColumnType("text")
                    .HasColumnName("placeHolderResponsable_en");

                entity.Property(e => e.PlaceHolderResponsablePt)
                    .HasColumnType("text")
                    .HasColumnName("placeHolderResponsable_pt");

                entity.Property(e => e.Ready)
                    .HasColumnType("text")
                    .HasColumnName("ready");

                entity.Property(e => e.ReadyEn)
                    .HasColumnType("text")
                    .HasColumnName("ready_en");

                entity.Property(e => e.ReadyPt)
                    .HasColumnType("text")
                    .HasColumnName("ready_pt");

                entity.Property(e => e.Resend)
                    .HasColumnType("text")
                    .HasColumnName("resend");

                entity.Property(e => e.ResendEn)
                    .HasColumnType("text")
                    .HasColumnName("resend_en");

                entity.Property(e => e.ResendPt)
                    .HasColumnType("text")
                    .HasColumnName("resend_pt");

                entity.Property(e => e.SmallOneConfirmPassword)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("smallOneConfirmPassword");

                entity.Property(e => e.SmallOneConfirmPasswordEn)
                    .HasColumnType("text")
                    .HasColumnName("smallOneConfirmPassword_en");

                entity.Property(e => e.SmallOneConfirmPasswordPt)
                    .HasColumnType("text")
                    .HasColumnName("smallOneConfirmPassword_pt");

                entity.Property(e => e.SmallOneEmail)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("smallOneEmail");

                entity.Property(e => e.SmallOneEmailEn)
                    .HasColumnType("text")
                    .HasColumnName("smallOneEmail_en");

                entity.Property(e => e.SmallOneEmailPt)
                    .HasColumnType("text")
                    .HasColumnName("smallOneEmail_pt");

                entity.Property(e => e.SmallPassword)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("smallPassword");

                entity.Property(e => e.SmallPasswordEn)
                    .HasColumnType("text")
                    .HasColumnName("smallPassword_en");

                entity.Property(e => e.SmallPasswordPt)
                    .HasColumnType("text")
                    .HasColumnName("smallPassword_pt");

                entity.Property(e => e.SmallResponsable)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("smallResponsable");

                entity.Property(e => e.SmallResponsableEn)
                    .HasColumnType("text")
                    .HasColumnName("smallResponsable_en");

                entity.Property(e => e.SmallResponsablePt)
                    .HasColumnType("text")
                    .HasColumnName("smallResponsable_pt");

                entity.Property(e => e.SmallTerminos)
                    .HasColumnType("text")
                    .HasColumnName("smallTerminos");

                entity.Property(e => e.SmallTerminosEn)
                    .HasColumnType("text")
                    .HasColumnName("smallTerminos_en");

                entity.Property(e => e.SmallTerminosPt)
                    .HasColumnType("text")
                    .HasColumnName("smallTerminos_pt");

                entity.Property(e => e.SmallTwoConfirmPassword)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("smallTwoConfirmPassword");

                entity.Property(e => e.SmallTwoConfirmPasswordEn)
                    .HasColumnType("text")
                    .HasColumnName("smallTwoConfirmPassword_en");

                entity.Property(e => e.SmallTwoConfirmPasswordPt)
                    .HasColumnType("text")
                    .HasColumnName("smallTwoConfirmPassword_pt");

                entity.Property(e => e.SmallTwoEmail)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("smallTwoEmail");

                entity.Property(e => e.SmallTwoEmailEn)
                    .HasColumnType("text")
                    .HasColumnName("smallTwoEmail_en");

                entity.Property(e => e.SmallTwoEmailPt)
                    .HasColumnType("text")
                    .HasColumnName("smallTwoEmail_pt");

                entity.Property(e => e.SmalltOrganizationName)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("smalltOrganizationName");

                entity.Property(e => e.SmalltOrganizationNameEn)
                    .HasColumnType("text")
                    .HasColumnName("smalltOrganizationName_en");

                entity.Property(e => e.SmalltOrganizationNamePt)
                    .HasColumnType("text")
                    .HasColumnName("smalltOrganizationName_pt");

                entity.Property(e => e.SubTittle)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("subTittle");

                entity.Property(e => e.SubTittleEn)
                    .HasColumnType("text")
                    .HasColumnName("subTittle_en");

                entity.Property(e => e.SubTittlePt)
                    .HasColumnType("text")
                    .HasColumnName("subTittle_pt");

                entity.Property(e => e.Terminos)
                    .HasColumnType("text")
                    .HasColumnName("terminos");

                entity.Property(e => e.TerminosEn)
                    .HasColumnType("text")
                    .HasColumnName("terminos_en");

                entity.Property(e => e.TerminosPt)
                    .HasColumnType("text")
                    .HasColumnName("terminos_pt");

                entity.Property(e => e.Tittle)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("tittle");

                entity.Property(e => e.TittleEn)
                    .HasColumnType("text")
                    .HasColumnName("tittle_en");

                entity.Property(e => e.TittlePt)
                    .HasColumnType("text")
                    .HasColumnName("tittle_pt");

                entity.Property(e => e.ToastEmail)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("toastEmail");

                entity.Property(e => e.ToastEmailEn)
                    .HasColumnType("text")
                    .HasColumnName("toastEmail_en");

                entity.Property(e => e.ToastEmailPt)
                    .HasColumnType("text")
                    .HasColumnName("toastEmail_pt");
            });

            modelBuilder.Entity<NewsletterOrganizationFrontConfiguration>(entity =>
            {
                entity.ToTable("newsletterOrganizationFrontConfiguration");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("descripcion")
                    .HasColumnType("text");

                entity.Property(e => e.DescripcionEn)
                    .HasColumnName("descripcion_en")
                    .HasColumnType("text");

                entity.Property(e => e.DescripcionPt)
                    .HasColumnName("descripcion_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("email")
                    .HasColumnType("text");

                entity.Property(e => e.EmailEn)
                    .HasColumnName("email_en")
                    .HasColumnType("text");

                entity.Property(e => e.EmailPt)
                    .HasColumnName("email_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Enviar)
                    .IsRequired()
                    .HasColumnName("enviar")
                    .HasColumnType("text");

                entity.Property(e => e.EnviarEn)
                    .HasColumnName("enviar_en")
                    .HasColumnType("text");

                entity.Property(e => e.EnviarPt)
                    .HasColumnName("enviar_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Exito)
                    .HasColumnName("exito")
                    .HasColumnType("text");

                entity.Property(e => e.ExitoEn)
                    .HasColumnName("exito_en")
                    .HasColumnType("text");

                entity.Property(e => e.ExitoPt)
                    .HasColumnName("exito_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasColumnName("nombre")
                    .HasColumnType("text");

                entity.Property(e => e.NombreEn)
                    .HasColumnName("nombre_en")
                    .HasColumnType("text");

                entity.Property(e => e.NombrePt)
                    .HasColumnName("nombre_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Organizacion)
                    .IsRequired()
                    .HasColumnName("organizacion")
                    .HasColumnType("text");

                entity.Property(e => e.OrganizacionEn)
                    .HasColumnName("organizacion_en")
                    .HasColumnType("text");

                entity.Property(e => e.OrganizacionPt)
                    .HasColumnName("organizacion_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Suscribete)
                    .IsRequired()
                    .HasColumnName("suscribete")
                    .HasColumnType("text");

                entity.Property(e => e.SuscribeteEn)
                    .HasColumnName("suscribete_en")
                    .HasColumnType("text");

                entity.Property(e => e.SuscribetePt)
                    .HasColumnName("suscribete_pt")
                    .HasColumnType("text");

                entity.Property(e => e.ValidaEmail)
                    .HasColumnName("validaEmail")
                    .HasColumnType("text");

                entity.Property(e => e.ValidaEmailEn)
                    .HasColumnName("validaEmail_en")
                    .HasColumnType("text");

                entity.Property(e => e.ValidaEmailFormato)
                    .HasColumnName("validaEmailFormato")
                    .HasColumnType("text");

                entity.Property(e => e.ValidaEmailFormatoEn)
                    .HasColumnName("validaEmailFormato_en")
                    .HasColumnType("text");

                entity.Property(e => e.ValidaEmailFormatoPt)
                    .HasColumnName("validaEmailFormato_pt")
                    .HasColumnType("text");

                entity.Property(e => e.ValidaEmailPt)
                    .HasColumnName("validaEmail_pt")
                    .HasColumnType("text");

                entity.Property(e => e.ValidaNombre)
                    .HasColumnName("validaNombre")
                    .HasColumnType("text");

                entity.Property(e => e.ValidaNombreEn)
                    .HasColumnName("validaNombre_en")
                    .HasColumnType("text");

                entity.Property(e => e.ValidaNombrePt)
                    .HasColumnName("validaNombre_pt")
                    .HasColumnType("text");

                entity.Property(e => e.ValidaOrganizacion)
                    .HasColumnName("validaOrganizacion")
                    .HasColumnType("text");

                entity.Property(e => e.ValidaOrganizacionEn)
                    .HasColumnName("validaOrganizacion_en")
                    .HasColumnType("text");

                entity.Property(e => e.ValidaOrganizacionPt)
                    .HasColumnName("validaOrganizacion_pt")
                    .HasColumnType("text");
            });


            modelBuilder.Entity<Footer>(entity =>
            {
                entity.ToTable("Footer");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(90)
                    .IsUnicode(false);

                entity.Property(e => e.TitleEn)
                    .HasColumnName("title_en")
                    .HasMaxLength(90)
                    .IsUnicode(false);

                entity.Property(e => e.TitlePt)
                    .HasColumnName("title_pt")
                    .HasMaxLength(90)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasColumnName("url")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<FooterDetail>(entity =>
            {
                entity.ToTable("FooterDetail");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Description)
                    .HasMaxLength(90)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("Description_en")
                    .HasMaxLength(90)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("Description_pt")
                    .HasMaxLength(90)
                    .IsUnicode(false);

                entity.Property(e => e.FooterId).HasColumnName("footerId");

                entity.Property(e => e.Url)
                    .HasColumnName("url")
                    .HasColumnType("text");

                entity.HasOne(d => d.Footer)
                    .WithMany(p => p.FooterDetails)
                    .HasForeignKey(d => d.FooterId)
                    .HasConstraintName("FK_FooterDetail_Footer");
            });

            modelBuilder.Entity<Role>(entity =>
            {

                entity.ToTable("Roles");
                entity.Property(e => e.CreationDate)
                    .HasColumnName("Creation_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UsuariosRole>(entity =>
            {

                entity.ToTable("UsuariosRoles");

                entity.HasKey(e => new { e.UsuarioId, e.RoleId });

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UsuariosRoles)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsuariosRoles_Roles");

                entity.HasOne(d => d.Usuario)
                    .WithMany(p => p.UsuariosRoles)
                    .HasForeignKey(d => d.UsuarioId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsuariosRoles_auth_user");
            });

            modelBuilder.Entity<VisitasVacante>(entity =>
            {

                entity.ToTable("visitasVacantes");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creationDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.PostulanteId).HasColumnName("postulanteId");

                entity.Property(e => e.VacanteId).HasColumnName("vacanteId");

                entity.HasOne(d => d.Postulante)
                    .WithMany(p => p.VisitasVacantes)
                    .HasForeignKey(d => d.PostulanteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VisitasVacantes_candidates_candidate");

                entity.HasOne(d => d.Vacante)
                    .WithMany(p => p.VisitasVacantes)
                    .HasForeignKey(d => d.VacanteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VisitasVacantes_openings_opening");
            });

            modelBuilder.Entity<MenuPrincipal>(entity =>
            {
                entity.ToTable("MenuPrincipal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TitleEn)
                    .HasColumnName("title_en")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TitlePt)
                    .HasColumnName("title_pt")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.Url)
                    .HasColumnName("url")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<MenuPrincipalDetalle>(entity =>
            {
                entity.ToTable("MenuPrincipalDetalle");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("description_en")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.MenuprincipalId).HasColumnName("menuprincipalId");

                entity.Property(e => e.Url)
                    .HasColumnName("url")
                    .HasColumnType("text");

                entity.HasOne(d => d.Menuprincipal)
                    .WithMany(p => p.MenuPrincipalDetalles)
                    .HasForeignKey(d => d.MenuprincipalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MenuPrincipalDetalle_MenuPrincipal");
            });



            modelBuilder.Entity<FrontContentPorqueMatteriaDetalle>(entity =>
            {

                entity.ToTable("FrontContentPorqueMatteriaDetalles");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("description_en")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PorquematteriaId).HasColumnName("porquematteriaId");

                entity.Property(e => e.Type).HasColumnName("type");

                entity.HasOne(d => d.Porquematteria)
                    .WithMany(p => p.FrontContentPorqueMatteriaDetalles)
                    .HasForeignKey(d => d.PorquematteriaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrontContentPorqueMatteriaDetalles_FrontContentPorqueMatteria");
            });


            
            modelBuilder.Entity<FrontContentPorqueMatterium>(entity =>
            {

                entity.ToTable("FrontContentPorqueMatteria");



                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("creation_date");

                entity.Property(e => e.DescriptionProfesionales)
                    .HasColumnType("text")
                    .HasColumnName("descriptionProfesionales");

                entity.Property(e => e.DescriptionProfesionalesEn)
                    .HasColumnType("text")
                    .HasColumnName("descriptionProfesionales_en");

                entity.Property(e => e.DescriptionProfesionalesPt)
                    .HasColumnType("text")
                    .HasColumnName("descriptionProfesionales_pt");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(280)
                    .IsUnicode(false)
                    .HasColumnName("image");

                entity.Property(e => e.ImageSeccion).HasColumnType("text");

                entity.Property(e => e.LblVacantes)
                    .HasColumnType("text")
                    .HasColumnName("lblVacantes");

                entity.Property(e => e.LblVacantesEn)
                    .HasColumnType("text")
                    .HasColumnName("lblVacantes_en");

                entity.Property(e => e.LblVacantesPt)
                    .HasColumnType("text")
                    .HasColumnName("lblVacantes_pt");

                entity.Property(e => e.Phrase)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("phrase");

                entity.Property(e => e.PhraseEn)
                    .HasColumnType("text")
                    .HasColumnName("phrase_en");

                entity.Property(e => e.PhrasePt)
                    .HasColumnType("text")
                    .HasColumnName("phrase_pt");

                entity.Property(e => e.TitlePhrase)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("titlePhrase");

                entity.Property(e => e.TitlePhraseEn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("titlePhrase_en");

                entity.Property(e => e.TitlePhrasePt)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("title_Phrase_pt");

                entity.Property(e => e.TitleProfesionales)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("titleProfesionales");

                entity.Property(e => e.TitleProfesionalesEn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("titleProfesionales_en");

                entity.Property(e => e.TitleProfesionalesPt)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("titleProfesionales_pt");

                entity.Property(e => e.TitleSeccion)
                    .HasColumnType("text")
                    .HasColumnName("titleSeccion");

                entity.Property(e => e.TitleSeccionEn)
                    .HasColumnType("text")
                    .HasColumnName("titleSeccion_en");

                entity.Property(e => e.TitleSeccionPt)
                    .HasColumnType("text")
                    .HasColumnName("titleSeccion_pt");
            });


            modelBuilder.Entity<FrontContentEstructuraSalarial>(entity =>
            {
                entity.ToTable("FrontContentEstructuraSalarial");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.BtnDownload)
                    .HasColumnType("text")
                    .HasColumnName("btnDownload");

                entity.Property(e => e.BtnDownloadEn)
                    .HasColumnType("text")
                    .HasColumnName("btnDownload_en");

                entity.Property(e => e.BtnDownloadPt)
                    .HasColumnType("text")
                    .HasColumnName("btnDownload_pt");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("creation_date");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("description");

                entity.Property(e => e.DescriptionEn)
                    .HasColumnType("text")
                    .HasColumnName("description_en");

                entity.Property(e => e.DescriptionPoliticas)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("descriptionPoliticas");

                entity.Property(e => e.DescriptionPoliticasEn)
                    .HasColumnType("text")
                    .HasColumnName("descriptionPoliticas_en");

                entity.Property(e => e.DescriptionPoliticasPt)
                    .HasColumnType("text")
                    .HasColumnName("descriptionPoliticas_pt");

                entity.Property(e => e.DescriptionPoliticasShort)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("descriptionPoliticas_short");

                entity.Property(e => e.DescriptionPoliticasShortEn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("descriptionPoliticas_short_en");

                entity.Property(e => e.DescriptionPoliticasShortPt)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("descriptionPoliticas_short_pt");

                entity.Property(e => e.DescriptionPt)
                    .HasColumnType("text")
                    .HasColumnName("description_pt");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(280)
                    .IsUnicode(false)
                    .HasColumnName("image");

                entity.Property(e => e.ImageObjetivos)
                    .IsRequired()
                    .HasMaxLength(280)
                    .IsUnicode(false)
                    .HasColumnName("imageObjetivos");

                entity.Property(e => e.ImagePoliticas)
                    .IsRequired()
                    .HasMaxLength(280)
                    .IsUnicode(false)
                    .HasColumnName("image_politicas");

                entity.Property(e => e.ImgImpacto)
                    .IsRequired()
                    .HasMaxLength(280)
                    .IsUnicode(false)
                    .HasColumnName("imgImpacto");

                entity.Property(e => e.LinkMaterial)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("linkMaterial");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("title");

                entity.Property(e => e.TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("title_en");

                entity.Property(e => e.TitleImpacto)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("titleImpacto");

                entity.Property(e => e.TitleImpactoEn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("titleImpacto_en");

                entity.Property(e => e.TitleImpactoPt)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("titleImpacto_pt");

                entity.Property(e => e.TitleObjetivos)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("titleObjetivos");

                entity.Property(e => e.TitleObjetivosEn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("titleObjetivos_en");

                entity.Property(e => e.TitleObjetivosPt)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("titleObjetivos_pt");

                entity.Property(e => e.TitlePoliticas)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("title_politicas");

                entity.Property(e => e.TitlePoliticasEn)
                    .HasColumnType("text")
                    .HasColumnName("title_politicas_en");

                entity.Property(e => e.TitlePoliticasPt)
                    .HasColumnType("text")
                    .HasColumnName("title_politicas_pt");

                entity.Property(e => e.TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("title_pt");
            });



            modelBuilder.Entity<FrontContentEstructuraSalarialDetalle>(entity =>
            {

                entity.ToTable("FrontContentEstructuraSalarialDetalles");
                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("description_en")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EstructuraId).HasColumnName("estructuraId");

                entity.Property(e => e.Type).HasColumnName("type");

                entity.HasOne(d => d.Estructura)
                    .WithMany(p => p.FrontContentEstructuraSalarialDetalles)
                    .HasForeignKey(d => d.EstructuraId)
                    .HasConstraintName("FK_FrontContentEstructuraSalarialDetalles_FrontContentEstructuraSalarial");
            });



            modelBuilder.Entity<FrontContentManagerEquipoHeader>(entity =>
            {
                entity.ToTable("FrontContentManager_equipoHeader");

                entity.Property(e => e.CreatinDate)
                    .HasColumnName("creatin_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.NuestroEquipo)
                    .HasColumnName("nuestroEquipo")
                    .HasColumnType("text");

                entity.Property(e => e.NuestroEquipoEn)
                    .HasColumnName("nuestroEquipo_en")
                    .HasColumnType("text");

                entity.Property(e => e.NuestroEquipoPt)
                    .HasColumnName("nuestroEquipo_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Phrase)
                    .IsRequired()
                    .HasColumnName("phrase")
                    .HasColumnType("text");

                entity.Property(e => e.PhraseEn)
                    .HasColumnName("phrase_en")
                    .HasColumnType("text");

                entity.Property(e => e.PhrasePt)
                    .HasColumnName("phrase_pt")
                    .HasColumnType("text");
            });




            modelBuilder.Entity<FrontContentManagerAliadosHeader>(entity =>
            {
                entity.ToTable("FrontContentManager_aliadosHeader");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Phrase)
                    .HasColumnName("phrase")
                    .HasColumnType("text");

                entity.Property(e => e.PhraseEn)
                    .HasColumnName("phrase_en")
                    .HasColumnType("text");

                entity.Property(e => e.PhrasePt)
                    .HasColumnName("phrase_pt")
                    .HasColumnType("text");
            });


            modelBuilder.Entity<FrontContentHomeGeneral>(entity =>
            {
                entity.ToTable("FrontContentHomeGeneral");

                entity.Property(e => e.BtnOrganizacionText)
                    .HasColumnName("btnOrganizacionText")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BtnOrganizacionTextEn)
                    .HasColumnName("btnOrganizacionText_en")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BtnOrganizacionTextPt)
                    .HasColumnName("btnOrganizacionText_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BtnPostulanteText)
                    .HasColumnName("btnPostulanteText")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BtnPostulanteTextEn)
                    .HasColumnName("btnPostulanteText_en")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BtnPostulanteTextPt)
                    .HasColumnName("btnPostulanteText_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ImageOrganizacion)
                    .HasColumnName("imageOrganizacion")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ImagePostulante)
                    .HasColumnName("imagePostulante")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LabelimagePostulante)
                    .HasColumnName("labelimagePostulante")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LabelimagePostulanteEn)
                    .HasColumnName("labelimagePostulante_en")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LabelimagePostulantePt)
                    .HasColumnName("labelimagePostulante_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Labelimageorganizacion)
                    .HasColumnName("labelimageorganizacion")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LabelimageorganizacionEn)
                    .HasColumnName("labelimageorganizacion_en")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LabelimageorganizacionPt)
                    .HasColumnName("labelimageorganizacion_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LinkMoreOrganizacion)
                    .HasColumnName("linkMoreOrganizacion")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LinkMorePostulante)
                    .HasColumnName("linkMorePostulante")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Video)
                    .HasColumnName("video")
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });




            modelBuilder.Entity<FrontContentHomeHeaderPostulante>(entity =>
            {
                entity.ToTable("FrontContentHomeHeaderPostulante");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasColumnType("text");

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("description_en")
                    .HasColumnType("text");

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Destacada)
                    .HasColumnName("destacada")
                    .HasColumnType("text");

                entity.Property(e => e.DestacadaEn)
                    .HasColumnName("destacada_en")
                    .HasColumnType("text");

                entity.Property(e => e.DestacadaPt)
                    .HasColumnName("destacada_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasColumnName("image")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LinkVacantes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasColumnType("text");

                entity.Property(e => e.TitleEn)
                    .HasColumnName("title_en")
                    .HasColumnType("text");

                entity.Property(e => e.TitlePt)
                    .HasColumnName("title_pt")
                    .HasColumnType("text");

                entity.Property(e => e.VerVacantes)
                    .HasColumnName("verVacantes")
                    .HasColumnType("text");

                entity.Property(e => e.VerVacantesEn)
                    .HasColumnName("verVacantes_en")
                    .HasColumnType("text");

                entity.Property(e => e.VerVacantesPt)
                    .HasColumnName("verVacantes_pt")
                    .HasColumnType("text");
            });



            modelBuilder.Entity<FrontContentHomeImpactoPostulante>(entity =>
            {
                entity.ToTable("FrontContentHomeImpactoPostulante");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("creation_date");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("description");

                entity.Property(e => e.DescriptionEn)
                    .HasColumnType("text")
                    .HasColumnName("description_en");

                entity.Property(e => e.DescriptionPt)
                    .HasColumnType("text")
                    .HasColumnName("description_pt");

                entity.Property(e => e.Image)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("image");

                entity.Property(e => e.Mentoria)
                    .HasColumnType("text")
                    .HasColumnName("mentoria");

                entity.Property(e => e.MentoriaEn)
                    .HasColumnType("text")
                    .HasColumnName("mentoria_en");

                entity.Property(e => e.MentoriaPt)
                    .HasColumnType("text")
                    .HasColumnName("mentoria_pt");

                entity.Property(e => e.MoreInfo)
                    .HasColumnType("text")
                    .HasColumnName("moreInfo");

                entity.Property(e => e.MoreInfoEn)
                    .HasColumnType("text")
                    .HasColumnName("moreInfo_en");

                entity.Property(e => e.MoreInfoPt)
                    .HasColumnType("text")
                    .HasColumnName("moreInfo_pt");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("title");

                entity.Property(e => e.TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("title_en");

                entity.Property(e => e.TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("title_pt");
            });



            modelBuilder.Entity<FrontContentHeaderOrganizacione>(entity =>
            {


                entity.ToTable("FrontContentHeaderOrganizaciones");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasColumnType("text");

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("description_en")
                    .HasColumnType("text");

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Image)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LinkMoreInfo)
                    .HasColumnName("linkMoreInfo")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LinkSeeMore)
                    .HasColumnName("linkSeeMore")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LinkSeeMoreEn)
                    .HasColumnName("linkSeeMore_en")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LinkSeeMorePt)
                    .HasColumnName("linkSeeMore_pt")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasColumnType("text");

                entity.Property(e => e.TitleEn)
                    .HasColumnName("title_en")
                    .HasColumnType("text");

                entity.Property(e => e.TitlePt)
                    .HasColumnName("title_pt")
                    .HasColumnType("text");
            });








           

            modelBuilder.Entity<FrontContentHomeOrganizacionPorQueMatterium>(entity =>
            {

                entity.ToTable("FrontContentHomeOrganizacionPorQueMatteria");
                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.DescriptionLong)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("descriptionLong");

                entity.Property(e => e.DescriptionLongEn)
                    .HasColumnType("text")
                    .HasColumnName("descriptionLong_en");

                entity.Property(e => e.DescriptionLongPt)
                    .HasColumnType("text")
                    .HasColumnName("descriptionLong_pt");

                entity.Property(e => e.DescriptionShort)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("descriptionShort");

                entity.Property(e => e.DescriptionShortEn)
                    .HasColumnType("text")
                    .HasColumnName("descriptionShort_en");

                entity.Property(e => e.DescriptionShortPt)
                    .HasColumnType("text")
                    .HasColumnName("descriptionShort_pt");

                entity.Property(e => e.LabelDistintos)
                    .HasColumnType("text")
                    .HasColumnName("labelDistintos");

                entity.Property(e => e.LabelDistintosEn)
                    .HasColumnType("text")
                    .HasColumnName("labelDistintos_en");

                entity.Property(e => e.LabelDistintosPt)
                    .HasColumnType("text")
                    .HasColumnName("labelDistintos_pt");

                entity.Property(e => e.LabelPorque)
                    .HasColumnType("text")
                    .HasColumnName("labelPorque");

                entity.Property(e => e.LabelPorqueEn)
                    .HasColumnType("text")
                    .HasColumnName("labelPorque_en");

                entity.Property(e => e.LabelPorquePt)
                    .HasColumnType("text")
                    .HasColumnName("labelPorque_pt");

                entity.Property(e => e.MoreInfo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("moreInfo");

                entity.Property(e => e.MoreInfoEn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("moreInfo_en");

                entity.Property(e => e.MoreInfoPt)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("moreInfo_pt");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("number");
            });





            modelBuilder.Entity<FrontContentHomeOrgContenidoRecurso>(entity =>
            {
                entity.ToTable("FrontContentHomeOrgContenidoRecurso");

                entity.Property(e => e.Blog)
                    .HasColumnName("blog")
                    .HasColumnType("text");

                entity.Property(e => e.BlogEn)
                    .HasColumnName("blog_en")
                    .HasColumnType("text");

                entity.Property(e => e.BlogPt)
                    .HasColumnName("blog_pt")
                    .HasColumnType("text");

                entity.Property(e => e.ContenidoRecurso)
                    .HasColumnName("contenidoRecurso")
                    .HasColumnType("text");

                entity.Property(e => e.ContenidoRecursoEn)
                    .HasColumnName("contenidoRecurso_en")
                    .HasColumnType("text");

                entity.Property(e => e.ContenidoRecursoPt)
                    .HasColumnName("contenidoRecurso_pt")
                    .HasColumnType("text");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateContent)
                    .HasColumnName("dateContent")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasColumnType("text");

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("description_en")
                    .HasColumnType("text");

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasColumnType("text");

                entity.Property(e => e.LeerMas)
                    .HasColumnName("leerMas")
                    .HasColumnType("text");

                entity.Property(e => e.LeerMasEn)
                    .HasColumnName("leerMas_en")
                    .HasColumnType("text");

                entity.Property(e => e.LeerMasPt)
                    .HasColumnName("leerMas_pt")
                    .HasColumnType("text");

                entity.Property(e => e.LinkReadMore)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Share)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });






            modelBuilder.Entity<CatalogsTipoOrganizacion>(entity =>
            {
                entity.ToTable("Catalogs_TipoOrganizacion");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(180)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate)
                    .HasColumnName("registrationDate")
                    .HasColumnType("datetime");
            });



            modelBuilder.Entity<AuthGroup>(entity =>
            {
                entity.HasKey(e => new { e.Name, e.Id })
                    .HasName("sqlite_autoindex_auth_group_1");

                entity.ToTable("auth_group");

                entity.HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Trial139)
                    .HasColumnName("TRIAL139")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<AuthGroupPermission>(entity =>
            {
                entity.ToTable("auth_group_permissions");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.GroupId)
                    .HasName("auth_group_permissions_0e939a4f");

                entity.HasIndex(e => e.PermissionId)
                    .HasName("auth_group_permissions_8373b171");

                entity.HasIndex(e => new { e.GroupId, e.PermissionId })
                    .HasName("auth_group_permissions_group_id_0cd325b0_uniq")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.GroupId)
                    .HasColumnName("group_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.PermissionId)
                    .HasColumnName("permission_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial139)
                    .HasColumnName("TRIAL139")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.HasOne(d => d.Permission)
                    .WithMany(p => p.AuthGroupPermissions)
                    .HasForeignKey(d => d.PermissionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_auth_group_auth_permission_0");
            });

            modelBuilder.Entity<AuthPermission>(entity =>
            {
                entity.ToTable("auth_permission");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.ContentTypeId)
                    .HasName("auth_permission_417f1b1c");

                entity.HasIndex(e => new { e.ContentTypeId, e.Codename })
                    .HasName("auth_permission_content_type_id_01ab375a_uniq")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Codename)
                    .IsRequired()
                    .HasColumnName("codename")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ContentTypeId)
                    .HasColumnName("content_type_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial139)
                    .HasColumnName("TRIAL139")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.HasOne(d => d.ContentType)
                    .WithMany(p => p.AuthPermissions)
                    .HasForeignKey(d => d.ContentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_auth_group_permissions_django_content_type_0");
            });

            modelBuilder.Entity<AuthUser>(entity =>
            {
                entity.ToTable("auth_user");

                entity.HasComment("TRIAL");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Avatar)
                    .HasColumnType("text")
                    .HasColumnName("avatar");

                entity.Property(e => e.CityId).HasColumnName("cityId");

                entity.Property(e => e.CountryId).HasColumnName("countryId");

                entity.Property(e => e.DateJoined)
                    .HasColumnType("datetime")
                    .HasColumnName("date_joined")
                    .HasComment("TRIAL");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("email")
                    .HasComment("TRIAL");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("first_name")
                    .HasComment("TRIAL");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("TRIAL");

                entity.Property(e => e.IsNotifications).HasColumnName("isNotifications");

                entity.Property(e => e.IsStaff)
                    .HasColumnName("is_staff")
                    .HasComment("TRIAL");

                entity.Property(e => e.IsSuperuser)
                    .HasColumnName("is_superuser")
                    .HasComment("TRIAL");

                entity.Property(e => e.LastLogin)
                    .HasColumnType("datetime")
                    .HasColumnName("last_login")
                    .HasComment("TRIAL");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("last_name")
                    .HasComment("TRIAL");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("password")
                    .HasComment("TRIAL");

                entity.Property(e => e.ReasonCancellation)
                    .HasColumnType("text")
                    .HasColumnName("reasonCancellation")
                    .HasComment("TRIAL");

                entity.Property(e => e.Team)
                    .HasColumnType("text")
                    .HasColumnName("team");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("username")
                    .HasComment("TRIAL");

                entity.Property(e => e.Workstation)
                    .HasColumnType("text")
                    .HasColumnName("workstation");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.AuthUsers)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_auth_user_catalogs_state");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.AuthUsers)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_auth_user_catalogs_country");
            });

            modelBuilder.Entity<AuthUserGroup>(entity =>
            {
                entity.ToTable("auth_user_groups");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.GroupId)
                    .HasName("auth_user_groups_0e939a4f");

                entity.HasIndex(e => e.UserId)
                    .HasName("auth_user_groups_e8701ad4");

                entity.HasIndex(e => new { e.UserId, e.GroupId })
                    .HasName("auth_user_groups_user_id_94350c0c_uniq")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.GroupId)
                    .HasColumnName("group_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial155)
                    .HasColumnName("TRIAL155")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<AuthUserUserPermission>(entity =>
            {
                entity.ToTable("auth_user_user_permissions");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.PermissionId)
                    .HasName("auth_user_user_permissions_8373b171");

                entity.HasIndex(e => e.UserId)
                    .HasName("auth_user_user_permissions_e8701ad4");

                entity.HasIndex(e => new { e.UserId, e.PermissionId })
                    .HasName("auth_user_user_permissions_user_id_14a6b632_uniq")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.PermissionId)
                    .HasColumnName("permission_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial155)
                    .HasColumnName("TRIAL155")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("TRIAL");

                entity.HasOne(d => d.Permission)
                    .WithMany(p => p.AuthUserUserPermissions)
                    .HasForeignKey(d => d.PermissionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_auth_user_groups_auth_permission_0");
            });

            modelBuilder.Entity<BackOfficeContact>(entity =>
            {
                entity.ToTable("BackOffice_contact");

                entity.HasComment("TRIAL");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("email")
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasColumnName("phone_number")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial116)
                    .HasColumnName("TRIAL116")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<BackOfficeContactservice>(entity =>
            {
                entity.ToTable("BackOffice_contactservices");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CountryId)
                    .HasName("BackOffice_contactservices_93bfec8a");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasColumnName("contact_name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.CountryId)
                    .HasColumnName("country_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("email")
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.PhoneNumber)
                    .HasColumnName("phone_number")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial120)
                    .HasColumnName("TRIAL120")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<BackOfficeContactservicesService>(entity =>
            {
                entity.ToTable("BackOffice_contactservices_services");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CompanyserviceId)
                    .HasName("BackOffice_contactservices_services_1db931e6");

                entity.HasIndex(e => e.ContactservicesId)
                    .HasName("BackOffice_contactservices_services_3b6a4861");

                entity.HasIndex(e => new { e.ContactservicesId, e.CompanyserviceId })
                    .HasName("BackOffice_contactservices_services_contactservices_id_a2d89e70_uniq")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CompanyserviceId)
                    .HasColumnName("companyservice_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.ContactservicesId)
                    .HasColumnName("contactservices_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial123)
                    .HasColumnName("TRIAL123")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.HasOne(d => d.Contactservices)
                    .WithMany(p => p.BackOfficeContactservicesServices)
                    .HasForeignKey(d => d.ContactservicesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_BackOffice_contactservices_BackOffice_contactservices_1");
            });

            modelBuilder.Entity<LoginUser>(entity =>
            {
                entity.ToTable("loginUsers");

                entity.Property(e => e.LoginDate)
                    .HasColumnName("loginDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.UsuarioId).HasColumnName("usuarioId");

                entity.HasOne(d => d.Usuario)
                    .WithMany(p => p.LoginUsers)
                    .HasForeignKey(d => d.UsuarioId)
                    .HasConstraintName("FK_loginUsers_auth_user");
            });

            modelBuilder.Entity<CandidatesCandidate>(entity =>
            {
                entity.ToTable("candidates_candidate");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.HowHearAboutUsId).HasName("candidates_candidate_6bb9cf3d");

                entity.HasIndex(e => e.CountryId).HasName("candidates_candidate_93bfec8a");

                entity.HasIndex(e => e.UpdatedById).HasName("candidates_candidate_9ccf0ba6");

                entity.HasIndex(e => e.UserId).HasName("candidates_candidate_e8701ad4");

                entity.HasIndex(e => e.CreatedById).HasName("candidates_candidate_e93cb7eb");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Abilities)
                    .HasColumnType("text")
                    .HasColumnName("abilities")
                    .HasComment("TRIAL");

                entity.Property(e => e.Answer1)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("answer_1")
                    .HasComment("TRIAL");

                entity.Property(e => e.Answer3)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("answer_3")
                    .HasComment("TRIAL");

                entity.Property(e => e.Avaliability)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("avaliability")
                    .HasComment("TRIAL");

                entity.Property(e => e.Avatar)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("avatar")
                    .HasComment("TRIAL");

                entity.Property(e => e.Birthday)
                    .HasColumnType("date")
                    .HasColumnName("birthday")
                    .HasComment("TRIAL");

                entity.Property(e => e.CellphoneNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cellphone_number")
                    .HasComment("TRIAL");

                entity.Property(e => e.City)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("city")
                    .HasComment("TRIAL");

                entity.Property(e => e.Competence1)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("competence_1")
                    .HasComment("TRIAL");

                entity.Property(e => e.Competence2)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("competence_2")
                    .HasComment("TRIAL");

                entity.Property(e => e.Competence3)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("competence_3")
                    .HasComment("TRIAL");

                entity.Property(e => e.CountryId)
                    .HasColumnName("country_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CurrencyId).HasColumnName("currencyId");

                entity.Property(e => e.CustomUrl)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("custom_url")
                    .HasComment("TRIAL");

                entity.Property(e => e.Extras)
                    .HasColumnType("text")
                    .HasColumnName("extras")
                    .HasComment("TRIAL");

                entity.Property(e => e.FromTcs)
                    .HasColumnName("from_tcs")
                    .HasComment("TRIAL");

                entity.Property(e => e.FromTcsMailSent)
                    .HasColumnName("from_tcs_mail_sent")
                    .HasComment("TRIAL");

                entity.Property(e => e.Genre)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("genre")
                    .HasComment("TRIAL");

                entity.Property(e => e.HeightField)
                    .HasColumnName("height_field")
                    .HasComment("TRIAL");

                entity.Property(e => e.Hobbies)
                    .HasColumnType("text")
                    .HasColumnName("hobbies")
                    .HasComment("TRIAL");

                entity.Property(e => e.HowHearAboutUsId)
                    .HasColumnName("how_hear_about_us_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.MailJobOffers)
                    .HasColumnName("mail_job_offers")
                    .HasComment("TRIAL");

                entity.Property(e => e.MailSiteImprovements)
                    .HasColumnName("mail_site_improvements")
                    .HasComment("TRIAL");

                entity.Property(e => e.MailUpdatesNewsMatteria)
                    .HasColumnName("mail_updates_news_matteria")
                    .HasComment("TRIAL");

                entity.Property(e => e.Position)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("position");

                entity.Property(e => e.Positivechange)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("positivechange");

                entity.Property(e => e.ProfId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("prof_ID")
                    .HasComment("TRIAL");

                entity.Property(e => e.SalaryMax)
                    .HasColumnName("salary_max")
                    .HasComment("TRIAL");

                entity.Property(e => e.SalaryMin)
                    .HasColumnName("salary_min")
                    .HasComment("TRIAL");

                entity.Property(e => e.Skill1)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("skill_1")
                    .HasComment("TRIAL");

                entity.Property(e => e.Skill2)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("skill_2")
                    .HasComment("TRIAL");

                entity.Property(e => e.Skill3)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("skill_3")
                    .HasComment("TRIAL");

                entity.Property(e => e.SocialFacebook)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("social_facebook")
                    .HasComment("TRIAL");

                entity.Property(e => e.SocialLinkedin)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("social_linkedin")
                    .HasComment("TRIAL");

                entity.Property(e => e.SocialSnapchat)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("social_snapchat")
                    .HasComment("TRIAL");

                entity.Property(e => e.SocialSnapchatAvatar)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("social_snapchat_avatar")
                    .HasComment("TRIAL");

                entity.Property(e => e.SocialTwitter)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("social_twitter")
                    .HasComment("TRIAL");

                entity.Property(e => e.SocialYoutube)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("social_youtube")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.TermsPolitics)
                    .HasColumnName("terms_politics")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnType("datetime")
                    .HasColumnName("timestamp")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .HasColumnName("updated")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.VistedCountries)
                    .HasColumnType("text")
                    .HasColumnName("visted_countries")
                    .HasComment("TRIAL");

                entity.Property(e => e.WidthField)
                    .HasColumnName("width_field")
                    .HasComment("TRIAL");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.CandidatesCandidates)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_candidates_candidate_catalogs_country");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.CandidatesCandidates)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_candidates_candidate_catalogs_currency");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CandidatesCandidates)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_candidates_candidate_auth_user");
            });

            modelBuilder.Entity<CandidatesCandidateAnswer2>(entity =>
            {
                entity.ToTable("candidates_candidate_answer_2");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CandidateId)
                    .HasName("candidates_candidate_answer_2_da445ead");

                entity.HasIndex(e => e.CompanytypeId)
                    .HasName("candidates_candidate_answer_2_e3935181");

                entity.HasIndex(e => new { e.CandidateId, e.CompanytypeId })
                    .HasName("candidates_candidate_answer_2_candidate_id_8f3a8b2c_uniq")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CandidateId)
                    .HasColumnName("candidate_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CompanytypeId)
                    .HasColumnName("companytype_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial182)
                    .HasColumnName("TRIAL182")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.HasOne(d => d.Candidate)
                    .WithMany(p => p.CandidatesCandidateAnswer2s)
                    .HasForeignKey(d => d.CandidateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_candidates_candidate_candidates_candidate_1");
            });

            modelBuilder.Entity<CandidatesCandidateExpArea>(entity =>
            {
                entity.ToTable("candidates_candidate_exp_areas");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CandidateId)
                    .HasName("candidates_candidate_exp_areas_da445ead");

                entity.HasIndex(e => e.ExpareaId)
                    .HasName("candidates_candidate_exp_areas_5127f1e5");

                entity.HasIndex(e => new { e.CandidateId, e.ExpareaId })
                    .HasName("candidates_candidate_exp_areas_candidate_id_44db07ce_uniq")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CandidateId)
                    .HasColumnName("candidate_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.ExpareaId)
                    .HasColumnName("exparea_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial185)
                    .HasColumnName("TRIAL185")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.HasOne(d => d.Candidate)
                    .WithMany(p => p.CandidatesCandidateExpAreas)
                    .HasForeignKey(d => d.CandidateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_candidates_candidate_answer_2_candidates_candidate_1");
            });

            modelBuilder.Entity<CandidatesCandidateExpSector>(entity =>
            {
                entity.ToTable("candidates_candidate_exp_sectors");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CandidateId)
                    .HasName("candidates_candidate_exp_sectors_da445ead");

                entity.HasIndex(e => e.ExpsectorId)
                    .HasName("candidates_candidate_exp_sectors_069f1080");

                entity.HasIndex(e => new { e.CandidateId, e.ExpsectorId })
                    .HasName("candidates_candidate_exp_sectors_candidate_id_2e9804f6_uniq")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CandidateId)
                    .HasColumnName("candidate_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.ExpsectorId)
                    .HasColumnName("expsector_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial188)
                    .HasColumnName("TRIAL188")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.HasOne(d => d.Candidate)
                    .WithMany(p => p.CandidatesCandidateExpSectors)
                    .HasForeignKey(d => d.CandidateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_candidates_candidate_exp_areas_candidates_candidate_1");
            });

            modelBuilder.Entity<CandidatesCandidateInterest>(entity =>
            {
                entity.ToTable("candidates_candidate_interests");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CandidateId)
                    .HasName("candidates_candidate_interests_da445ead");

                entity.HasIndex(e => e.InterestId)
                    .HasName("candidates_candidate_interests_774f0487");

                entity.HasIndex(e => new { e.CandidateId, e.InterestId })
                    .HasName("candidates_candidate_interests_candidate_id_03cefef8_uniq")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CandidateId)
                    .HasColumnName("candidate_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.InterestId)
                    .HasColumnName("interest_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial191)
                    .HasColumnName("TRIAL191")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.HasOne(d => d.Candidate)
                    .WithMany(p => p.CandidatesCandidateInterests)
                    .HasForeignKey(d => d.CandidateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_candidates_candidate_exp_sectors_candidates_candidate_1");

                entity.HasOne(d => d.Interest)
                    .WithMany(p => p.CandidatesCandidateInterests)
                    .HasForeignKey(d => d.InterestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_candidates_candidate_interests_catalogs_interest");
            });

            modelBuilder.Entity<CandidatesCandidateProfession>(entity =>
            {
                entity.ToTable("candidates_candidate_professions");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CandidateId)
                    .HasName("candidates_candidate_professions_da445ead");

                entity.HasIndex(e => e.ProfessionId)
                    .HasName("candidates_candidate_professions_162f386a");

                entity.HasIndex(e => new { e.CandidateId, e.ProfessionId })
                    .HasName("candidates_candidate_professions_candidate_id_00ab6b1f_uniq")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CandidateId)
                    .HasColumnName("candidate_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.ProfessionId)
                    .HasColumnName("profession_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial195)
                    .HasColumnName("TRIAL195")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.HasOne(d => d.Candidate)
                    .WithMany(p => p.CandidatesCandidateProfessions)
                    .HasForeignKey(d => d.CandidateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_candidates_candidate_interests_candidates_candidate_1");
            });

            modelBuilder.Entity<CandidatesEducation>(entity =>
            {
                entity.ToTable("candidates_education");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CandidateId)
                    .HasName("candidates_education_da445ead");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("candidates_education_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("candidates_education_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.ActualStudent)
                    .HasColumnName("actual_student")
                    .HasComment("TRIAL");

                entity.Property(e => e.CandidateId)
                    .HasColumnName("candidate_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CountryId).HasColumnName("country_id");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Discipline)
                    .IsRequired()
                    .HasColumnName("discipline")
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Grade)
                    .IsRequired()
                    .HasColumnName("grade")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.GroupAndActivities)
                    .HasColumnName("group_and_activities")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.Institution)
                    .IsRequired()
                    .HasColumnName("institution")
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameProfession)
                    .HasColumnName("nameProfession")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.StudiedFrom)
                    .HasColumnName("studied_from")
                    .HasColumnType("date")
                    .HasComment("TRIAL");

                entity.Property(e => e.StudiedFromMonth)
                    .IsRequired()
                    .HasColumnName("studied_from_month")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.StudiedFromYear)
                    .IsRequired()
                    .HasColumnName("studied_from_year")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.StudiedTo)
                    .HasColumnName("studied_to")
                    .HasColumnType("date")
                    .HasComment("TRIAL");

                entity.Property(e => e.StudiedToMonth)
                    .HasColumnName("studied_to_month")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.StudiedToYear)
                    .HasColumnName("studied_to_year")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial198)
                    .HasColumnName("TRIAL198")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");

                entity.HasOne(d => d.Candidate)
                    .WithMany(p => p.CandidatesEducations)
                    .HasForeignKey(d => d.CandidateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_candidates_candidate_professions_candidates_candidate_1");
            });

            modelBuilder.Entity<CandidatesGradeProfession>(entity =>
            {
                entity.ToTable("candidatesGradeProfession");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterDate).HasColumnType("date");
            });

            modelBuilder.Entity<CandidatesLanguage>(entity =>
            {
                entity.ToTable("candidates_languages");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CandidateId)
                    .HasName("candidates_languages_da445ead");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("candidates_languages_e93cb7eb");

                entity.HasIndex(e => e.LanguageId)
                    .HasName("candidates_languages_468679bd");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("candidates_languages_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CandidateId)
                    .HasColumnName("candidate_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.LanguageId)
                    .HasColumnName("language_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.OralLevel)
                    .IsRequired()
                    .HasColumnName("oral_level")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial204)
                    .HasColumnName("TRIAL204")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.WrittenLevel)
                    .IsRequired()
                    .HasColumnName("written_level")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.HasOne(d => d.Candidate)
                    .WithMany(p => p.CandidatesLanguages)
                    .HasForeignKey(d => d.CandidateId)
                    .HasConstraintName("fk_candidates_education_candidates_candidate_3");
            });

            modelBuilder.Entity<CandidatesVolunteerexp>(entity =>
            {
                entity.ToTable("candidates_volunteerexp");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CandidateId)
                    .HasName("candidates_volunteerexp_da445ead");

                entity.HasIndex(e => e.CauseId)
                    .HasName("candidates_volunteerexp_03c508fc");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("candidates_volunteerexp_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("candidates_volunteerexp_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.ActualVolunteer)
                    .HasColumnName("actual_volunteer")
                    .HasComment("TRIAL");

                entity.Property(e => e.CandidateId)
                    .HasColumnName("candidate_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CauseId)
                    .HasColumnName("cause_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial208)
                    .HasColumnName("TRIAL208")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.VolunteerFrom)
                    .HasColumnName("volunteer_from")
                    .HasColumnType("date")
                    .HasComment("TRIAL");

                entity.Property(e => e.VolunteerFromMonth)
                    .IsRequired()
                    .HasColumnName("volunteer_from_month")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.VolunteerFromYear)
                    .IsRequired()
                    .HasColumnName("volunteer_from_year")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.VolunteerFunction)
                    .IsRequired()
                    .HasColumnName("volunteer_function")
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.VolunteerTo)
                    .HasColumnName("volunteer_to")
                    .HasColumnType("date")
                    .HasComment("TRIAL");

                entity.Property(e => e.VolunteerToMonth)
                    .HasColumnName("volunteer_to_month")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.VolunteerToYear)
                    .HasColumnName("volunteer_to_year")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.HasOne(d => d.Candidate)
                    .WithMany(p => p.CandidatesVolunteerexps)
                    .HasForeignKey(d => d.CandidateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_candidates_languages_candidates_candidate_1");
            });

            modelBuilder.Entity<CandidatesWorkandsocialexp>(entity =>
            {
                entity.ToTable("candidates_workandsocialexp");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CandidateId)
                    .HasName("candidates_workandsocialexp_da445ead");

                entity.HasIndex(e => e.CountryId)
                    .HasName("candidates_workandsocialexp_93bfec8a");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("candidates_workandsocialexp_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("candidates_workandsocialexp_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.ActualJob)
                    .HasColumnName("actual_job")
                    .HasComment("TRIAL");

                entity.Property(e => e.CandidateId)
                    .HasColumnName("candidate_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.CountryId)
                    .HasColumnName("country_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.PositiveImpact)
                    .HasColumnName("positive_impact")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Volunteering).HasColumnName("volunteering");

                entity.Property(e => e.WorkFrom)
                    .HasColumnName("work_from")
                    .HasColumnType("date")
                    .HasComment("TRIAL");

                entity.Property(e => e.WorkFromMonth)
                    .IsRequired()
                    .HasColumnName("work_from_month")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.WorkFromYear)
                    .IsRequired()
                    .HasColumnName("work_from_year")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.WorkTo)
                    .HasColumnName("work_to")
                    .HasColumnType("date")
                    .HasComment("TRIAL");

                entity.Property(e => e.WorkToMonth)
                    .HasColumnName("work_to_month")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.WorkToYear)
                    .HasColumnName("work_to_year")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.HasOne(d => d.Candidate)
                    .WithMany(p => p.CandidatesWorkandsocialexps)
                    .HasForeignKey(d => d.CandidateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_candidates_volunteerexp_candidates_candidate_2");
            });

            modelBuilder.Entity<CatalogOralLevel>(entity =>
            {
                entity.ToTable("Catalog_OralLevel");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NameEn)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CatalogWrittenLevel>(entity =>
            {
                entity.ToTable("Catalog_writtenLevel");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NameEn)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CatalogsAdchannel>(entity =>
            {
                entity.ToTable("catalogs_adchannels");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("catalogs_adchannels_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("catalogs_adchannels_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CatalogsAreaOpening>(entity =>
            {
                entity.ToTable("Catalogs_AreaOpening");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(90)
                    .IsUnicode(false);

                entity.Property(e => e.NameEn)
                    .IsRequired()
                    .HasColumnName("name_en")
                    .HasMaxLength(90)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .IsRequired()
                    .HasColumnName("name_pt")
                    .HasMaxLength(90)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CatalogsCareer>(entity =>
            {
                entity.ToTable("catalogs_career");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("catalogs_career_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("catalogs_career_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CatalogsCause>(entity =>
            {
                entity.ToTable("catalogs_cause");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("catalogs_cause_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("catalogs_cause_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CatalogsCompanyservice>(entity =>
            {
                entity.ToTable("catalogs_companyservice");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("catalogs_companyservice_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("catalogs_companyservice_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CatalogsCompanytype>(entity =>
            {
                entity.ToTable("catalogs_companytype");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("catalogs_companytype_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("catalogs_companytype_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CatalogsCountry>(entity =>
            {
                entity.ToTable("catalogs_country");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("catalogs_country_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("catalogs_country_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Abreviation)
                    .HasColumnName("abreviation")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.AmountMoney)
                    .HasColumnName("amountMoney")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CodeCountry)
                    .HasColumnName("codeCountry")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CurrencyId).HasColumnName("currencyId");

                entity.Property(e => e.Image)
                    .HasColumnName("image")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.CatalogsCountries)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_catalogs_country_catalogs_currency");
            });

            modelBuilder.Entity<CatalogsCurrency>(entity =>
            {
                entity.ToTable("catalogs_currency");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("catalogs_currency_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("catalogs_currency_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Abreviation)
                    .IsRequired()
                    .HasColumnName("abreviation")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CatalogsExparea>(entity =>
            {
                entity.ToTable("catalogs_exparea");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("catalogs_exparea_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("catalogs_exparea_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEn)
                    .IsRequired()
                    .HasColumnName("name_en")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NamePt)
                    .IsRequired()
                    .HasColumnName("name_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CatalogsExpsector>(entity =>
            {
                entity.ToTable("catalogs_expsector");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("catalogs_expsector_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("catalogs_expsector_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEn)
                    .IsRequired()
                    .HasColumnName("name_en")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NamePt)
                    .IsRequired()
                    .HasColumnName("name_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CatalogsGrade>(entity =>
            {
                entity.ToTable("Catalogs_grade");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NameEn)
                    .HasColumnName("nameEn")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasColumnName("namePt")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CatalogsInterest>(entity =>
            {
                entity.ToTable("catalogs_interest");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("catalogs_interest_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("catalogs_interest_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEn)
                    .IsRequired()
                    .HasColumnName("name_en")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NamePt)
                    .IsRequired()
                    .HasColumnName("name_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CatalogsLanguage>(entity =>
            {
                entity.ToTable("catalogs_language");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("catalogs_language_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("catalogs_language_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CatalogsMailcontent>(entity =>
            {
                entity.ToTable("catalogs_mailcontent");

                entity.HasComment("TRIAL");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Content)
                    .IsRequired()
                    .HasColumnName("content")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.ContentEn)
                    .HasColumnName("content_en")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasColumnName("subject")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.SubjectEn)
                    .HasColumnName("subject_en")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.TitleEn)
                    .HasColumnName("title_en")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CatalogsNotificationtype>(entity =>
            {
                entity.ToTable("catalogs_notificationtype");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("catalogs_notificationtype_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("catalogs_notificationtype_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CatalogsOcctimeinterval>(entity =>
            {
                entity.ToTable("catalogs_occtimeinterval");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("catalogs_occtimeinterval_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("catalogs_occtimeinterval_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEng)
                    .IsRequired()
                    .HasColumnName("name_eng")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.TimeDays)
                    .HasColumnName("time_days")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CatalogsOpeningclass>(entity =>
            {
                entity.ToTable("catalogs_openingclass");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("catalogs_openingclass_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("catalogs_openingclass_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameAcr)
                    .IsRequired()
                    .HasColumnName("name_acr")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEng)
                    .HasColumnName("name_eng")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CatalogsOpeningphase>(entity =>
            {
                entity.ToTable("catalogs_openingphase");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("catalogs_openingphase_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("catalogs_openingphase_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CatalogsOpeningservice>(entity =>
            {
                entity.ToTable("catalogs_openingservice");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("catalogs_openingservice_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("catalogs_openingservice_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CatalogsProfession>(entity =>
            {
                entity.ToTable("catalogs_profession");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("catalogs_profession_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("catalogs_profession_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEn)
                    .IsRequired()
                    .HasColumnName("name_en")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NamePt)
                    .IsRequired()
                    .HasColumnName("name_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CatalogsState>(entity =>
            {
                entity.ToTable("catalogs_state");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CountryId)
                    .HasName("catalogs_state_93bfec8a");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("catalogs_state_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("catalogs_state_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CountryId)
                    .HasColumnName("country_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CatalogsStatus>(entity =>
            {
                entity.ToTable("Catalogs_Status");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatalogsTypeContract>(entity =>
            {
                entity.ToTable("Catalogs_typeContract");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(90)
                    .IsUnicode(false);

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasMaxLength(90)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(90)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CompaniesCompany>(entity =>
            {
                entity.ToTable("companies_company");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CompanyTypeId).HasName("companies_company_067bfe8b");

                entity.HasIndex(e => e.ServicesRegisterId).HasName("companies_company_55b35817");

                entity.HasIndex(e => e.HowHearAboutUsId).HasName("companies_company_6bb9cf3d");

                entity.HasIndex(e => e.CountryId).HasName("companies_company_93bfec8a");

                entity.HasIndex(e => e.UpdatedById).HasName("companies_company_9ccf0ba6");

                entity.HasIndex(e => e.ConsultantId).HasName("companies_company_ca2bd156");

                entity.HasIndex(e => e.BillingCountryId).HasName("companies_company_cb6ff335");

                entity.HasIndex(e => e.UserId).HasName("companies_company_e8701ad4");

                entity.HasIndex(e => e.CreatedById).HasName("companies_company_e93cb7eb");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.BillingAddress)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("billing_address")
                    .HasComment("TRIAL");

                entity.Property(e => e.BillingCity)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("billing_city")
                    .HasComment("TRIAL");

                entity.Property(e => e.BillingCountryId)
                    .HasColumnName("billing_country_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.BillingName)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("billing_name")
                    .HasComment("TRIAL");

                entity.Property(e => e.BillingNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("billing_number")
                    .HasComment("TRIAL");

                entity.Property(e => e.BillingPhoneNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("billing_phone_number")
                    .HasComment("TRIAL");

                entity.Property(e => e.City)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("city")
                    .HasComment("TRIAL");

                entity.Property(e => e.CompanyTypeId)
                    .HasColumnName("company_type_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.ConsultantId)
                    .HasColumnName("consultant_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.ContactCellphoneNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("contact_cellphone_number")
                    .HasComment("TRIAL");

                entity.Property(e => e.ContactEmail)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("contact_email")
                    .HasComment("TRIAL");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("contact_name")
                    .HasComment("TRIAL");

                entity.Property(e => e.ContactPhoneNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("contact_phone_number")
                    .HasComment("TRIAL");

                entity.Property(e => e.CountryId)
                    .HasColumnName("country_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CustomUrl)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("custom_url")
                    .HasComment("TRIAL");

                entity.Property(e => e.Description)
                    .HasColumnType("text")
                    .HasColumnName("description")
                    .HasComment("TRIAL");

                entity.Property(e => e.FromTcs)
                    .HasColumnName("from_tcs")
                    .HasComment("TRIAL");

                entity.Property(e => e.FromTcsMailSent)
                    .HasColumnName("from_tcs_mail_sent")
                    .HasComment("TRIAL");

                entity.Property(e => e.HeightField)
                    .HasColumnName("height_field")
                    .HasComment("TRIAL");

                entity.Property(e => e.HowDidYouFindOut)
                    .HasColumnType("text")
                    .HasColumnName("howDidYouFindOut");

                entity.Property(e => e.HowHearAboutUsId)
                    .HasColumnName("how_hear_about_us_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Logo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("logo")
                    .HasComment("TRIAL");

                entity.Property(e => e.MailNewCandidates)
                    .HasColumnName("mail_new_candidates")
                    .HasComment("TRIAL");

                entity.Property(e => e.MailOpeningsEnding)
                    .HasColumnName("mail_openings_ending")
                    .HasComment("TRIAL");

                entity.Property(e => e.MailSiteImprovements)
                    .HasColumnName("mail_site_improvements")
                    .HasComment("TRIAL");

                entity.Property(e => e.MailUpdatesNewsMatteria)
                    .HasColumnName("mail_updates_news_matteria")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("name")
                    .HasComment("TRIAL");

                entity.Property(e => e.Other)
                    .HasColumnType("text")
                    .HasColumnName("other")
                    .HasComment("TRIAL");

                entity.Property(e => e.OurAdn)
                    .HasColumnType("text")
                    .HasColumnName("ourADN");

                entity.Property(e => e.OurImpactinfo)
                    .HasColumnType("text")
                    .HasColumnName("our_impactinfo")
                    .HasComment("TRIAL");

                entity.Property(e => e.ServicesRegisterId)
                    .HasColumnName("services_register_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.SocialFacebook)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("social_facebook")
                    .HasComment("TRIAL");

                entity.Property(e => e.SocialInstagram)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("social_instagram")
                    .HasComment("TRIAL");

                entity.Property(e => e.SocialLinkedin)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("social_linkedin")
                    .HasComment("TRIAL");

                entity.Property(e => e.SocialTwitter)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("social_twitter")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.StatusCompany)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("status_company")
                    .HasComment("TRIAL");

                entity.Property(e => e.TermsPolitics)
                    .HasColumnName("terms_politics")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnType("datetime")
                    .HasColumnName("timestamp")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .HasColumnName("updated")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.UserConsultorId).HasColumnName("userConsultorId");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Website)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("website")
                    .HasComment("TRIAL");

                entity.Property(e => e.WidthField)
                    .HasColumnName("width_field")
                    .HasComment("TRIAL");

                entity.HasOne(d => d.CompanyType)
                    .WithMany(p => p.CompaniesCompanies)
                    .HasForeignKey(d => d.CompanyTypeId)
                    .HasConstraintName("FK_companies_company_catalogs_companytype");

                entity.HasOne(d => d.Consultant)
                    .WithMany(p => p.CompaniesCompanies)
                    .HasForeignKey(d => d.ConsultantId)
                    .HasConstraintName("fk_catalogs_state_consultants_consultant_1");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.CompaniesCompanies)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_companies_company_catalogs_country");

                entity.HasOne(d => d.UserConsultor)
                    .WithMany(p => p.CompaniesCompanyUserConsultors)
                    .HasForeignKey(d => d.UserConsultorId)
                    .HasConstraintName("FK_companies_company_auth_user1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CompaniesCompanyUsers)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_companies_company_auth_user");
            });

            modelBuilder.Entity<CompaniesCompanyService>(entity =>
            {
                entity.ToTable("companies_company_services");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CompanyId)
                    .HasName("companies_company_services_447d3092");

                entity.HasIndex(e => e.CompanyserviceId)
                    .HasName("companies_company_services_1db931e6");

                entity.HasIndex(e => new { e.CompanyId, e.CompanyserviceId })
                    .HasName("companies_company_services_company_id_405c1c0a_uniq")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CompanyId)
                    .HasColumnName("company_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CompanyserviceId)
                    .HasColumnName("companyservice_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial250)
                    .HasColumnName("TRIAL250")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<CompaniesCompanyuser>(entity =>
            {
                entity.ToTable("companies_companyuser");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CompanyId)
                    .HasName("companies_companyuser_447d3092");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("companies_companyuser_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("companies_companyuser_9ccf0ba6");

                entity.HasIndex(e => e.UserId)
                    .HasName("companies_companyuser_e8701ad4");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CellphoneNumber)
                    .IsRequired()
                    .HasColumnName("cellphone_number")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.CompanyId)
                    .HasColumnName("company_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasColumnName("phone_number")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial250)
                    .HasColumnName("TRIAL250")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<ComprasPaquete>(entity =>
            {

                entity.ToTable("ComprasPaquetes");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.IdProducto).HasColumnName("Id_Producto");

                entity.Property(e => e.IdStatus).HasColumnName("Id_Status");

                entity.HasOne(d => d.IdProductoNavigation)
                    .WithMany(p => p.ComprasPaquetes)
                    .HasForeignKey(d => d.IdProducto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ComprasPaquetes_FrontContentVacantesPaquetes");

                entity.HasOne(d => d.IdStatusNavigation)
                    .WithMany(p => p.ComprasPaquetes)
                    .HasForeignKey(d => d.IdStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ComprasPaquetes_EstatusVacantes");

                entity.HasOne(d => d.MetodoPago)
                    .WithMany(p => p.ComprasPaquetes)
                    .HasForeignKey(d => d.MetodoPagoId)
                    .HasConstraintName("FK_ComprasPaquetes_MetodosPago");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ComprasPaquetes)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_ComprasPaquetes_auth_user");
            });

            modelBuilder.Entity<ConsultantsAdminuser>(entity =>
            {
                entity.ToTable("consultants_adminuser");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("consultants_adminuser_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("consultants_adminuser_9ccf0ba6");

                entity.HasIndex(e => e.UserId)
                    .HasName("consultants_adminuser_e8701ad4");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Avatar)
                    .HasColumnName("avatar")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Birthday)
                    .HasColumnName("birthday")
                    .HasColumnType("date")
                    .HasComment("TRIAL");

                entity.Property(e => e.CellphoneNumber)
                    .HasColumnName("cellphone_number")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.HeightField)
                    .HasColumnName("height_field")
                    .HasComment("TRIAL");

                entity.Property(e => e.IdNumber)
                    .HasColumnName("ID_number")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Languages)
                    .HasColumnName("languages")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.Linkedin)
                    .HasColumnName("linkedin")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.PhoneNumber)
                    .HasColumnName("phone_number")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.PositionTeam)
                    .HasColumnName("position_team")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial250)
                    .HasColumnName("TRIAL250")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.Property(e => e.Twitter)
                    .HasColumnName("twitter")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.WidthField)
                    .HasColumnName("width_field")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<ConsultantsConsultant>(entity =>
            {
                entity.ToTable("consultants_consultant");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("consultants_consultant_e93cb7eb");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("consultants_consultant_9ccf0ba6");

                entity.HasIndex(e => e.UserId)
                    .HasName("consultants_consultant_e8701ad4");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Avatar)
                    .HasColumnName("avatar")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Birthday)
                    .HasColumnName("birthday")
                    .HasColumnType("date")
                    .HasComment("TRIAL");

                entity.Property(e => e.Candidates)
                    .HasColumnName("candidates")
                    .HasComment("TRIAL");

                entity.Property(e => e.CellphoneNumber)
                    .HasColumnName("cellphone_number")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Companies)
                    .HasColumnName("companies")
                    .HasComment("TRIAL");

                entity.Property(e => e.Consultants)
                    .HasColumnName("consultants")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.HeightField)
                    .HasColumnName("height_field")
                    .HasComment("TRIAL");

                entity.Property(e => e.IdNumber)
                    .HasColumnName("ID_number")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Languages)
                    .HasColumnName("languages")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.Linkedin)
                    .HasColumnName("linkedin")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Openings)
                    .HasColumnName("openings")
                    .HasComment("TRIAL");

                entity.Property(e => e.PhoneNumber)
                    .HasColumnName("phone_number")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.PositionTeam)
                    .HasColumnName("position_team")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial250)
                    .HasColumnName("TRIAL250")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.Property(e => e.Twitter)
                    .HasColumnName("twitter")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.WidthField)
                    .HasColumnName("width_field")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<ContactsCompany>(entity =>
            {
                entity.ToTable("ContactsCompany");

                entity.Property(e => e.Email)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.NameCompany)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Respuesta).HasColumnType("text");
            });

            modelBuilder.Entity<ContactsContact>(entity =>
            {
                entity.ToTable("ContactsContact");

                entity.Property(e => e.Comments).HasColumnType("text");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Respuesta).HasColumnType("text");
            });

            modelBuilder.Entity<ContactsGeneral>(entity =>
            {
                entity.ToTable("ContactsGeneral");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasColumnType("text");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("email")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.NameCompany)
                    .HasColumnName("nameCompany")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasColumnName("phone")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Respuesta).HasColumnType("text");

                entity.Property(e => e.Type).HasColumnName("type");
            });

            modelBuilder.Entity<ContactsMai>(entity =>
            {
                entity.ToTable("ContactsMAI");

                entity.Property(e => e.Email)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Respuesta).HasColumnType("text");
            });

            modelBuilder.Entity<Credito>(entity =>
            {
                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DateHighOpening).HasColumnType("datetime");

                entity.Property(e => e.IdCompany).HasColumnName("Id_Company");

                entity.Property(e => e.IdCompra).HasColumnName("Id_Compra");

                entity.Property(e => e.IdEstatus).HasColumnName("Id_Estatus");

                entity.Property(e => e.IdOpening).HasColumnName("Id_Opening");

                entity.Property(e => e.IdProducto).HasColumnName("Id_Producto");

                entity.HasOne(d => d.IdCompanyNavigation)
                    .WithMany(p => p.Creditos)
                    .HasForeignKey(d => d.IdCompany)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Creditos_companies_company");

                entity.HasOne(d => d.IdCompraNavigation)
                    .WithMany(p => p.Creditos)
                    .HasForeignKey(d => d.IdCompra)
                    .HasConstraintName("FK_Creditos_Creditos");

                entity.HasOne(d => d.IdEstatusNavigation)
                    .WithMany(p => p.Creditos)
                    .HasForeignKey(d => d.IdEstatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Creditos_EstatusVacantes");

                entity.HasOne(d => d.IdOpeningNavigation)
                    .WithMany(p => p.Creditos)
                    .HasForeignKey(d => d.IdOpening)
                    .HasConstraintName("FK_Creditos_openings_opening");

                entity.HasOne(d => d.IdProductoNavigation)
                    .WithMany(p => p.Creditos)
                    .HasForeignKey(d => d.IdProducto)
                    .HasConstraintName("FK_Creditos_FrontContentVacantesPaquetes");
            });

            modelBuilder.Entity<DjangoContentType>(entity =>
            {
                entity.ToTable("django_content_type");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => new { e.AppLabel, e.Model })
                    .HasName("django_content_type_app_label_76bd3d3b_uniq")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.AppLabel)
                    .IsRequired()
                    .HasColumnName("app_label")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasColumnName("model")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial260)
                    .HasColumnName("TRIAL260")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<EstatusGenerale>(entity =>
            {

                entity.ToTable("EstatusGenerales");
                entity.Property(e => e.Color)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<EstatusVacantesProceso>(entity =>
            {
                entity.ToTable("EstatusVacantesProceso");

                entity.Property(e => e.Color)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<EstatusVacante>(entity =>
            {
                entity.Property(e => e.Color)
                    .HasColumnName("color")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Type).HasColumnName("type");
            });


            modelBuilder.Entity<ContactoGeneralConfiguracion>(entity =>
            {
                entity.ToTable("ContactoGeneralConfiguracion");

                entity.Property(e => e.Boton)
                    .HasColumnType("text")
                    .HasColumnName("boton");

                entity.Property(e => e.BotonEn)
                    .HasColumnType("text")
                    .HasColumnName("boton_en");

                entity.Property(e => e.BotonEnviar)
                    .HasColumnType("text")
                    .HasColumnName("botonEnviar");

                entity.Property(e => e.BotonEnviarEn)
                    .HasColumnType("text")
                    .HasColumnName("botonEnviar_en");

                entity.Property(e => e.BotonEnviarPt)
                    .HasColumnType("text")
                    .HasColumnName("botonEnviar_pt");

                entity.Property(e => e.BotonPt)
                    .HasColumnType("text")
                    .HasColumnName("boton_pt");

                entity.Property(e => e.Comentarios)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("comentarios");

                entity.Property(e => e.ComentariosEn)
                    .HasColumnType("text")
                    .HasColumnName("comentarios_en");

                entity.Property(e => e.ComentariosHolder)
                    .HasColumnType("text")
                    .HasColumnName("comentariosHolder");

                entity.Property(e => e.ComentariosHolderEn)
                    .HasColumnType("text")
                    .HasColumnName("comentariosHolder_en");

                entity.Property(e => e.ComentariosHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("comentariosHolder_pt");

                entity.Property(e => e.ComentariosPt)
                    .HasColumnType("text")
                    .HasColumnName("comentarios_pt");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.EmailEn)
                    .HasColumnType("text")
                    .HasColumnName("Email_en");

                entity.Property(e => e.EmailHolder)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.EmailHolderEn)
                    .HasColumnType("text")
                    .HasColumnName("EmailHolder_en");

                entity.Property(e => e.EmailHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("EmailHolder_pt");

                entity.Property(e => e.EmailPt)
                    .HasColumnType("text")
                    .HasColumnName("Email_pt");

                entity.Property(e => e.LabelTelefono)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("labelTelefono");

                entity.Property(e => e.LabelTelefonoEn)
                    .HasColumnType("text")
                    .HasColumnName("labelTelefono_en");

                entity.Property(e => e.LabelTelefonoPt)
                    .HasColumnType("text")
                    .HasColumnName("labelTelefono_pt");

                entity.Property(e => e.Mensaje)
                    .HasColumnType("text")
                    .HasColumnName("mensaje");

                entity.Property(e => e.MensajeEn)
                    .HasColumnType("text")
                    .HasColumnName("mensaje_en");

                entity.Property(e => e.MensajePt)
                    .HasColumnType("text")
                    .HasColumnName("mensaje_pt");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("name");

                entity.Property(e => e.NameEn)
                    .HasColumnType("text")
                    .HasColumnName("name_en");

                entity.Property(e => e.NameHolder)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("nameHolder");

                entity.Property(e => e.NameHolderEn)
                    .HasColumnType("text")
                    .HasColumnName("nameHolder_en");

                entity.Property(e => e.NameHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("nameHolder_pt");

                entity.Property(e => e.NamePt)
                    .HasColumnType("text")
                    .HasColumnName("name_pt");

                entity.Property(e => e.OrganizacionPertenece)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.OrganizacionPerteneceEn)
                    .HasColumnType("text")
                    .HasColumnName("OrganizacionPertenece_en");

                entity.Property(e => e.OrganizacionPerteneceHoderEn)
                    .HasColumnType("text")
                    .HasColumnName("OrganizacionPerteneceHoder_en");

                entity.Property(e => e.OrganizacionPerteneceHolder)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.OrganizacionPerteneceHolderPt)
                    .HasColumnType("text")
                    .HasColumnName("OrganizacionPerteneceHolder_pt");

                entity.Property(e => e.OrganizacionPertenecePt)
                    .HasColumnType("text")
                    .HasColumnName("OrganizacionPertenece_pt");

                entity.Property(e => e.SmallRequired)
                    .HasColumnType("text")
                    .HasColumnName("smallRequired");

                entity.Property(e => e.SmallRequiredEn)
                    .HasColumnType("text")
                    .HasColumnName("smallRequired_en");

                entity.Property(e => e.SmallRequiredPt)
                    .HasColumnType("text")
                    .HasColumnName("smallRequired_pt");

                entity.Property(e => e.SoyOrganizacion)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("soyOrganizacion");

                entity.Property(e => e.SoyOrganizacionEn)
                    .HasColumnType("text")
                    .HasColumnName("soyOrganizacion_en");

                entity.Property(e => e.SoyOrganizacionPt)
                    .HasColumnType("text")
                    .HasColumnName("soyOrganizacion_pt");

                entity.Property(e => e.SoyPostulante)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("soyPostulante");

                entity.Property(e => e.SoyPostulanteEn)
                    .HasColumnType("text")
                    .HasColumnName("soyPostulante_en");

                entity.Property(e => e.SoyPostulantePt)
                    .HasColumnType("text")
                    .HasColumnName("soyPostulante_pt");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("title");

                entity.Property(e => e.TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("title_en");

                entity.Property(e => e.TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("title_pt");
            });

            modelBuilder.Entity<FontContentContenidoRecursosBlog>(entity =>
            {
                entity.ToTable("FontContent_ContenidoRecursosBlog");

                entity.Property(e => e.Description)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.DescriptionEn)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("description_en");

                entity.Property(e => e.DescriptionPt)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("description_pt");

                entity.Property(e => e.Image)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("image");

                entity.Property(e => e.LblActualidad)
                    .HasColumnType("text")
                    .HasColumnName("lblActualidad");

                entity.Property(e => e.LblActualidadEn)
                    .HasColumnType("text")
                    .HasColumnName("lblActualidad_en");

                entity.Property(e => e.LblActualidadPt)
                    .HasColumnType("text")
                    .HasColumnName("lblActualidad_pt");

                entity.Property(e => e.LeerMas)
                    .HasColumnType("text")
                    .HasColumnName("leerMas");

                entity.Property(e => e.LeerMasEn)
                    .HasColumnType("text")
                    .HasColumnName("leerMas_en");

                entity.Property(e => e.LeerMasPt)
                    .HasColumnType("text")
                    .HasColumnName("leerMas_pt");

                entity.Property(e => e.RegistrationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("registrationDate");

                entity.Property(e => e.TextActualidad)
                    .HasColumnType("text")
                    .HasColumnName("textActualidad");

                entity.Property(e => e.TextActualidadEn)
                    .HasColumnType("text")
                    .HasColumnName("textActualidad_en");

                entity.Property(e => e.TextActualidadPt)
                    .HasColumnType("text")
                    .HasColumnName("textActualidad_pt");

                entity.Property(e => e.Title)
                    .HasMaxLength(180)
                    .IsUnicode(false)
                    .HasColumnName("title");

                entity.Property(e => e.TitleBlog)
                    .HasColumnType("text")
                    .HasColumnName("titleBlog");

                entity.Property(e => e.TitleBlogPt)
                    .HasColumnType("text")
                    .HasColumnName("titleBlog_pt");

                entity.Property(e => e.TitleBogEn)
                    .HasColumnType("text")
                    .HasColumnName("titleBog_en");

                entity.Property(e => e.TitleConsejosOrgEn)
                    .HasColumnType("text")
                    .HasColumnName("titleConsejosOrg_en");

                entity.Property(e => e.TitleConsejosOrgPt)
                    .HasColumnType("text")
                    .HasColumnName("titleConsejosOrg_pt");

                entity.Property(e => e.TitleConsejosPostulante)
                    .HasColumnType("text")
                    .HasColumnName("titleConsejosPostulante");

                entity.Property(e => e.TitleConsejosPostulanteEn)
                    .HasColumnType("text")
                    .HasColumnName("titleConsejosPostulante_en");

                entity.Property(e => e.TitleConsejosPostulantePt)
                    .HasColumnType("text")
                    .HasColumnName("titleConsejosPostulante_pt");

                entity.Property(e => e.TitleContenido)
                    .HasColumnType("text")
                    .HasColumnName("titleContenido");

                entity.Property(e => e.TitleContenidoEn)
                    .HasColumnType("text")
                    .HasColumnName("titleContenido_en");

                entity.Property(e => e.TitleContenidoPt)
                    .HasColumnType("text")
                    .HasColumnName("titleContenido_pt");

                entity.Property(e => e.TitleCosejosOrg)
                    .HasColumnType("text")
                    .HasColumnName("titleCosejosOrg");

                entity.Property(e => e.TitleEn)
                    .IsRequired()
                    .HasMaxLength(180)
                    .IsUnicode(false)
                    .HasColumnName("title_en");

                entity.Property(e => e.TitlePt)
                    .IsRequired()
                    .HasMaxLength(180)
                    .IsUnicode(false)
                    .HasColumnName("title_pt");
            });


            modelBuilder.Entity<FrontContentPoliticasPrivacidad>(entity =>
            {
                entity.ToTable("FrontContent_PoliticasPrivacidad");

                entity.Property(e => e.Contenido)
                    .IsRequired()
                    .HasColumnName("contenido")
                    .HasColumnType("text");

                entity.Property(e => e.ContenidoEn)
                    .HasColumnName("contenido_en")
                    .HasColumnType("text");

                entity.Property(e => e.ContenidoPt)
                    .HasColumnName("contenido_pt")
                    .HasColumnType("text");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<FrontContentAnswer>(entity =>
            {
                entity.ToTable("FrontContent_answers");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PreguntaId).HasColumnName("preguntaId");

                entity.Property(e => e.Respuesta)
                    .HasColumnName("respuesta")
                    .HasColumnType("text");

                entity.Property(e => e.RespuestaEn)
                    .IsRequired()
                    .HasColumnName("respuesta_en")
                    .HasColumnType("text");

                entity.Property(e => e.RespuestaPt)
                    .IsRequired()
                    .HasColumnName("respuesta_pt")
                    .HasColumnType("text");

                entity.HasOne(d => d.Pregunta)
                    .WithMany(p => p.FrontContentAnswers)
                    .HasForeignKey(d => d.PreguntaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrontContent_answers_FrontContent_answers");
            });

            modelBuilder.Entity<FrontContentAdnHeader>(entity =>
            {
                entity.ToTable("FrontContent_ADN_Header");

                entity.Property(e => e.BtnDownload)
                    .HasColumnType("text")
                    .HasColumnName("btnDownload");

                entity.Property(e => e.BtnDownloadEn)
                    .HasColumnType("text")
                    .HasColumnName("btnDownload_en");

                entity.Property(e => e.BtnDownloadPt)
                    .HasColumnType("text")
                    .HasColumnName("btnDownload_pt");

                entity.Property(e => e.Description)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.DescriptionEn)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("description_en");

                entity.Property(e => e.DescriptionPt)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("description_pt");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(280)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("title");

                entity.Property(e => e.TitleEn)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("title_en");

                entity.Property(e => e.TitlePt)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("title_pt");
            });

            modelBuilder.Entity<FrontContentAssessment>(entity =>
            {
                entity.ToTable("FrontContent_Assessment");

                entity.Property(e => e.BtnDownload)
                    .HasColumnType("text")
                    .HasColumnName("btnDownload");

                entity.Property(e => e.BtnDownloadEn)
                    .HasColumnType("text")
                    .HasColumnName("btnDownload_en");

                entity.Property(e => e.BtnDownloadPt)
                    .HasColumnType("text")
                    .HasColumnName("btnDownload_pt");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.DescriptionEn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("description_en");

                entity.Property(e => e.DescriptionPt)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("description_pt");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(280)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(180)
                    .IsUnicode(false)
                    .HasColumnName("title");

                entity.Property(e => e.TitleComoFunciona)
                    .HasColumnType("text")
                    .HasColumnName("titleComoFunciona");

                entity.Property(e => e.TitleComoFuncionaEn)
                    .HasColumnType("text")
                    .HasColumnName("titleComoFunciona_en");

                entity.Property(e => e.TitleComoFuncionaPt)
                    .HasColumnType("text")
                    .HasColumnName("titleComoFunciona_pt");

                entity.Property(e => e.TitleEn)
                    .HasMaxLength(180)
                    .IsUnicode(false)
                    .HasColumnName("title_en");

                entity.Property(e => e.TitlePt)
                    .HasMaxLength(180)
                    .IsUnicode(false)
                    .HasColumnName("title_pt");
            });

            modelBuilder.Entity<FrontContentBeneficiosAdn>(entity =>
            {
                entity.ToTable("FrontContent_beneficios_ADN");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("description_en")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TitleEn)
                    .HasColumnName("title_en")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TitlePt)
                    .HasColumnName("title_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FrontContentComofuncionaAssessment>(entity =>
            {
                entity.ToTable("FrontContent_comofunciona_assessment");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasColumnName("image")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TitleEn)
                    .HasColumnName("title_en")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TitlePt)
                    .HasColumnName("title_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FrontContentComofuncionaAssessmentDetail>(entity =>
            {
                entity.ToTable("FrontContent_comofunciona_assessment_detail");

                entity.Property(e => e.ComoAssessmentId).HasColumnName("comoAssessmentId");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.ComoAssessment)
                    .WithMany(p => p.FrontContentComofuncionaAssessmentDetails)
                    .HasForeignKey(d => d.ComoAssessmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrontContent_comofunciona_assessment_detail_FrontContent_comofunciona_assessment");
            });

            modelBuilder.Entity<FrontContentComofuncionaDetailOnboarding>(entity =>
            {
                entity.ToTable("FrontContent_comofunciona_detail_onboarding");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(280)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("description_en")
                    .HasMaxLength(280)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasMaxLength(280)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderonboardingId).HasColumnName("headeronboardingId");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(180)
                    .IsUnicode(false);

                entity.Property(e => e.TitleEn)
                    .HasColumnName("title_en")
                    .HasMaxLength(180)
                    .IsUnicode(false);

                entity.Property(e => e.TitlePt)
                    .HasColumnName("title_pt")
                    .HasMaxLength(180)
                    .IsUnicode(false);

                entity.HasOne(d => d.Headeronboarding)
                    .WithMany(p => p.FrontContentComofuncionaDetailOnboardings)
                    .HasForeignKey(d => d.HeaderonboardingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrontContent_comofunciona_detail_onboarding_FrontContent_comofunciona_detail_onboarding");
            });

            modelBuilder.Entity<FrontContentEnqueconsisteAdn>(entity =>
            {
                entity.ToTable("FrontContent_enqueconsiste_ADN");

                entity.Property(e => e.AdnHeaderId).HasColumnName("adnHeaderId");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(230)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .IsRequired()
                    .HasColumnName("description_en")
                    .HasMaxLength(230)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionPt)
                    .IsRequired()
                    .HasColumnName("description_pt")
                    .HasMaxLength(230)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.TileEn)
                    .IsRequired()
                    .HasColumnName("tile_en")
                    .HasMaxLength(180)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(180)
                    .IsUnicode(false);

                entity.Property(e => e.TitlePt)
                    .IsRequired()
                    .HasColumnName("title_pt")
                    .HasMaxLength(180)
                    .IsUnicode(false);

                entity.HasOne(d => d.AdnHeader)
                    .WithMany(p => p.FrontContentEnqueconsisteAdns)
                    .HasForeignKey(d => d.AdnHeaderId)
                    .HasConstraintName("FK_FrontContent_enqueconsiste_ADN_FrontContent_enqueconsiste_ADN_Header");
            });

            modelBuilder.Entity<FrontContentEnqueconsisteAdnHeader>(entity =>
            {
                entity.ToTable("FrontContent_enqueconsiste_ADN_Header");

                entity.Property(e => e.Image)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("image");

                entity.Property(e => e.LblEnqueConsiste)
                    .HasColumnType("text")
                    .HasColumnName("lblEnqueConsiste");

                entity.Property(e => e.LblEnqueConsisteEn)
                    .HasColumnType("text")
                    .HasColumnName("lblEnqueConsiste_en");

                entity.Property(e => e.LblEnqueConsistePt)
                    .HasColumnType("text")
                    .HasColumnName("lblEnqueConsiste_pt");

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<FrontContentManagerAliado>(entity =>
            {
                entity.ToTable("FrontContentManager_aliados");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_aliados_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_aliados_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.AliadoUrl)
                    .HasColumnName("aliado_url")
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("descripcion")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescripcionEn)
                    .IsRequired()
                    .HasColumnName("descripcion_en")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.Empresa)
                    .IsRequired()
                    .HasColumnName("empresa")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Imagen)
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial123)
                    .HasColumnName("TRIAL123")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });




            modelBuilder.Entity<NewsletterPostulantFrontConfiguration>(entity =>
            {
                entity.ToTable("newsletterPostulantFrontConfiguration");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descripcion)
                    .HasColumnType("text")
                    .HasColumnName("descripcion");

                entity.Property(e => e.DescripcionEn)
                    .HasColumnType("text")
                    .HasColumnName("descripcion_en");

                entity.Property(e => e.DescripcionPt)
                    .HasColumnType("text")
                    .HasColumnName("descripcion_pt");

                entity.Property(e => e.Email)
                    .HasColumnType("text")
                    .HasColumnName("email");

                entity.Property(e => e.EmailEn)
                    .HasColumnType("text")
                    .HasColumnName("email_en");

                entity.Property(e => e.EmailPt)
                    .HasColumnType("text")
                    .HasColumnName("email_pt");

                entity.Property(e => e.EmailValido)
                    .HasColumnType("text")
                    .HasColumnName("emailValido");

                entity.Property(e => e.EmailValidoEn)
                    .HasColumnType("text")
                    .HasColumnName("emailValido_en");

                entity.Property(e => e.EmailValidoPt)
                    .HasColumnType("text")
                    .HasColumnName("emailValido_pt");

                entity.Property(e => e.Enviar)
                    .HasColumnType("text")
                    .HasColumnName("enviar");

                entity.Property(e => e.EnviarEn)
                    .HasColumnType("text")
                    .HasColumnName("enviar_en");

                entity.Property(e => e.EnviarPt)
                    .HasColumnType("text")
                    .HasColumnName("enviar_pt");

                entity.Property(e => e.Nombre)
                    .HasColumnType("text")
                    .HasColumnName("nombre");

                entity.Property(e => e.NombreEn)
                    .HasColumnType("text")
                    .HasColumnName("nombre_en");

                entity.Property(e => e.NombrePt)
                    .HasColumnType("text")
                    .HasColumnName("nombre_pt");

                entity.Property(e => e.Suscribete)
                    .HasColumnType("text")
                    .HasColumnName("suscribete");

                entity.Property(e => e.SuscribeteEn)
                    .HasColumnType("text")
                    .HasColumnName("suscribete_en");

                entity.Property(e => e.SuscribetePt)
                    .HasColumnType("text")
                    .HasColumnName("suscribete_pt");

                entity.Property(e => e.ValidaEmail)
                    .HasColumnType("text")
                    .HasColumnName("validaEmail");

                entity.Property(e => e.ValidaEmailEn)
                    .HasColumnType("text")
                    .HasColumnName("validaEmail_en");

                entity.Property(e => e.ValidaEmailPt)
                    .HasColumnType("text")
                    .HasColumnName("validaEmail_pt");

                entity.Property(e => e.ValidaNombre)
                    .HasColumnType("text")
                    .HasColumnName("validaNombre");

                entity.Property(e => e.ValidaNombreEn)
                    .HasColumnType("text")
                    .HasColumnName("validaNombre_en");

                entity.Property(e => e.ValidaNombrePt)
                    .HasColumnType("text")
                    .HasColumnName("validaNombre_pt");
            });

            modelBuilder.Entity<FrontContentManagerBlog>(entity =>
            {
                entity.ToTable("FrontContentManager_blog");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_blog_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_blog_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.ArticuloUrl)
                    .HasColumnName("articulo_url")
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Blog)
                    .HasColumnName("blog")
                    .HasColumnType("text");

                entity.Property(e => e.BlogEn)
                    .HasColumnName("blog_en")
                    .HasColumnType("text");

                entity.Property(e => e.BlogPt)
                    .HasColumnName("blog_pt")
                    .HasColumnType("text");

                entity.Property(e => e.ContenidoRecurso)
                    .HasColumnName("contenidoRecurso")
                    .HasColumnType("text");

                entity.Property(e => e.ContenidoRecursoEn)
                    .HasColumnName("contenidoRecurso_en")
                    .HasColumnType("text");

                entity.Property(e => e.ContenidoRecursoPt)
                    .HasColumnName("contenidoRecurso_pt")
                    .HasColumnType("text");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("descripcion")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("description_en")
                    .HasColumnType("text");

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Imagen)
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.LeerMas)
                    .HasColumnName("leerMas")
                    .HasColumnType("text");

                entity.Property(e => e.LeerMasEn)
                    .HasColumnName("leerMas_en")
                    .HasColumnType("text");

                entity.Property(e => e.LeerMasPt)
                    .HasColumnName("leerMas_pt")
                    .HasColumnType("text");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Titulo)
                    .IsRequired()
                    .HasColumnName("titulo")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.TituloEn)
                    .HasColumnName("titulo_en")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TituloPt)
                    .HasColumnName("titulo_pt")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Type).HasColumnName("type");
            });

            modelBuilder.Entity<FrontContentManagerCliente>(entity =>
            {
                entity.ToTable("FrontContentManager_clientes");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_clientes_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_clientes_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.ClienteWebsiteUrl)
                    .HasColumnName("cliente_website_url")
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Empresa)
                    .IsRequired()
                    .HasColumnName("empresa")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Imagen)
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Type).HasColumnName("type");
            });

            modelBuilder.Entity<FrontContentManagerComofunciona>(entity =>
            {
                entity.ToTable("FrontContentManager_comofunciona");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_comofunciona_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_comofunciona_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("descripcion")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescripcionEn)
                    .HasColumnName("descripcion_en")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescripcionPt)
                    .HasColumnName("descripcion_pt")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.Imagen)
                    .IsRequired()
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ImagenEn)
                    .HasColumnName("imagen_en")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ImagenPt)
                    .HasColumnName("imagen_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial123)
                    .HasColumnName("TRIAL123")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<FrontContentManagerComofuncionaHeaderOnboarding>(entity =>
            {
                entity.ToTable("FrontContentManager_comofuncionaHeader_onboarding");

                entity.Property(e => e.Image)
                    .HasColumnName("image")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<FrontContentManagerComofuncionaparacandidatosinfo>(entity =>
            {
                entity.ToTable("FrontContentManager_comofuncionaparacandidatosinfo");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_comofuncionaparacandidatosinfo_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_comofuncionaparacandidatosinfo_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("descripcion")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescripcionEn)
                    .HasColumnName("descripcion_en")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescripcionPt)
                    .HasColumnName("descripcion_pt")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.Imagen)
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Titulo)
                    .IsRequired()
                    .HasColumnName("titulo")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.TituloEn)
                    .HasColumnName("titulo_en")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.TituloPt)
                    .HasColumnName("titulo_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial123)
                    .HasColumnName("TRIAL123")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<FrontContentManagerConsulOnbiardingHeader>(entity =>
            {
                entity.ToTable("FrontContentManager_consulOnbiarding_header");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .IsRequired()
                    .HasColumnName("description_en")
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionPt)
                    .IsRequired()
                    .HasColumnName("description_pt")
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.Image)
                    .HasColumnName("image")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.TilePt)
                    .HasColumnName("tile_pt")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TitleEn)
                    .HasColumnName("title_en")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FrontContentManagerEquipo>(entity =>
            {
                entity.ToTable("FrontContentManager_equipo");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_equipo_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_equipo_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("descripcion")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescripcionEn)
                    .IsRequired()
                    .HasColumnName("descripcion_en")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Imagen)
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Linkedin)
                    .HasColumnName("linkedin")
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasColumnName("nombre")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Puesto)
                    .IsRequired()
                    .HasColumnName("puesto")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.PuestoEn)
                    .HasColumnName("puesto_en")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.PuestoPt)
                    .HasColumnName("puesto_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<FrontContentManagerFaq>(entity =>
            {
                entity.ToTable("FrontContentManager_faq");

                entity.HasComment("TRIAL");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("creation_date")
                    .HasComment("TRIAL");

                entity.Property(e => e.Pregunta)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("pregunta")
                    .HasComment("TRIAL");

                entity.Property(e => e.PreguntaEn)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("pregunta_en")
                    .HasComment("TRIAL");

                entity.Property(e => e.PreguntaPt)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("pregunta_pt")
                    .HasComment("TRIAL");

                entity.Property(e => e.Title)
                    .HasColumnType("text")
                    .HasColumnName("title");

                entity.Property(e => e.TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("title_en");

                entity.Property(e => e.TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("title_pt");

                entity.Property(e => e.Type).HasColumnName("type");
            });

            modelBuilder.Entity<FrontContentManagerFastfact>(entity =>
            {
                entity.ToTable("FrontContentManager_fastfacts");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_fastfacts_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_fastfacts_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("descripcion")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.DescripcionEn)
                    .IsRequired()
                    .HasColumnName("descripcion_en")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.DescripcionPt)
                    .IsRequired()
                    .HasColumnName("descripcion_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Imagen)
                    .IsRequired()
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Titulo)
                    .IsRequired()
                    .HasColumnName("titulo")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.TituloEn)
                    .IsRequired()
                    .HasColumnName("titulo_en")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.TituloPt)
                    .IsRequired()
                    .HasColumnName("titulo_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial126)
                    .HasColumnName("TRIAL126")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<FrontContentManagerLogo>(entity =>
            {
                entity.ToTable("FrontContentManager_logos");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_logos_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_logos_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Logo)
                    .IsRequired()
                    .HasColumnName("logo")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.LogoEn)
                    .HasColumnName("logo_en")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.LogoFooter)
                    .IsRequired()
                    .HasColumnName("logo_footer")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.LogoFooterEn)
                    .HasColumnName("logo_footer_en")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.LogoFooterPt)
                    .HasColumnName("logo_footer_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.LogoPt)
                    .HasColumnName("logo_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial126)
                    .HasColumnName("TRIAL126")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<FrontContentManagerMatteriainfo>(entity =>
            {
                entity.ToTable("FrontContentManager_matteriainfo");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_matteriainfo_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_matteriainfo_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Infografia1)
                    .IsRequired()
                    .HasColumnName("infografia1")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Infografia1En)
                    .HasColumnName("infografia1_en")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Infografia1Pt)
                    .HasColumnName("infografia1_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Infografia2)
                    .IsRequired()
                    .HasColumnName("infografia2")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Infografia2En)
                    .HasColumnName("infografia2_en")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Infografia2Pt)
                    .HasColumnName("infografia2_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Infografia3)
                    .IsRequired()
                    .HasColumnName("infografia3")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Infografia3En)
                    .HasColumnName("infografia3_en")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Infografia3Pt)
                    .HasColumnName("infografia3_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Manifiesto)
                    .HasColumnName("manifiesto")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.ManifiestoEn)
                    .HasColumnName("manifiesto_en")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.ManifiestoPt)
                    .HasColumnName("manifiesto_pt")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBoton)
                    .IsRequired()
                    .HasColumnName("mensajeBoton")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBotonEn)
                    .IsRequired()
                    .HasColumnName("mensajeBoton_en")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBotonPt)
                    .IsRequired()
                    .HasColumnName("mensajeBoton_pt")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.PorqueMateria)
                    .IsRequired()
                    .HasColumnName("porqueMateria")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.PorqueMateriaEn)
                    .HasColumnName("porqueMateria_en")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.PorqueMateriaPt)
                    .HasColumnName("porqueMateria_pt")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial126)
                    .HasColumnName("TRIAL126")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<FrontContentManagerNuestroscliente>(entity =>
            {
                entity.ToTable("FrontContentManager_nuestrosclientes");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_nuestrosclientes_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_nuestrosclientes_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.ClienteWebsiteUrl)
                    .HasColumnName("cliente_website_url")
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Empresa)
                    .IsRequired()
                    .HasColumnName("empresa")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Imagen)
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Sector)
                    .IsRequired()
                    .HasColumnName("sector")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial126)
                    .HasColumnName("TRIAL126")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<FrontContentManagerNuestrosclientesinfo>(entity =>
            {
                entity.ToTable("FrontContentManager_nuestrosclientesinfo");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_nuestrosclientesinfo_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_nuestrosclientesinfo_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Imagen)
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBoton)
                    .IsRequired()
                    .HasColumnName("mensaje_boton")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBotonEn)
                    .IsRequired()
                    .HasColumnName("mensaje_boton_en")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBotonPt)
                    .IsRequired()
                    .HasColumnName("mensaje_boton_pt")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeImagen)
                    .IsRequired()
                    .HasColumnName("mensaje_imagen")
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeImagenEn)
                    .IsRequired()
                    .HasColumnName("mensaje_imagen_en")
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeImagenPt)
                    .IsRequired()
                    .HasColumnName("mensaje_imagen_pt")
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.SectorCivil).HasColumnType("text");

                entity.Property(e => e.SectorCivilEn)
                    .HasColumnName("SectorCivil_en")
                    .HasColumnType("text");

                entity.Property(e => e.SectorCivilPt)
                    .HasColumnName("SectorCivil_pt")
                    .HasColumnType("text");

                entity.Property(e => e.SectorPrivado)
                    .HasColumnName("sectorPrivado")
                    .HasColumnType("text");

                entity.Property(e => e.SectorPrivadoEn)
                    .HasColumnName("sectorPrivado_en")
                    .HasColumnType("text");

                entity.Property(e => e.SectorPrivadoPt)
                    .HasColumnName("sectorPrivado_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.TextoParrafo)
                    .IsRequired()
                    .HasColumnName("texto_parrafo")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.TextoParrafoEn)
                    .IsRequired()
                    .HasColumnName("texto_parrafo_en")
                    .HasColumnType("text")
                    .HasComment("TRIAL");
            });



            modelBuilder.Entity<StepByStepPostulant>(entity =>
            {
                entity.ToTable("stepByStepPostulant");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creationDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasColumnType("text");

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasColumnType("text");

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasColumnType("text");

                entity.Property(e => e.NumberOrder).HasColumnName("numberOrder");

                entity.Property(e => e.Step)
                    .IsRequired()
                    .HasColumnName("step")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<StepByStepPostulantDetail>(entity =>
            {
                entity.ToTable("stepByStepPostulantDetail");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Component)
                    .HasColumnName("component")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasColumnType("text");

                entity.Property(e => e.NameEn)
                    .HasColumnName("name_en")
                    .HasColumnType("text");

                entity.Property(e => e.NamePt)
                    .HasColumnName("name_pt")
                    .HasColumnType("text");

                entity.Property(e => e.PlaceHolder)
                    .HasColumnName("placeHolder")
                    .HasColumnType("text");

                entity.Property(e => e.PlaceHolderEn)
                    .HasColumnName("placeHolder_en")
                    .HasColumnType("text");

                entity.Property(e => e.PlaceHolderPt)
                    .HasColumnName("placeHolder_pt")
                    .HasColumnType("text");

                entity.Property(e => e.StepId).HasColumnName("stepId");

                entity.Property(e => e.Url)
                    .HasColumnName("url")
                    .HasColumnType("text");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.StepByStepPostulantDetails)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_sterByStepPostulantDetail_stepByStepPostulant");
            });

            modelBuilder.Entity<FrontContentManagerNuestrosservicio>(entity =>
            {
                entity.ToTable("FrontContentManager_nuestrosservicios");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_nuestrosservicios_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_nuestrosservicios_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("descripcion")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescripcionEn)
                    .HasColumnName("descripcion_en")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Imagen)
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Labelourservices)
                    .HasColumnName("labelourservices")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LabelourservicesEn)
                    .HasColumnName("labelourservices_en")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LabelourservicesPt)
                    .HasColumnName("labelourservices_pt")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.MoreInfo)
                    .HasColumnName("moreInfo")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.MoreInfoEn)
                    .HasColumnName("moreInfo_en")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.MoreInfoPt)
                    .HasColumnName("moreInfo_pt")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Servicio)
                    .IsRequired()
                    .HasColumnName("servicio")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ServicioEn)
                    .HasColumnName("servicio_en")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ServicioPt)
                    .HasColumnName("servicio_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Url)
                    .HasColumnName("url")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<FrontContentManagerNuestrosserviciosHeader>(entity =>
            {
                entity.ToTable("FrontContentManager_nuestrosservicios_header");

                entity.Property(e => e.BtnContacto)
                    .HasColumnName("btnContacto")
                    .HasColumnType("text");

                entity.Property(e => e.BtnContactoEn)
                    .HasColumnName("btnContacto_en")
                    .HasColumnType("text");

                entity.Property(e => e.BtnContactoPt)
                    .HasColumnName("btnContacto_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("Description_en")
                    .HasColumnType("text");

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("Description_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Image)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate)
                    .HasColumnName("registrationDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TitleEn)
                    .HasColumnName("Title_en")
                    .HasColumnType("text");

                entity.Property(e => e.TitlePt)
                    .HasColumnName("Title_pt")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<FrontContentManagerOfertasdestacada>(entity =>
            {
                entity.ToTable("FrontContentManager_ofertasdestacadas");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_ofertasdestacadas_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_ofertasdestacadas_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("descripcion")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescripcionEn)
                    .HasColumnName("descripcion_en")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.Empresa)
                    .IsRequired()
                    .HasColumnName("empresa")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Imagen)
                    .IsRequired()
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Titulo)
                    .IsRequired()
                    .HasColumnName("titulo")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.TituloEn)
                    .IsRequired()
                    .HasColumnName("titulo_en")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial129)
                    .HasColumnName("TRIAL129")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.Property(e => e.UrlOpening)
                    .HasColumnName("url_opening")
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<FrontContentManagerOrganizacionesinfo>(entity =>
            {
                entity.ToTable("FrontContentManager_organizacionesinfo");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_organizacionesinfo_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_organizacionesinfo_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Imagen)
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBoton)
                    .IsRequired()
                    .HasColumnName("mensaje_boton")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBotonEn)
                    .IsRequired()
                    .HasColumnName("mensaje_boton_en")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBotonPt)
                    .IsRequired()
                    .HasColumnName("mensaje_boton_pt")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeImagen)
                    .IsRequired()
                    .HasColumnName("mensaje_imagen")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeImagenEn)
                    .IsRequired()
                    .HasColumnName("mensaje_imagen_en")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeImagenPt)
                    .IsRequired()
                    .HasColumnName("mensaje_imagen_pt")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.SegundaImagen)
                    .HasColumnName("segunda_imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.SegundaImagenEn)
                    .HasColumnName("segunda_imagen_en")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.SegundaImagenPt)
                    .HasColumnName("segunda_imagen_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial129)
                    .HasColumnName("TRIAL129")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<FrontContentManagerParacandidatosinfo>(entity =>
            {
                entity.ToTable("FrontContentManager_paracandidatosinfo");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_paracandidatosinfo_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_paracandidatosinfo_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Imagen)
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBoton)
                    .IsRequired()
                    .HasColumnName("mensaje_boton")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBotonEn)
                    .HasColumnName("mensaje_boton_en")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBotonPt)
                    .HasColumnName("mensaje_boton_pt")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeImagen)
                    .IsRequired()
                    .HasColumnName("mensaje_imagen")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeImagenEn)
                    .HasColumnName("mensaje_imagen_en")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeImagenPt)
                    .HasColumnName("mensaje_imagen_pt")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial129)
                    .HasColumnName("TRIAL129")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<FrontContentManagerQuehacemo>(entity =>
            {
                entity.ToTable("FrontContentManager_quehacemos");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_quehacemos_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_quehacemos_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("descripcion")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescripcionEn)
                    .HasColumnName("descripcion_en")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescripcionPt)
                    .HasColumnName("descripcion_pt")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.Imagen)
                    .IsRequired()
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ImagenEn)
                    .HasColumnName("imagen_en")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ImagenPt)
                    .HasColumnName("imagen_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial129)
                    .HasColumnName("TRIAL129")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<FrontContentManagerQuehacemosorg>(entity =>
            {
                entity.ToTable("FrontContentManager_quehacemosorg");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_quehacemosorg_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_quehacemosorg_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("descripcion")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescripcionEn)
                    .HasColumnName("descripcion_en")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescripcionPt)
                    .HasColumnName("descripcion_pt")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.Imagen)
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Texto)
                    .IsRequired()
                    .HasColumnName("texto")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.TextoEn)
                    .HasColumnName("texto_en")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.TextoPt)
                    .HasColumnName("texto_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial129)
                    .HasColumnName("TRIAL129")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<FrontContentManagerRegistroorganizacione>(entity =>
            {
                entity.ToTable("FrontContentManager_registroorganizaciones");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_registroorganizaciones_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_registroorganizaciones_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Imagen)
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Mensaje)
                    .IsRequired()
                    .HasColumnName("mensaje")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBoton)
                    .IsRequired()
                    .HasColumnName("mensaje_boton")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBotonEn)
                    .IsRequired()
                    .HasColumnName("mensaje_boton_en")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBotonPt)
                    .IsRequired()
                    .HasColumnName("mensaje_boton_pt")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeEn)
                    .IsRequired()
                    .HasColumnName("mensaje_en")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajePt)
                    .IsRequired()
                    .HasColumnName("mensaje_pt")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial133)
                    .HasColumnName("TRIAL133")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<FrontContentManagerRegistroprofesionale>(entity =>
            {
                entity.ToTable("FrontContentManager_registroprofesionales");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_registroprofesionales_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_registroprofesionales_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Imagen)
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Mensaje)
                    .IsRequired()
                    .HasColumnName("mensaje")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBoton)
                    .IsRequired()
                    .HasColumnName("mensaje_boton")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBotonEn)
                    .IsRequired()
                    .HasColumnName("mensaje_boton_en")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBotonPt)
                    .IsRequired()
                    .HasColumnName("mensaje_boton_pt")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeEn)
                    .IsRequired()
                    .HasColumnName("mensaje_en")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajePt)
                    .IsRequired()
                    .HasColumnName("mensaje_pt")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial133)
                    .HasColumnName("TRIAL133")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<FrontContentManagerSliderhome>(entity =>
            {
                entity.ToTable("FrontContentManager_sliderhome");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_sliderhome_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_sliderhome_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Imagen)
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Mensaje)
                    .IsRequired()
                    .HasColumnName("mensaje")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBoton)
                    .IsRequired()
                    .HasColumnName("mensaje_boton")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBotonEn)
                    .IsRequired()
                    .HasColumnName("mensaje_boton_en")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeBotonPt)
                    .IsRequired()
                    .HasColumnName("mensaje_boton_pt")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajeEn)
                    .IsRequired()
                    .HasColumnName("mensaje_en")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.MensajePt)
                    .IsRequired()
                    .HasColumnName("mensaje_pt")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial139)
                    .HasColumnName("TRIAL139")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<FrontContentManagerSomosdiferente>(entity =>
            {
                entity.ToTable("FrontContentManager_somosdiferentes");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_somosdiferentes_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_somosdiferentes_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("descripcion")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescripcionEn)
                    .HasColumnName("descripcion_en")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescripcionPt)
                    .HasColumnName("descripcion_pt")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.Imagen)
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Titulo)
                    .IsRequired()
                    .HasColumnName("titulo")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.TituloEn)
                    .HasColumnName("titulo_en")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.TituloPt)
                    .HasColumnName("titulo_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial139)
                    .HasColumnName("TRIAL139")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<FrontContentManagerVacantescubierta>(entity =>
            {
                entity.ToTable("FrontContentManager_vacantescubiertas");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_vacantescubiertas_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_vacantescubiertas_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Empresa)
                    .IsRequired()
                    .HasColumnName("empresa")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.Imagen)
                    .HasColumnName("imagen")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial139)
                    .HasColumnName("TRIAL139")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.Property(e => e.Vacante)
                    .IsRequired()
                    .HasColumnName("vacante")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.WebsiteUrl)
                    .HasColumnName("website_url")
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<FrontContentManagerValoresmatteriainfo>(entity =>
            {
                entity.ToTable("FrontContentManager_valoresmatteriainfo");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("FrontContentManager_valoresmatteriainfo_e93cb7eb");

                entity.HasIndex(e => e.ModifiedById)
                    .HasName("FrontContentManager_valoresmatteriainfo_b3da0983");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("descripcion")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescripcionEn)
                    .HasColumnName("descripcion_en")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.DescripcionPt)
                    .HasColumnName("descripcion_pt")
                    .HasColumnType("text")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModificationDate)
                    .HasColumnName("modification_date")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.ModifiedById)
                    .HasColumnName("modified_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial139)
                    .HasColumnName("TRIAL139")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.Property(e => e.Valor)
                    .IsRequired()
                    .HasColumnName("valor")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ValorEn)
                    .HasColumnName("valor_en")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.ValorPt)
                    .HasColumnName("valor_pt")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<FrontContentManifiestoMatteriaRazonser>(entity =>
            {
                entity.ToTable("FrontContentManifiestoMatteria_razonser");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("Description_en")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("Description_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.TitleEn)
                    .HasColumnName("Title_En")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.TitlePt)
                    .HasColumnName("Title_pt")
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });



            modelBuilder.Entity<FrontContentManifiestoMatterium>(entity =>
            {

                entity.ToTable("FrontContentManifiestoMatteria");

                entity.Property(e => e.BtnOurAdn)
                    .HasColumnType("text")
                    .HasColumnName("btnOurADN");

                entity.Property(e => e.BtnOurAdnEn)
                    .HasColumnType("text")
                    .HasColumnName("btnOurADN_en");

                entity.Property(e => e.BtnOurAdnPt)
                    .HasColumnType("text")
                    .HasColumnName("btnOurADN_pt");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.DescriptionEn)
                    .IsUnicode(false)
                    .HasColumnName("description_en");

                entity.Property(e => e.DescriptionPt)
                    .IsUnicode(false)
                    .HasColumnName("description_pt");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ImageCeo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ImageCEO");

                entity.Property(e => e.Linkedin)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("linkedin");

                entity.Property(e => e.MarketStall)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.MarketStallEn)
                    .HasMaxLength(160)
                    .IsUnicode(false)
                    .HasColumnName("MarketStall_en");

                entity.Property(e => e.MarketStallPt)
                    .HasMaxLength(160)
                    .IsUnicode(false)
                    .HasColumnName("MarketStall_pt");

                entity.Property(e => e.Name)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Phrase)
                    .HasMaxLength(280)
                    .IsUnicode(false)
                    .HasColumnName("phrase");

                entity.Property(e => e.PhraseEn)
                    .HasColumnType("text")
                    .HasColumnName("phrase_en");

                entity.Property(e => e.PhrasePt)
                    .HasColumnType("text")
                    .HasColumnName("phrase_pt");

                entity.Property(e => e.RazonSer)
                    .HasColumnType("text")
                    .HasColumnName("razonSer");

                entity.Property(e => e.RazonSerEn)
                    .HasColumnType("text")
                    .HasColumnName("razonSer_en");

                entity.Property(e => e.RazonSerPt)
                    .HasColumnType("text")
                    .HasColumnName("razonSer_pt");

                entity.Property(e => e.RegistrationDate)
                    .IsRequired()
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.TitleHeader)
                    .IsRequired()
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("titleHeader");

                entity.Property(e => e.TitleHeaderEn)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("titleHeader_en");

                entity.Property(e => e.TitleHeaderPt)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("titleHeader_pt");
            });

            modelBuilder.Entity<FrontContentObjetivosAdn>(entity =>
            {
                entity.ToTable("FrontContent_Objetivos_ADN");

                entity.Property(e => e.AdbobjetivosheaderId).HasColumnName("adbobjetivosheaderId");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(230)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("description_en")
                    .HasMaxLength(230)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasMaxLength(230)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.HasOne(d => d.Adbobjetivosheader)
                    .WithMany(p => p.FrontContentObjetivosAdns)
                    .HasForeignKey(d => d.AdbobjetivosheaderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrontContent_Objetivos_ADN_FrontContent_Objetivos_ADN_Header");
            });

            modelBuilder.Entity<FrontContentObjetivosAdnHeader>(entity =>
            {
                entity.ToTable("FrontContent_Objetivos_ADN_Header");

                entity.Property(e => e.Image)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("image");

                entity.Property(e => e.LblTitle)
                    .HasColumnType("text")
                    .HasColumnName("lblTitle");

                entity.Property(e => e.LblTitleBeneficios)
                    .HasColumnType("text")
                    .HasColumnName("lblTitleBeneficios");

                entity.Property(e => e.LblTitleBeneficiosEn)
                    .HasColumnType("text")
                    .HasColumnName("lblTitleBeneficios_en");

                entity.Property(e => e.LblTitleBeneficiosPt)
                    .HasColumnType("text")
                    .HasColumnName("lblTitleBeneficios_pt");

                entity.Property(e => e.LblTitleEn)
                    .HasColumnType("text")
                    .HasColumnName("lblTitle_en");

                entity.Property(e => e.LblTitlePt)
                    .HasColumnType("text")
                    .HasColumnName("lblTitle_pt");

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<FrontContentOurAdn>(entity =>
            {
                entity.ToTable("FrontContentOurADN");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(190)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("description_en")
                    .HasMaxLength(190)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasMaxLength(190)
                    .IsUnicode(false);

                entity.Property(e => e.Image)
                    .HasColumnName("image")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate)
                    .HasColumnName("registrationDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.TitleEn)
                    .HasColumnName("title_en")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.TitlePt)
                    .HasColumnName("title_pt")
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });



            modelBuilder.Entity<FrontContentOurAdnhead>(entity =>
            {
                entity.ToTable("FrontContentOurADNHead");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Phrase)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("phrase");

                entity.Property(e => e.PhraseEn)
                    .HasColumnType("text")
                    .HasColumnName("phrase_en");

                entity.Property(e => e.PhrasePt)
                    .HasColumnType("text")
                    .HasColumnName("phrase_pt");

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .HasColumnType("text")
                    .HasColumnName("title");

                entity.Property(e => e.TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("title_en");

                entity.Property(e => e.TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("title_pt");
            });

            modelBuilder.Entity<FrontContentRecruitingComo>(entity =>
            {
                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.ComoesHeaderId).HasColumnName("comoesHeaderId");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(180)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("description_en")
                    .HasMaxLength(180)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasMaxLength(180)
                    .IsUnicode(false);

                entity.HasOne(d => d.ComoesHeader)
                    .WithMany(p => p.FrontContentRecruitingComos)
                    .HasForeignKey(d => d.ComoesHeaderId)
                    .HasConstraintName("FK_FrontContentRecruitingComoEs_FrontContentRecruitingComoEsHeader");
            });

            modelBuilder.Entity<FrontContentRecruitingComoEsHeader>(entity =>
            {
                entity.ToTable("FrontContentRecruitingComoEsHeader");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("image");

                entity.Property(e => e.RegistrationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("registrationDate");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("title");

                entity.Property(e => e.TitleComoes)
                    .HasColumnType("text")
                    .HasColumnName("titleComoes");

                entity.Property(e => e.TitleComoesEn)
                    .HasColumnType("text")
                    .HasColumnName("titleComoes_en");

                entity.Property(e => e.TitleComoesPt)
                    .HasColumnType("text")
                    .HasColumnName("titleComoes_pt");

                entity.Property(e => e.TitleEn)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("title_en");

                entity.Property(e => e.TitlePt)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("title_pt");
            });

            modelBuilder.Entity<FrontContentRecruitingHeader>(entity =>
            {
                entity.ToTable("FrontContentRecruitingHeader");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.BtnDownload)
                    .HasColumnType("text")
                    .HasColumnName("btnDownload");

                entity.Property(e => e.BtnDownloadEn)
                    .HasColumnType("text")
                    .HasColumnName("btnDownload_en");

                entity.Property(e => e.BtnDownloadPt)
                    .HasColumnType("text")
                    .HasColumnName("btnDownload_pt");

                entity.Property(e => e.Description)
                    .HasMaxLength(180)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.DescriptionEn)
                    .HasMaxLength(180)
                    .IsUnicode(false)
                    .HasColumnName("description_en");

                entity.Property(e => e.DescriptionPt)
                    .HasMaxLength(180)
                    .IsUnicode(false)
                    .HasColumnName("description_pt");

                entity.Property(e => e.Image)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("image");

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("title");

                entity.Property(e => e.TitleEn)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("title_en");

                entity.Property(e => e.TitlePt)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("title_pt");
            });

            modelBuilder.Entity<FrontContentRecruitingPassive>(entity =>
            {
                entity.ToTable("FrontContentRecruitingPassive");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(180)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("description_en")
                    .HasMaxLength(180)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasMaxLength(180)
                    .IsUnicode(false);

                entity.Property(e => e.PassiveHeadId).HasColumnName("passiveHeadId");

                entity.HasOne(d => d.PassiveHead)
                    .WithMany(p => p.FrontContentRecruitingPassives)
                    .HasForeignKey(d => d.PassiveHeadId)
                    .HasConstraintName("FK_FrontContentRecruitingPassive_FrontContentRecruitingPassiveHeader");
            });

            modelBuilder.Entity<FrontContentRecruitingPassiveHeader>(entity =>
            {
                entity.ToTable("FrontContentRecruitingPassiveHeader");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.BtnContact)
                    .HasColumnType("text")
                    .HasColumnName("btnContact");

                entity.Property(e => e.BtnContactEn)
                    .HasColumnType("text")
                    .HasColumnName("btnContact_en");

                entity.Property(e => e.BtnContactPt)
                    .HasColumnType("text")
                    .HasColumnName("btnContact_pt");

                entity.Property(e => e.Image)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("image");

                entity.Property(e => e.RegistrationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("registrationDate");

                entity.Property(e => e.Title)
                    .HasColumnType("text")
                    .HasColumnName("title");

                entity.Property(e => e.TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("title_en");

                entity.Property(e => e.TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("title_pt");
            });

            modelBuilder.Entity<FrontContentReruitingPorQueContratarno>(entity =>
            {
                entity.ToTable("FrontContentReruitingPorQueContratarnos");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(180)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.DescriptionEn)
                    .IsRequired()
                    .HasMaxLength(180)
                    .IsUnicode(false)
                    .HasColumnName("description_en");

                entity.Property(e => e.DescriptionPt)
                    .IsRequired()
                    .HasMaxLength(180)
                    .IsUnicode(false)
                    .HasColumnName("description_pt");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("image");

                entity.Property(e => e.LblPorque)
                    .HasColumnType("text")
                    .HasColumnName("lblPorque");

                entity.Property(e => e.LblPorqueEn)
                    .HasColumnType("text")
                    .HasColumnName("lblPorque_en");

                entity.Property(e => e.LblPorquePt)
                    .HasColumnType("text")
                    .HasColumnName("lblPorque_pt");

                entity.Property(e => e.RegistrationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("registrationDate");
            });



            modelBuilder.Entity<FrontContentTalleresHeader>(entity =>
            {
                entity.ToTable("FrontContentTalleresHeader");

                entity.Property(e => e.BtnContactanos)
                    .HasColumnName("btnContactanos")
                    .HasColumnType("text");

                entity.Property(e => e.BtnContactanosEn)
                    .HasColumnName("btnContactanos_en")
                    .HasColumnType("text");

                entity.Property(e => e.BtnContactanosPt)
                    .HasColumnName("btnContactanos_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("description_en")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Image)
                    .HasColumnName("image")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TitleEn)
                    .HasColumnName("title_en")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TitlePt)
                    .HasColumnName("title_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FrontContentTalleresObjetivo>(entity =>
            {
                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("description_en")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LblTitle)
                    .HasColumnName("lblTitle")
                    .HasColumnType("text");

                entity.Property(e => e.LblTitleEn)
                    .HasColumnName("lblTitle_en")
                    .HasColumnType("text");

                entity.Property(e => e.LblTitlePt)
                    .HasColumnName("lblTitle_pt")
                    .HasColumnType("text");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.TitleEn)
                    .HasColumnName("title_en")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.TitlePt)
                    .HasColumnName("title_pt")
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FrontContentTalleresTemasDetail>(entity =>
            {
                entity.ToTable("FrontContentTalleresTemasDetail");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("description_en")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.TemasHeadId).HasColumnName("temasHeadId");

                entity.HasOne(d => d.TemasHead)
                    .WithMany(p => p.FrontContentTalleresTemasDetails)
                    .HasForeignKey(d => d.TemasHeadId)
                    .HasConstraintName("FK_FrontContentTalleresTemasDetail_FrontContentTalleresTemasHead");
            });

            modelBuilder.Entity<FrontContentTalleresTemasHead>(entity =>
            {
                entity.ToTable("FrontContentTalleresTemasHead");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("Description_en")
                    .HasColumnType("text");

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("Description_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasColumnName("image")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.SubTitle)
                    .HasColumnName("subTitle")
                    .HasColumnType("text");

                entity.Property(e => e.SubTitleEn)
                    .HasColumnName("SubTitle_en")
                    .HasColumnType("text");

                entity.Property(e => e.SubTitlePt)
                    .HasColumnName("SubTitle_pt")
                    .HasColumnType("text");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasColumnType("text");

                entity.Property(e => e.TitleEn)
                    .HasColumnName("title_en")
                    .HasColumnType("text");

                entity.Property(e => e.TitlePt)
                    .HasColumnName("title_pt")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<FrontContentVacantesComoFunciona>(entity =>
            {
                entity.ToTable("FrontContentVacantesComoFunciona");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Comofuncionaheaderid).HasColumnName("comofuncionaheaderid");

                entity.Property(e => e.Description)
                    .HasMaxLength(190)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.DescriptionEn)
                    .HasMaxLength(190)
                    .IsUnicode(false)
                    .HasColumnName("description_en");

                entity.Property(e => e.DescriptionPt)
                    .HasMaxLength(190)
                    .IsUnicode(false)
                    .HasColumnName("description_pt");

                entity.Property(e => e.RegistrationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("registrationDate");

                entity.HasOne(d => d.Comofuncionaheader)
                    .WithMany(p => p.FrontContentVacantesComoFuncionas)
                    .HasForeignKey(d => d.Comofuncionaheaderid)
                    .HasConstraintName("FK_FrontContentVacantesComoFunciona_FrontContentVacantesComoFuncionaHeader");
            });

            modelBuilder.Entity<FrontContentVacantesComoFuncionaHeader>(entity =>
            {
                entity.ToTable("FrontContentVacantesComoFuncionaHeader");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.BtnPublicar)
                    .HasColumnType("text")
                    .HasColumnName("btnPublicar");

                entity.Property(e => e.BtnPublicarEn)
                    .HasColumnType("text")
                    .HasColumnName("btnPublicar_en");

                entity.Property(e => e.BtnPublicarPt)
                    .HasColumnType("text")
                    .HasColumnName("btnPublicar_pt");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("image");

                entity.Property(e => e.LblComoPublicar)
                    .HasColumnType("text")
                    .HasColumnName("lblComoPublicar");

                entity.Property(e => e.LblComoPublicarEn)
                    .HasColumnType("text")
                    .HasColumnName("lblComoPublicar_en");

                entity.Property(e => e.LblComoPublicarPt)
                    .HasColumnType("text")
                    .HasColumnName("lblComoPublicar_pt");

                entity.Property(e => e.RegistrationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("registrationDate");

                entity.Property(e => e.Title)
                    .HasColumnType("text")
                    .HasColumnName("title");

                entity.Property(e => e.TitleEn)
                    .HasColumnType("text")
                    .HasColumnName("title_en");

                entity.Property(e => e.TitlePt)
                    .HasColumnType("text")
                    .HasColumnName("title_pt");
            });

            modelBuilder.Entity<FrontContentVacantesComoPublicar>(entity =>
            {
                entity.ToTable("FrontContentVacantesComoPublicar");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.DescriptionEn)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("description_en");

                entity.Property(e => e.DescriptionPt)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("description_pt");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("image");

                entity.Property(e => e.RegistrationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("registrationDate");
            });

            modelBuilder.Entity<FrontContentVacantesHeader>(entity =>
            {
                entity.ToTable("FrontContentVacantesHeader");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.BtnDownload)
                    .HasColumnType("text")
                    .HasColumnName("btnDownload");

                entity.Property(e => e.BtnDownloadEn)
                    .HasColumnType("text")
                    .HasColumnName("btnDownload_en");

                entity.Property(e => e.BtnDownloadPt)
                    .HasColumnType("text")
                    .HasColumnName("btnDownload_pt");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.DescriptionEn)
                    .HasMaxLength(160)
                    .IsUnicode(false)
                    .HasColumnName("description_en");

                entity.Property(e => e.DescriptionPt)
                    .HasMaxLength(160)
                    .IsUnicode(false)
                    .HasColumnName("description_pt");

                entity.Property(e => e.Image)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("image");

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(90)
                    .IsUnicode(false)
                    .HasColumnName("title");

                entity.Property(e => e.TitleEn)
                    .HasMaxLength(90)
                    .IsUnicode(false)
                    .HasColumnName("title_en");

                entity.Property(e => e.TitlePt)
                    .HasMaxLength(90)
                    .IsUnicode(false)
                    .HasColumnName("title_pt");
            });

            modelBuilder.Entity<FrontContentVacantesPaquete>(entity =>
            {
                entity.ToTable("FrontContentVacantesPaquetes");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.AplicaIva).HasColumnName("aplicaIva");

                entity.Property(e => e.CurrencyId).HasColumnName("currencyId");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.DescriptionEn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("description_en");

                entity.Property(e => e.DescriptionPt)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("description_pt");

                entity.Property(e => e.Image)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("image");

                entity.Property(e => e.LblAhorra)
                    .HasColumnType("text")
                    .HasColumnName("lblAhorra");

                entity.Property(e => e.LblAhorraEn)
                    .HasColumnType("text")
                    .HasColumnName("lblAhorra_en");

                entity.Property(e => e.LblAhorraPt)
                    .HasColumnType("text")
                    .HasColumnName("lblAhorra_pt");

                entity.Property(e => e.LblPrecio)
                    .HasColumnType("text")
                    .HasColumnName("lblPrecio");

                entity.Property(e => e.LblPrecioEn)
                    .HasColumnType("text")
                    .HasColumnName("lblPrecio_en");

                entity.Property(e => e.LblPrecioPt)
                    .HasColumnType("text")
                    .HasColumnName("lblPrecio_pt");

                entity.Property(e => e.NumberCredits).HasColumnName("numberCredits");

                entity.Property(e => e.PackagePrice)
                    .HasColumnType("money")
                    .HasColumnName("packagePrice");

                entity.Property(e => e.RealPrice)
                    .HasColumnType("money")
                    .HasColumnName("realPrice");

                entity.Property(e => e.RegistrationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("registrationDate");

                entity.Property(e => e.Savemoney)
                    .HasColumnType("money")
                    .HasColumnName("savemoney");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("title");

                entity.Property(e => e.TitleEn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("title_en");

                entity.Property(e => e.TitlePt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("title_pt");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.FrontContentVacantesPaquetes)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_FrontContentVacantesPaquetes_catalogs_currency");
            });

            modelBuilder.Entity<LabelsPantalla>(entity =>
            {
                entity.ToTable("LabelsPantalla");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NameEn)
                    .HasColumnName("Name_en")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NamePt)
                    .HasColumnName("Name_pt")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Pantalla)
                    .WithMany(p => p.LabelsPantallas)
                    .HasForeignKey(d => d.PantallaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LabelsPantalla_Pantallas");
            });

            modelBuilder.Entity<MetodosPago>(entity =>
            {
                entity.ToTable("MetodosPago");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Prefix)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<MetodosPagosCountry>(entity =>
            {
                entity.ToTable("MetodosPagosCountry");

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.MetodosPagosCountries)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MetodosPagosCountry_catalogs_country");

                entity.HasOne(d => d.MetodoPago)
                    .WithMany(p => p.MetodosPagosCountries)
                    .HasForeignKey(d => d.MetodoPagoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MetodosPagosCountry_MetodosPago");
            });

            modelBuilder.Entity<NewsletterOrganization>(entity =>
            {
                entity.ToTable("newsletterOrganization");

                entity.Property(e => e.Business)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<NewsletterPostulant>(entity =>
            {
                entity.ToTable("newsletterPostulant");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<NotificationsNotification>(entity =>
            {
                entity.ToTable("notifications_notification");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.CreatedById)
                    .HasName("notifications_notification_e93cb7eb");

                entity.HasIndex(e => e.NotificationTypeId)
                    .HasName("notifications_notification_be9a7e02");

                entity.HasIndex(e => e.UpdatedById)
                    .HasName("notifications_notification_9ccf0ba6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("description_en")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasComment("TRIAL");

                entity.Property(e => e.IdSource)
                    .HasColumnName("id_source")
                    .HasComment("TRIAL");

                entity.Property(e => e.IdTarget)
                    .HasColumnName("id_target")
                    .HasComment("TRIAL");

                entity.Property(e => e.NotificationTypeId)
                    .HasColumnName("notification_type_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Seen)
                    .HasColumnName("seen")
                    .HasComment("TRIAL");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial260)
                    .HasColumnName("TRIAL260")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnName("updated")
                    .HasColumnType("datetime")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");
            });

            modelBuilder.Entity<OpeningsOpening>(entity =>
            {
                entity.ToTable("openings_opening");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.OpeningTypeId).HasName("openings_opening_2bb255e8");

                entity.HasIndex(e => e.CurrencyId).HasName("openings_opening_2c7d5721");

                entity.HasIndex(e => e.CompanyId).HasName("openings_opening_447d3092");

                entity.HasIndex(e => e.CountryId).HasName("openings_opening_93bfec8a");

                entity.HasIndex(e => e.UpdatedById).HasName("openings_opening_9ccf0ba6");

                entity.HasIndex(e => e.ConsultantId).HasName("openings_opening_ca2bd156");

                entity.HasIndex(e => e.CreatedById).HasName("openings_opening_e93cb7eb");

                entity.HasIndex(e => e.PhaseId).HasName("openings_opening_ecd57eed");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Activities)
                    .HasColumnType("text")
                    .HasColumnName("activities")
                    .HasComment("TRIAL");

                entity.Property(e => e.AlternateCompanyAlias)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("alternate_company_alias")
                    .HasComment("TRIAL");

                entity.Property(e => e.AlternateCompanyDescription)
                    .HasColumnType("text")
                    .HasColumnName("alternate_company_description")
                    .HasComment("TRIAL");

                entity.Property(e => e.Avaliability)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("avaliability")
                    .HasComment("TRIAL");

                entity.Property(e => e.City)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("city")
                    .HasComment("TRIAL");

                entity.Property(e => e.CloseOpening)
                    .HasColumnType("date")
                    .HasColumnName("close_opening")
                    .HasComment("TRIAL");

                entity.Property(e => e.CompanyId)
                    .HasColumnName("company_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.ConsultantId)
                    .HasColumnName("consultant_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CountryId)
                    .HasColumnName("country_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("currency_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Featured).HasColumnName("featured");

                entity.Property(e => e.HireType)
                    .HasColumnName("hire_type")
                    .HasComment("TRIAL");

                entity.Property(e => e.KeepCompanyAlias)
                    .HasColumnName("keep_company_alias")
                    .HasComment("TRIAL");

                entity.Property(e => e.KeySkills)
                    .HasColumnType("text")
                    .HasColumnName("key_skills")
                    .HasComment("TRIAL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("name")
                    .HasComment("TRIAL");

                entity.Property(e => e.OpenOpening)
                    .HasColumnType("date")
                    .HasColumnName("open_opening")
                    .HasComment("TRIAL");

                entity.Property(e => e.OpeningTypeId)
                    .HasColumnName("opening_type_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Perks)
                    .HasColumnType("text")
                    .HasColumnName("perks")
                    .HasComment("TRIAL");

                entity.Property(e => e.PhaseId)
                    .HasColumnName("phase_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.PrivateSalary)
                    .HasColumnName("private_salary")
                    .HasComment("TRIAL");

                entity.Property(e => e.PurposeOpening)
                    .HasColumnType("text")
                    .HasColumnName("purposeOpening");

                entity.Property(e => e.RelevantDetails)
                    .HasColumnType("text")
                    .HasColumnName("relevant_details")
                    .HasComment("TRIAL");

                entity.Property(e => e.Responsabilities)
                    .HasColumnType("text")
                    .HasColumnName("responsabilities")
                    .HasComment("TRIAL");

                entity.Property(e => e.Salary)
                    .HasColumnName("salary")
                    .HasComment("TRIAL");

                entity.Property(e => e.SalaryTodefine).HasColumnName("salaryTodefine");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.StatusOpening)
                    .HasColumnName("status_opening")
                    .HasComment("TRIAL");

                entity.Property(e => e.StatusProcess).HasColumnName("status_process");

                entity.Property(e => e.TeamProfile)
                    .HasColumnType("text")
                    .HasColumnName("team_profile")
                    .HasComment("TRIAL");

                entity.Property(e => e.Timestamp)
                    .HasColumnType("datetime")
                    .HasColumnName("timestamp")
                    .HasComment("TRIAL");

                entity.Property(e => e.TopLevel)
                    .HasColumnName("top_level")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .HasColumnName("updated")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.Whyjoin)
                    .HasColumnType("text")
                    .HasColumnName("whyjoin");

                entity.Property(e => e.WorkAreaId).HasColumnName("workAreaId");

                entity.Property(e => e.YearsExperience)
                    .HasColumnName("years_experience")
                    .HasComment("TRIAL");

                entity.Property(e => e.YearsExperienceOpening)
                    .HasColumnName("years_experience_opening")
                    .HasComment("TRIAL");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.OpeningsOpenings)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_openings_opening_companies_company");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.OpeningsOpenings)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_openings_opening_catalogs_country");

                entity.HasOne(d => d.HireTypeNavigation)
                    .WithMany(p => p.OpeningsOpenings)
                    .HasForeignKey(d => d.HireType)
                    .HasConstraintName("FK_openings_opening_openings_opening");

                entity.HasOne(d => d.StatusOpeningNavigation)
                    .WithMany(p => p.OpeningsOpenings)
                    .HasForeignKey(d => d.StatusOpening)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_openings_opening_EstatusVacantes");

                entity.HasOne(d => d.StatusProcessNavigation)
                    .WithMany(p => p.OpeningsOpenings)
                    .HasForeignKey(d => d.StatusProcess)
                    .HasConstraintName("FK_openings_opening_EstatusVacantesProceso");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.OpeningsOpenings)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_openings_opening_auth_user");
            });

            modelBuilder.Entity<OpeningsOpeningInterest>(entity =>
            {
                entity.ToTable("openings_opening_interests");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.InterestId)
                    .HasName("openings_opening_interests_774f0487");

                entity.HasIndex(e => e.OpeningId)
                    .HasName("openings_opening_interests_dcfb5015");

                entity.HasIndex(e => new { e.OpeningId, e.InterestId })
                    .HasName("openings_opening_interests_opening_id_0a12481c_uniq")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.InterestId)
                    .HasColumnName("interest_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.OpeningId)
                    .HasColumnName("opening_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial280)
                    .HasColumnName("TRIAL280")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.HasOne(d => d.Opening)
                    .WithMany(p => p.OpeningsOpeningInterests)
                    .HasForeignKey(d => d.OpeningId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_openings_opening_openings_opening_1");
            });

            modelBuilder.Entity<OpeningsOpeningProfession>(entity =>
            {
                entity.ToTable("openings_opening_professions");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.OpeningId)
                    .HasName("openings_opening_professions_dcfb5015");

                entity.HasIndex(e => e.ProfessionId)
                    .HasName("openings_opening_professions_162f386a");

                entity.HasIndex(e => new { e.OpeningId, e.ProfessionId })
                    .HasName("openings_opening_professions_opening_id_446f41f0_uniq")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.OpeningId)
                    .HasColumnName("opening_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.ProfessionId)
                    .HasColumnName("profession_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Trial280)
                    .HasColumnName("TRIAL280")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TRIAL");

                entity.HasOne(d => d.Opening)
                    .WithMany(p => p.OpeningsOpeningProfessions)
                    .HasForeignKey(d => d.OpeningId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_openings_opening_interests_openings_opening_1");
            });

            modelBuilder.Entity<OpeningsOpeningcandidate>(entity =>
            {
                entity.ToTable("openings_openingcandidate");

                entity.HasComment("TRIAL");

                entity.HasIndex(e => e.UpdatedById).HasName("openings_openingcandidate_9ccf0ba6");

                entity.HasIndex(e => e.CandidateId).HasName("openings_openingcandidate_da445ead");

                entity.HasIndex(e => e.OpeningId).HasName("openings_openingcandidate_dcfb5015");

                entity.HasIndex(e => e.CreatedById).HasName("openings_openingcandidate_e93cb7eb");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CandidateId)
                    .HasColumnName("candidate_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CreatedById)
                    .HasColumnName("created_by_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.CurrencyId).HasColumnName("currencyId");

                entity.Property(e => e.OpeningId)
                    .HasColumnName("opening_id")
                    .HasComment("TRIAL");

                entity.Property(e => e.Ranking)
                    .HasColumnName("ranking")
                    .HasComment("TRIAL");

                entity.Property(e => e.SalaryMax)
                    .HasColumnName("salary_max")
                    .HasComment("TRIAL");

                entity.Property(e => e.SalaryMin)
                    .HasColumnName("salary_min")
                    .HasComment("TRIAL");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.Selected).HasColumnName("selected");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("TRIAL");

                entity.Property(e => e.StatusPostulation).HasColumnName("status_Postulation");

                entity.Property(e => e.Timestamp)
                    .HasColumnType("datetime")
                    .HasColumnName("timestamp")
                    .HasComment("TRIAL");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .HasColumnName("updated")
                    .HasComment("TRIAL");

                entity.Property(e => e.UpdatedById)
                    .HasColumnName("updated_by_id")
                    .HasComment("TRIAL");

                entity.HasOne(d => d.Candidate)
                    .WithMany(p => p.OpeningsOpeningcandidates)
                    .HasForeignKey(d => d.CandidateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_openings_opening_professions_candidates_candidate_3");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.OpeningsOpeningcandidates)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_openings_openingcandidate_catalogs_currency");

                entity.HasOne(d => d.Opening)
                    .WithMany(p => p.OpeningsOpeningcandidates)
                    .HasForeignKey(d => d.OpeningId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_openings_opening_professions_openings_opening_1");

                entity.HasOne(d => d.StatusPostulationNavigation)
                    .WithMany(p => p.OpeningsOpeningcandidates)
                    .HasForeignKey(d => d.StatusPostulation)
                    .HasConstraintName("FK_openings_openingcandidate_Catalogs_Status");
            });

            modelBuilder.Entity<Pago>(entity =>
            {
                entity.ToTable("Pagos");
                entity.Property(e => e.CurrencyId)
                    .HasColumnName("currency_id")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.DateApproved)
                    .HasColumnName("date_approved")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExternalReference)
                    .HasColumnName("external_reference")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdMercadoPago)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.MerchantOrderId)
                    .HasColumnName("merchant_order_id")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.NetReceivedAmount)
                    .HasColumnName("net_received_amount")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Reason)
                    .HasColumnName("reason")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.TotalPaidAmount)
                    .HasColumnName("total_paid_amount")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionOrderId).HasColumnName("transaction_order_id");
            });

            modelBuilder.Entity<PagosPayPal>(entity =>
            {
                entity.ToTable("PagosPayPal");

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CompraId).HasColumnName("compraId");

                entity.Property(e => e.CreateTime)
                    .HasColumnName("create_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.CurrencyCode)
                    .HasColumnName("currency_code")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .HasColumnName("email_address")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MerchantId)
                    .HasColumnName("merchant_id")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PaypalId)
                    .HasColumnName("paypalId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Compra)
                    .WithMany(p => p.PagosPayPals)
                    .HasForeignKey(d => d.CompraId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PagosPayPal_ComprasPaquetes");
            });

            modelBuilder.Entity<PagosPeyu>(entity =>
            {
                entity.ToTable("PagosPeyu");

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AuthorizationCode)
                    .HasColumnName("authorizationCode")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderId)
                    .HasColumnName("orderId")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.PendingReason)
                    .HasColumnName("pendingReason")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.ResponseCode)
                    .HasColumnName("responseCode")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasColumnName("state")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate)
                    .HasColumnName("transactionDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransactionId)
                    .HasColumnName("transactionId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Compra)
                    .WithMany(p => p.PagosPeyus)
                    .HasForeignKey(d => d.CompraId)
                    .HasConstraintName("FK_PagosPeyu_ComprasPaquetes");
            });

            modelBuilder.Entity<Pantalla>(entity =>
            {
                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ProgramaMai>(entity =>
            {
                entity.ToTable("ProgramaMAI");

                entity.Property(e => e.BtnDownload)
                    .HasColumnType("text")
                    .HasColumnName("btnDownload");

                entity.Property(e => e.BtnDownloadEn)
                    .HasColumnType("text")
                    .HasColumnName("btnDownload_en");

                entity.Property(e => e.BtnDownloadPt)
                    .HasColumnType("text")
                    .HasColumnName("btnDownload_pt");

                entity.Property(e => e.DescriptionMai)
                    .IsRequired()
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("descriptionMAI");

                entity.Property(e => e.DescriptionMaiEn)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("descriptionMAI_en");

                entity.Property(e => e.DescriptionMaiPt)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("descriptionMAI_pt");

                entity.Property(e => e.DescriptionManaged)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("descriptionManaged");

                entity.Property(e => e.DescriptionManagedEn)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("descriptionManaged_en");

                entity.Property(e => e.DescriptionManagedPt)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("descriptionManaged_pt");

                entity.Property(e => e.ImageManaged)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ImageObjectives)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LblTitleObjetivos)
                    .HasColumnType("text")
                    .HasColumnName("lblTitleObjetivos");

                entity.Property(e => e.LblTitleObjetivosEn)
                    .HasColumnType("text")
                    .HasColumnName("lblTitleObjetivos_en");

                entity.Property(e => e.LblTitleObjetivosPt)
                    .HasColumnType("text")
                    .HasColumnName("lblTitleObjetivos_pt");

                entity.Property(e => e.LinkMaterial)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("linkMaterial");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.TitleMai)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("titleMAI");

                entity.Property(e => e.TitleMaiEn)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("titleMAI_en");

                entity.Property(e => e.TitleMaiPt)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("titleMAI_pt");

                entity.Property(e => e.TitleManaged)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("titleManaged");

                entity.Property(e => e.TitleManagedEn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("titleManaged_en");

                entity.Property(e => e.TitleManagedPt)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("titleManaged_pt");

                entity.Property(e => e.Video)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("video");
            });

            modelBuilder.Entity<ProgramaMaimodelo>(entity =>
            {
                entity.ToTable("ProgramaMAIModelo");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .IsRequired()
                    .HasColumnName("description_en")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionPt)
                    .IsRequired()
                    .HasColumnName("description_pt")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Image)
                    .HasColumnName("image")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TitleEn)
                    .IsRequired()
                    .HasColumnName("title_en")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TitlePt)
                    .IsRequired()
                    .HasColumnName("title_pt")
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProgramaMaiobjective>(entity =>
            {
                entity.ToTable("ProgramaMAIObjectives");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("description_en")
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionPt)
                    .HasColumnName("description_pt")
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}